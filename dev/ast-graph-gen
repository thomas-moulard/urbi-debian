#! /usr/bin/env python

import sys, ast, tools

if len(sys.argv) != 2:
  tools.error("Usage: .. SRCDIR")
srcdir = sys.argv[1]

## Abstract syntax tree graph -------------------------------------------------

loader = ast.Loader ()
nodes, ast_params = loader.load (sys.stdin)

sys.stdout = ast_dot = file("ast.dot.tmp", "w")

# Prologue.
print """/*<<-*/
/* Generated, do not edit by hand.  */
/*->>*/
/* Abstract Syntax Tree graph.  */
digraph Tasks {
  graph [ordering=out, rankdir=BT, ratio=0.4]
  node [shape=box, fontsize=14]"""

classes = nodes.values ()
classes.sort (lambda x, y: cmp (x.name, y.name))

# Abstract classes.
abstract_classes = filter ((lambda x: not x.concrete), classes)
print """
  /* Abstract classes. */
  {
    node [fontname=\"Times-Italic\"];"""
for a in abstract_classes:
  print "    \"" + a.name + "\";"
print """  }
"""

print "  /* Help Graphviz with the placement of top classes.  */"
print "  { rank = same; \"Ast\" \"Escapable\" ;" + \
      " \"Typable\" ; \"TypeConstructor\" }"
print

# Nodes and their subclass(es).
print "  /* Relation of generalization.  */"
for c in classes:
  print "  \"" + c.name + "\"",
  if c.super != []:
    print "-> {",
    for s in c.super:
      print "\"" + s.name + "\"",
    print "}",
  print

# Epilogue.
print "}"

ast_dot.close()
sys.stdout = sys.__stdout__
tools.lazy_install (srcdir, "ast.dot")
