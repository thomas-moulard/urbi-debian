@INPROCEEDINGS{benveniste.03.ieee,
  author =       {Albert Benveniste and Paul Caspi and Stephen
                  A. Edwards and Nicolas Halbwachs and Paul Le Guernic
                  and Robert De Simone},
  title =        {The synchronous languages twelve years later},
  booktitle =    {Proceedings of the IEEE},
  year =         {2003},
  volume =       {91},
  number =       {1},
  month =        {January},
  pages =        {64--83},
  abstract =     {Twelve years ago, PROCEEDINGS OF THE IEEE devoted a
                  special section to the synchronous languages. This
                  paper discusses the improvements, difficulties, and
                  successes that have occured with the synchronous
                  languages since then. Today, synchronous languages
                  have been established as a technology of choice for
                  modeling, specifying, validating, and implementing
                  real-time embedded applications. The paradigm of
                  synchrony has emerged as an engineer-friendly design
                  method based on mathematically sound tools.}
}

@article{berry.92.scp,
  author =       {Berry, G\'{e}rard and Gonthier, Georges},
  title =        {The ESTEREL synchronous programming language: design,
                  semantics, implementation},
  journal =      {Sci. Comput. Program.},
  volume =       {19},
  number =       {2},
  year =         {1992},
  issn =         {0167-6423},
  pages =        {87--152},
  doi =          {http://dx.doi.org/10.1016/0167-6423(92)90005-V},
  publisher =    {Elsevier North-Holland, Inc.},
  address =      {Amsterdam, The Netherlands, The Netherlands},
}

@article{boussinot.91.spe,
  author =       {Boussinot, Fr\'{e}d\'{e}ric},
  title =        {Reactive C: an extension of C to program reactive systems},
  journal =      {Softw. Pract. Exper.},
  volume =       {21},
  number =       {4},
  year =         {1991},
  issn =         {0038-0644},
  pages =        {401--428},
  doi =          {http://dx.doi.org/10.1002/spe.4380210406},
  publisher =    {John Wiley \& Sons, Inc.},
  address =      {New York, NY, USA},
  abstract =     {Reactive systems are interactive programs that react
                  continuously to sequences of activations coming from the
                  external world. Reactive programming leads to a new
                  programming style where one programs in terms of reactions
                  to activations and reasons in a logic of instants. This
                  paper describes an extension of the C programming language
                  called RC (for ‘Reactive C’) to program reactive
                  systems. The language RC is described, then some
                  programming examples are given to illustrate the reactive
                  approach. The main RC notions come directly from the
                  Esterel synchronous programming language. Finally, the
                  Esterel and RC languages are compared.}
}

@techreport{boussinot.97.tr,
  URL =          {http://hal.inria.fr/inria-00073442/en/},
  title =        {{T}he {S}ugar{C}ubes {T}ool {B}ox},
  author =       {{B}oussinot, {F}r{\'e}d{\'e}ric and {S}usini,
                  {J}ean-{F}erdy},
  abstract =     {{S}ugar{C}ubes are a set of {J}ava classes for
                  implementing software systems such as: $\bullet$
                  {E}vent based systems, especially those where events
                  are instantly broadcast throughout the
                  system. {C}ommunicating in this framework is like in
                  radio transmissions, where emitters send information
                  that is immediately received by all
                  receivers. $\bullet$ {C}oncurrent systems, in
                  particular threadless ones. {H}ere, parallelism is a
                  logical programming construct to implement
                  activities which are supposed to proceed
                  concurrently, and not in sequence. $\bullet$
                  {R}eactive systems, which continuously react to
                  activations from an external source. \noindent
                  {S}ugar{C}ubes are used to implement reactive
                  scripts and icobj programming on top of the {J}ava
                  language. {T}hey are available at
                  http://www.inria.fr/meije/rc/{S}ugar{C}ubes.},
  keywords =     {{REACTIVE} {PROGRAMMING} / {JAVA} / {BROADCAST}
                  {EVENTS}},
  language =     {{E}nglish},
  affiliation =  {{MEIJE} - {INRIA} {S}ophia {A}ntipolis - {INRIA} },
  type =         {0},
  institution =  {INRIA},
  number =       {{RR}-3247},
  month =        {09},
  year =         {1997},
  URL =          {http://hal.inria.fr/inria-00073442/PDF/RR-3247.pdf},
}

@TechReport{cooper.04.tr,
  author =       {G. Cooper and S. Krishnamurthi},
  title =        {{FrTime}: Functional Reactive Programming in {PLT}
                  Scheme},
  institution =  {Brown University},
  year =         {2004},
  number =       {CS-03-20},
  month =        {April},
  abstract =     {Functional Reactive Programming (FRP) supports the
                  declarative construction of reactive systems through
                  signals, or time-varying values. In this paper, we
                  present a new language called FrTime, which provides
                  FRP-style signals atop a dialect of Scheme. We
                  introduce the language with a few examples and
                  discuss its implementation. Unlike previous FRP
                  systems, FrTime uses impure features, such as state
                  and asynchronous communication, to model time and to
                  control evaluation. The use of such features yields
                  a scalable, event-driven implementation with several
                  important advantages. Specifically, it eases
                  integration with other systems, supports
                  distribution of signals across a network, and
                  permits various benign impurities. To illustrate the
                  language's expressive power, we present a concise
                  implementation of a networked paddle-ball game in
                  FrTime.  }
}

@BOOK{halbwachs.03.book,
  AUTHOR =       {Nicolas Halbwachs},
  TITLE =        {Synchronous programming of reactive systems},
  PUBLISHER =    {Kluwer Academic Pub.},
  YEAR =         {1993}
}

@inproceedings{halbwachs.05.memocode,
  author =       {Nicolas Halbwachs},
  title =        {A synchronous language at work: the story of
                  {Lustre}},
  booktitle =    {MEMOCODE '05: Proceedings of the 2nd ACM/IEEE
                  International Conference on Formal Methods and
                  Models for Co-Design},
  year =         {2005},
  isbn =         {0-7803-9227-2},
  pages =        {3--11},
  doi =          {http://dx.doi.org/10.1109/MEMCOD.2005.1487884},
  publisher =    {IEEE Computer Society},
  address =      {Washington, DC, USA},
  abstract =     {We recall the story of the development of the
                  synchronous data-flow language LUSTRE and of its
                  industrial transfer inside the toolset SCADE. We try
                  to analyse the reasons of its success, and to report
                  the main lessons we got from the transfer of an
                  academic concept into real industrial world.}
}

@ARTICLE{halbwachs.91.ieee,
  AUTHOR =       {Nicolas Halbwachs and P. Caspi and P. Raymond and
                  D. Pilaud},
  TITLE =        {The synchronous dataflow programming language
                  {LUSTRE}},
  JOURNAL =      {Proceedings of the IEEE},
  abstract =     {This paper describes the language Lustre, which is a
                  dataflow synchronous language, designed for
                  programming reactive systems --- such as automatic
                  control and monitoring systems --- as well as for
                  describing hardware. The dataflow aspect of Lustre
                  makes it very close to usual description tools in
                  these domains (block-diagrams, networks of
                  operators, dynamical samples-systems, etc...),
                  and its synchronous interpretation makes it well
                  suited for handling time in programs. Moreover, this
                  synchronous interpretation allows it to be compiled
                  into an efficient sequential program. Finally, the
                  Lustre formalism is very similar to temporal
                  logics. This allows the language to be used for both
                  writing programs and expressing program properties,
                  which results in an original program verification
                  methodology.},
  VOLUME =       {79},
  NUMBER =       {9},
  PAGES =        {1305--1320},
  MONTH =        {September},
  YEAR =         {1991}
}

@INPROCEEDINGS{mandel.05.jfla,
  AUTHOR =       {Louis Mandel and Marc Pouzet},
  TITLE =        {{ReactiveML}, un langage pour la programmation
                  r{\'e}active en {ML}},
  BOOKTITLE =    {Journ{\'e}es Francophones des Langages Applicatifs
                  ({JFLA'05})},
  YEAR =         2005,
  ADDRESS =      {Obernai, France},
  MONTH =        MAR,
  PUBLISHER =    {INRIA},
  URL =          {MandelPouzet-JFLA-05.ps}
}

@INPROCEEDINGS{mandel.05.ppdp,
  AUTHOR =       {Louis Mandel and Marc Pouzet},
  TITLE =        {{ReactiveML}, a Reactive Extension to {ML}},
  BOOKTITLE =    {Proceedings of 7th {ACM SIGPLAN} International
                  conference on Principles and Practice of Declarative
                  Programming ({PPDP'05})},
  YEAR =         2005,
  ADDRESS =      {Lisbon, Portugal},
  MONTH =        JUL,
  URL =          {MandelPouzet-PPDP-05.pdf},
  URL2 =         {MandelPouzet-PPDPextended-05.pdf},
  abstract =     {We present ReactiveML, a programming language
                  dedicated to the implementation of complex reactive
                  systems as found in graphical user interfaces, video
                  games or simulation problems. The language is based
                  on the reactive model introduced by Boussinot. This
                  model combines the so-called synchronous model found
                  in Esterel which provides instantaneous
                  communication and parallel composition with
                  classical features found in asynchronous models like
                  dynamic creation of processes.  The language comes
                  as a conservative extension of an existing
                  call-by-value ML language and it provides additional
                  constructs for describing the temporal part of a
                  system. The language receives a behavioral semantics
                  \`a la Esterel and a transition semantics describing
                  precisely the interaction between ML values and
                  reactive constructs. It is statically typed through
                  a Milner type inference system and programs are
                  compiled into regular ML programs. The language has
                  been used for programming several complex simulation
                  problems (e.g., routing protocols in mobile ad-hoc
                  networks).}
}

@INPROCEEDINGS{mandel.05.slap,
  AUTHOR =       {Louis Mandel and Farid Benbadis},
  TITLE =        {Simulation of Mobile Ad hoc Network Protocols in
                  {ReactiveML}},
  BOOKTITLE =    {Proceedings of Synchronous Languages, Applications,
                  and Programming ({SLAP'05})},
  PUBLISHER =    {Electronic Notes in Theoretical Computer Science},
  YEAR =         2005,
  MONTH =        APR,
  ADDRESS =      {Edinburgh, Scotland},
  URL =          {MandelBenbadis-SLAP-05.pdf}
}

@UNPUBLISHED{mandel.05.tsi,
  AUTHOR =       {Louis Mandel and Marc Pouzet},
  TITLE =        {{ReactiveML} : un langage fonctionnel pour la
                  programmation r{\'e}active},
  NOTE =         {Submitted to Technique et Science Informatiques
                  ({TSI})},
  MONTH =        NOV,
  YEAR =         {2006},
  URL =          {MandelPouzet-TSI-06-submit.ps},
  resume =       {La programmation de systèmes réactifs tels que les
                  simulateurs de systèmes dynamiques ou les jeux vidéo
                  est une tâche difficile. Les techniques classiques
                  pour programmer ces systèmes sont fondées sur
                  l’utilisation de bibliothèques de threads ou de
                  programmation événementielle. Nous introduisons ici
                  le langage ReactiveML comme une alternative à ces
                  pratiques. Le langage est une extension de OCaml
                  fondée sur le modèle réactif synchrone de
                  Boussinot. Ce modèle reprend des principes du
                  synchrone tels que la composition parallèle
                  déterministe et la communication par diffusion. Il
                  les combine à des mécanismes de création dynamique
                  de processus. Cet article présente le langage, son
                  système de type et sa sémantique.},
  abstract =     {The programming of reactive systems such as
                  simulators of dynamic systems or video games is a
                  difficult task. We introduce the ReactiveML language
                  as an alternative to classical techniques such as
                  event loops or thread-based programming. ReactiveML
                  is an extension of OCaml founded on the synchronous
                  reactive model of Boussinot. This model combines the
                  synchronous model which provides parallel
                  composition and instantaneous communications with
                  dynamic creation of processes. This paper presents
                  the language, its type system and its formal
                  semantics.}
}

@PHDTHESIS{mandel.06.phd,
  AUTHOR =       {Louis Mandel},
  TITLE =        {Conception, S{\'e}mantique et Implantation de
                  {ReactiveML} : un langage {\`a} la {ML} pour la
                  programmation r{\'e}active},
  SCHOOL =       {Universit{\'e} Paris 6},
  YEAR =         {2006},
  URL =          {Mandel-These.pdf}
}

@INPROCEEDINGS{mandel.08.slap,
  AUTHOR =       {Louis Mandel and Florence Plateau},
  TITLE =        {Interactive Programming of Reactive Systems},
  BOOKTITLE =    {Proceedings of Model-driven High-level Programming
                  of Embedded Systems ({SLA++P'08})},
  YEAR =         2008,
  MONTH =        APR,
  ADDRESS =      {Budapest, Hungary},
  URL =          {MandelPlateau-SLAP-2008.pdf}
}

@ARTICLE{maraninchi.01.cl,
  AUTHOR =       {F. Maraninchi and Y. R\'emond},
  TITLE =        {Argos: an Automaton-Based Synchronous Language},
  JOURNAL =      {Computer Languages},
  publisher =    {Elsevier},
  NUMBER =       {27},
  PAGES =        {61-92},
  YEAR =         {2001},
  abstract =     {Argos belongs to the family of synchronous
                  languages, designed for programming reactive systems
                  (Lustre, Esterel, Signal, ...). Argos is a set of
                  operators that allow to combine Boolean Mealy
                  machines, in a compositional way. It takes its
                  origin in Statecharts, but with the Argos operators,
                  one can build only a subset of Statecharts, roughly
                  those that do not make use of multi-level arrows. We
                  explain the main motivations for the definition of
                  Argos, and the main differences with Statecharts and
                  their numerous semantics. We define the set of
                  operators, give them a perfectly synchronous
                  semantics in the sense of Esterel, and prove that it
                  is compositional, with respect to the trace
                  equivalence of Boolean Mealy machines. We give an
                  overview of the work related to the definition and
                  implementation of Argos (code generation, connection
                  to verification tools, introduction of
                  non-determinism, etc.). This paper also gives a set
                  of guidelines for building an automaton-based,
                  Statechart-like, yet perfectly synchronous,
                  language.  }
}

@UNPUBLISHED{morel.07.fesca,
  AUTHOR =       {Lionel Morel and Louis Mandel},
  TITLE =        {Executable Contracts for Incremental Prototypes of
                  Embedded Systems},
  NOTE =         {Submitted to Formal Foundations of Embedded Software
                  and Component-Based Software Architectures
                  ({FESCA'07})},
  MONTH =        NOV,
  YEAR =         2006,
  URL =          {MorelMandel-FESCA-07-submit.pdf}
}

@INPROCEEDINGS{rutten.93.wlctsrts,
  author =       {Eric Rutten and Paul Le Guernic},
  title =        {Sequencing Data Flow Tasks in SIGNAL},
  booktitle =    {IN PROC. OF THE ACM SIGPLAN WORKSHOP ON LANGUAGE,
                  COMPILER AND TOOL SUPPORT FOR REAL-TIME SYSTEMS},
  year =         {1993},
  publisher =    {}
}


@INPROCEEDINGS{samper.06.inter-sense,
  AUTHOR =       {Ludovic Samper and Florence Maraninchi and Laurent
                  Mounier and Louis Mandel},
  TITLE =        {{GLONEMO}: Global and Accurate Formal Models for the
                  Analysis of Ad hoc Sensor Networks},
  BOOKTITLE =    {Proceedings of the First International Conference on
                  Integrated Internet Ad hoc and Sensor Networks
                  ({InterSense'06})},
  YEAR =         {2006},
  ADDRESS =      {Nice, France},
  MONTH =        MAY,
  URL =          {SamperMaraninchiMounierMandel-InterSense-2006.pdf}
}


%%% Local Variables:
%%% coding: utf-8
%%% fill-column: 76
%%% End:
