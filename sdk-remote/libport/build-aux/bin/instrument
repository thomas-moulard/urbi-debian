#! /usr/bin/perl -w

=head1 NAME

instrument - automatic binary instrumentation

=head1 SYNOPSIS

instrument [OPTIONS...] [--] PROGRAM [ARGUMENTS...]

Instrument the PROGRAM when possible.

=head1 OPTIONS

The environment variable INSTRUMENTFLAGS is prepended to the command
line arguments before option parsing.  If the program includes flags
for instrument, they are treated last, after the command line options.
(This is considered a bug, but won't be fixed unless there is demand.).

The executable may contain strings as follows:

  INSTRUMENTFLAGS=<where>:<flags>

for instance

  INSTRUMENTFLAGS=foo.cc:14:--mode=none

i.e., the source should contain something like:

  const char* instrumentflags_14 = "INSTRUMENTFLAGS=foo.cc:14:--mode=none"

There can be several C<flags>, following the shell syntax for word
splitting.  There can be several such lines.  Use C<libport/instrument.hh>
which features C<INSTRUMENTFLAGS> which can be used as follows:

  INSTRUMENTFLAGS(<flags>)

for instance

  INSTRUMENTFLAGS(--mode=none)

General options:

=over 4

=item B<-f>, B<--force>

By default no instrumentation is done on shell scripts and Windows
executables.  It is frequent when running tests in the build tree to
actually test shell scripts that bounce to actual binaries. With this
option, instrumentation is always performed.

=item B<-h>, B<--help>

Display this message and exit.

=item B<--libtool>=I<libtool>.

Specify what Libtool to use.  By default uses the first one of
I<$LIBTOOL>, I<glibtool>, I<libtool> whose first line of --version
contains I<GNU libtool>.

=item B<-m>, B<--mode>=I<mode>.

Specify the instrumentation mode:

=over 4

=item I<auto>

Chose the most appropriate mode.  Default.

=item I<none>

No instrumentation.

=item I<osx>

Use Mac OS X special malloc related environment variables.

=item I<valgrind>

Use valgrind (memcheck).

=back

=item B<-n>, B<--dry-run>

Don't actually run any command; just print them.

=item B<-o>, B<--output>=I<file>

Save the logs in I<file> instead of standard error.

=item B<-q>, B<--quiet>

Be less verbose.  Accumulates.

=item B<-v>, B<--verbose>

Be more verbose.  Accumulates.

=item B<-V>, B<--valgrind-option>=I<option>

Pass I<option> to Valgrind.  Accumulates.  For instance B<-V
--suppressions=I<suppression-file>>.

=back

=cut

BEGIN
{
  use File::Basename;
  unshift @INC, dirname($0) . '/../perl';
}

use strict;
use English;
use File::Basename;
use BuildAux::FileUtils;
use BuildAux::Verbose;

require 'shellwords.pl';

# Whether not to run the command, but just display it.
my $dry_run = 0;

# Whether scripts should also be instrumented.
my $force = 0;

# The libtool the use.  If undef, use find_gnu_libtool to find it.
my $libtool;

# Instrument mode.
use constant
{
  mode_auto       => 1,
  mode_none       => 2,
  mode_osx        => 3,
  mode_valgrind   => 4,
};
my $mode = mode_auto;
# From value to name.
my %mode_name =
  (
   mode_auto()     => "auto",
   mode_none()     => "none",
   mode_osx()      => "osx",
   mode_valgrind() => "valgrind",
  );
# From name to value.
my %mode = map { $mode_name{$_} => $_ } keys %mode_name;

# Where to save logs.  STDERR if undef.
my $output;

# Depending on the version of Valgrind, use --log-file or
# --log-file-exactly.
my $valgrind_log_file = '--log-file';

# More options for valgrind.
my @valgrind_option =
  (
   '--error-exitcode=242',
   '--gen-suppressions=all',
  );

=head1 FUNCTIONS

=over 4

=item C<help>

Generate the B<--help> message.  Generates the full man page when
C<$verbose>.

=cut

sub help ($)
{
  my ($verbose) = @_;
  use Pod::Usage;
  # See <URL:http://perldoc.perl.org/pod2man.html#NOTES>.
  pod2usage( { -message => "Portable instrumentation",
               -exitval => 0,
               -verbose => $verbose,
               -output  => \*STDOUT });
}

######################################################################

=item C<getopt($where, $accept_args, \@args)>

Process the options in C<@args>.  Leave the arguments in C<@args>.

=cut

sub getopt ($$\@)
{
  my ($where, $accept_args, $args) = @_;
  use Getopt::Long;
  my %option = (
    "f|force"       => \$force,
    "h|help"        => sub { help ($verbose) },
    "libtool=s"
      => sub
         {
           if (-x $_[1])
             {
               $libtool = $_[1];
             }
           else
             {
               verbose 0, "--libtool ignored: not an executable: $_[1]";
             }
         },
    "m|mode=s"      => sub { exists $mode{$_[1]} or die "unknown mode: $_[1]";
                             $mode = $mode{$_[1]}; },
    "n|dry-run"     => \$dry_run,
    "o|output=s"    => \$output,
    "q|quiet"       => sub { --$verbose },
    "v|verbose+"    => \$verbose,
    "V|valgrind-option=s" => \@valgrind_option,
    );
  Getopt::Long::Configure ("bundling", "pass_through");
  verbose 3, "getopt $where: @{$args}";

  # We would like to use GetOptionsFromArray, but it does not seem to
  # be wide-spread enough.  GetOptions works on @ARGV, so save and
  # restore it.  Unless precisely we are working on it.
  my @ARGV_save;
  if ($args != \@ARGV)
    {
      @ARGV_save = @ARGV;
      @ARGV = @{$args};
    }
  GetOptions %option
    or die "while processing $where\n";
  die "$where: arguments are not accepted: @ARGV\n"
    if scalar @ARGV && ! $accept_args;
  if ($args != \@ARGV)
    {
      @{$args} = @ARGV;
      @ARGV = @ARGV_save;
    }
}

=item C<getargs>

Process options in C<$ENV{INSTRUMENTFLAGS}> and C<@ARGV>.  Leave
arguments in C<@ARGV>.

=cut

sub getargs ()
{
  my $envvar = 'INSTRUMENTFLAGS';
  my @flags = shellwords ($ENV{$envvar} || '');
  getopt "\$$envvar", 0, @flags;

  getopt "command line", 1, @ARGV;

  # Can't be verbose before processing --force...
  verbose 2, "prepended arguments: @flags"
    if exists $ENV{$envvar};

  # If there is one, do not keep the --.
  shift @ARGV
    if exists $ARGV[0] && $ARGV[0] eq '--';
}


=item C<cpompute_mode>

If C<$mode> is auto, find the appropriate mode.

=cut

sub compute_mode ()
{
  my $valgrind_help = `valgrind --help 2>/dev/null`;

  use Config;
  if ($valgrind_help
      && ! ($Config{osname} eq 'darwin'
            # Valgrind does not work with Snow Leopard (Darwin 10),
            # nor Darwin PPC.
            && ($Config{osvers} =~ /^10\..*/
                # I don't know how PPC displays, so check it is not i386
                # instead.
                || $Config{myuname} !~ /i386/)))
    {
      $mode = mode_valgrind;
      $valgrind_log_file = '--log-file-exactly'
        if $valgrind_help =~ /--log-file-exactly/;
    }
  elsif ($OSNAME eq 'darwin')
    {
      $mode = mode_osx;
    }
}

######################################################################

=item C<file_type($file)>

The file type of C<$file>, according to C<file>.

=cut

sub file_type ($)
{
  my ($file) = @_;
  my $res = `file $file`;
  chop $res;
  $res =~ s/^\Q$file\E:\s*//;
  if ($res =~ /shell script/)
    {
      # The sed|grep pattern comes from libtool itself.
      system("sed -e 4q \"$file\" 2>/dev/null |
              grep -c '^# Generated by .*libtool' > /dev/null 2>&1");
      $res = 'libtool wrapper'
        if $? == 0;
    }
  verbose 2, "type of $file: $res";
  return $res;
}


######################################################################

=item C<instrument_prefix($libtool)>

Read the current C<$mode> (and maybe resolve it if it is still
C<mode_auto>), and based on it, return what must be prepended to the
command to instrument.  If C<$libtool> is non empty, use it to run
valgrind.

=cut

sub instrument_prefix ($)
{
  my ($libtool) = @_;
  my @res = ();

  compute_mode
    if $mode == mode_auto;

  if ($mode == mode_osx)
    {
      @res = (
        "env",
        "MallocBadFreeAbort=1",
        "MallocCheckHeapAbort=1",
        "MallocErrorAbort=1",
        "MallocGuardEdges=1",
        "MallocPreScribble=1",
        "MallocScribble=1",
        );
      push @res, "MallocLogFile=$output"
        if $output;
    }
  elsif ($mode == mode_valgrind)
    {
      @res = ("valgrind", @valgrind_option);
      push @res, "--quiet"
        if 0 == $verbose;
      push @res, "--verbose"
        if 2 <= $verbose;
      push @res, "$valgrind_log_file=$output"
        if $output;
      push @res, "--";
      # Now, if this requires libtool, pass it.
      unshift @res, $libtool, "--mode=execute"
	if $libtool;
    }
  return @res;
}

=item C<find_gnu_libtool()>

If C<$libtool> is defined, use that one, otherwise set try to find GNU
Libtool and return it, otherwise return undef.

=cut

sub find_gnu_libtool ()
{
  # List of libtools to use.
  my @libtool;
  # If the user specified the libtool to use, use that one.
  if ($libtool)
    {
      @libtool = ($libtool);
    }
  else
    {
      # Beware that on Mac OS X, libtool is not GNU libtool.
      @libtool = qw(glibtool libtool);
      unshift @libtool, $ENV{LIBTOOL}
        if exists $ENV{LIBTOOL};
    }
  for my $libtool (@libtool)
    {
      my $version = `$libtool --version 2>/dev/null |
                       sed 1q |
                       grep 'GNU libtool'`;
      if ($? == 0)
        {
          chomp $version;
          verbose 2, "using GNU Libtool: $libtool: $version";
          return $libtool;
        }
    }
  verbose 2, "did not find GNU Libtool as: @libtool";
}

=item file_flags($file, $type, $libtool)

Check the strings of C<$file> (the program to instrument) to see if it
contains embedded C<INSTRUMENTFLAGS>, and process them.  If the
C<$type> of C<$file> shows it is a libtool file, use C<$libtool> to
read the strings of C<$file>.

=cut

sub file_flags ($$$)
{
  my ($file, $type, $libtool) = @_;

  # Really instrument here.
  verbose 2, "extracting INSTRUMENTFLAGS";
  $libtool .= ' --mode=execute'
    if $libtool;
  use BuildAux::XFile;
  my $in = BuildAux::XFile->new("$libtool strings $file|");
  while (my $line = $in->getline)
    {
      if ($line =~ m/^INSTRUMENTFLAGS=(.*):(.*)/mg)
	{
          verbose 2, "extracting INSTRUMENTFLAGS: $2";
	  my @flag = shellwords($2);
	  getopt $1, 0, @flag;
	}
    }
}


=item instrument(@argv)

Return C<@argv> modified so that instrumentation is performed as requested.

=cut

sub instrument (@)
{
  my (@argv) = @_;

  # The file to instrument.
  my $file = $argv[0];

  # The type of the program to instrument.
  my $type = $file ? file_type $file : '';

  # If it's a libtool wrapper, don't instrument it unless we can find
  # libtool.
  my $libtool = $type =~ /libtool wrapper/ ? find_gnu_libtool : "";

  # Process possible additional flags in the file itself.
  file_flags $file, $type, $libtool;

  # Now that we have processed the envvar, the cli, and the file
  # itself, instrument if needed.

  # Don't instrument if this is a shell-script, or a Windows
  # executable (since in that case, we need wine to run it, which is
  # something Valgrind does not know about).
  #
  # If the user asked for troubles (--force), instrument anyway.
  $mode = mode_none
    unless $force || $type !~ /script|(?:PE|PE32 executable)\s+for MS Windows/;

  # Really instrument here.
  verbose 2, "mode: $mode: $mode_name{$mode}";
  unshift @argv, instrument_prefix($libtool);

  return @argv;
}

######################################################################

=item C<shellescape($str)>

Return C<$str> properly escaped for a regular Bourne shell.  Avoid
useless quotes to produce a readable result.  Keep sync with the copy
in print-env.

This is insufficient.  We actually need to have the result "eval"'ed.

=cut

sub shellescape($)
{
  my ($str) = @_;
  if ($str =~ m([^-=+_/.[:alnum:]]))
    {
      $str =~ s,[\\'],'\\$&',g;
      $str = "'$str'";
    }
  return $str;
}

## ------ ##
## Main.  ##
## ------ ##

# Get debug symbols on OS X.
push @valgrind_option, '--dsymutil=yes'
  if $OSNAME eq 'darwin';

# If we can see our "built-in" instrument.supp file, use it.
{
  my $supp = "$0.supp";
  push @valgrind_option, "--suppressions=$supp"
    if -f $supp;
}

getargs;

my @res = instrument(@ARGV);
@res = map { shellescape($_); } @res;
verbose 2, "result: @res";
if ($dry_run)
{
  print "@res\n";
}
else
{
  exec { $res[0] } @res
    or die "couldn't exec @res: $!\n";
}


### Setup "Gostai" style for perl-mode and cperl-mode.
## Local Variables:
## perl-indent-level: 2
## perl-continued-statement-offset: 2
## perl-continued-brace-offset: -2
## perl-brace-offset: 0
## perl-brace-imaginary-offset: 0
## perl-label-offset: -2
## cperl-indent-level: 2
## cperl-brace-offset: 0
## cperl-continued-brace-offset: -2
## cperl-label-offset: -2
## cperl-extra-newline-before-brace: t
## cperl-merge-trailing-else: nil
## cperl-continued-statement-offset: 2
## End:
