#					-*- shell-script -*-
##
## children.as: This file is part of build-aux.
## Copyright (C) 2006-2010, Gostai S.A.S.
##
## This software is provided "as is" without warranty of any kind,
## either expressed or implied, including but not limited to the
## implied warranties of fitness for a particular purpose.
##
## See the LICENSE file for more information.
## For comments, bug reports and feedback: http://www.urbiforge.com
##


m4_defun([_URBI_CHILDREN_PREPARE],
[[
# quote_for_eval_arg ARG
# ----------------------
# Aesthetically quote ARG to be evaled later.
# This function returns two values: QUOTE_FOR_EVAL_RESULT
# is double-quoted, suitable for a subsequent eval, whereas
# QUOTE_FOR_EVAL_UNQUOTED_RESULT has merely all characters
# which are still active within double quotes backslashified.
#
# Taken from Libtool.
quote_for_eval_arg ()
{
  case $][1 in
    (*[\\\`\"\$]*)
      local quote_subst='s/\([`"$\\]\)/\\\1/g'
      quote_for_eval_arg_unquoted_result=`echo "$][1" | sed -e "$quote_subst"`;;
    (*)
      quote_for_eval_arg_unquoted_result="$][1";;
  esac

  case $quote_for_eval_arg_unquoted_result in
    # Double-quote args containing shell metacharacters to delay
    # word splitting, command substitution and and variable
    # expansion for a subsequent eval.
    # Many Bourne shells cannot handle close brackets correctly
    # in scan sets, so we specify it separately.
    (*[\[\~\#\^\&\*\(\)\{\}\|\;\<\>\?\'\ \	]*|*]*|"")
      quote_for_eval_arg_result="\"$quote_for_eval_arg_unquoted_result\"";;
    (*)
      quote_for_eval_arg_result="$quote_for_eval_arg_unquoted_result";;
  esac
}

# quote_for_eval_arg ARG...
# -------------------------
quote_for_eval ()
{
  local i
  local sep
  local res
  for i
  do
    quote_for_eval_arg "$i"
    res=$res$sep$quote_for_eval_arg_result
    sep=" "
  done
  quote_for_eval_result=$res
}


# run TITLE COMMAND...
# --------------------
# Run the COMMAND... (which may use its stdin) and output detailed
# logs about the execution.
#
# Leave un $run_prefix.{cmd, out, sta, err, val} the command, standard
# output, exit status, standard error, and instrumentation output.
run_counter=0
run_prefix=
run ()
{
  local title="$][1"
  run_prefix=$run_counter-$(echo $][1 |
			     sed -e 's/[^a-zA-Z0-9][^a-zA-Z0-9]*/-/g;s/-$//')
  run_counter=$(($run_counter + 1))
  shift

  ${abs_top_srcdir}/build-aux/bin/print-env -I >$run_prefix.env
  quote_for_eval "$][@"
  echo "$quote_for_eval_result"> $run_prefix.cmd

  # Beware of set -e.
  local sta
  if eval "$quote_for_eval_result" >$run_prefix.out 2>$run_prefix.err; then
    sta=0
  else
    sta=$?
    title="$title FAIL ($sta)"
  fi
  echo $sta >$run_prefix.sta

  rst_subsection "$me: $title"
  rst_run_report "$title" "$run_prefix"

  return $sta
}


# xrun TITLE COMMAND...
# ---------------------
# Same as run, but die on errors.
xrun ()
{
  run "$][@" ||
    fatal "$][2 failed"
}


## ------------------------------------------------- ##
## PID sets -- Lower layer for children management.  ##
## ------------------------------------------------- ##


# pids_alive PIDS
# ---------------
# Return whether some of the PIDs point to alive processes,
# i.e., return 1 iff there are no children alive.
pids_alive ()
{
  local pid
  for pid
  do
    # Using "ps PID" to test whether a processus is alive is,
    # unfortunately, non portable.  OS X Tiger always return 0, and
    # outputs the ps-banner and the line of the processus (if there is
    # none, it outputs just the banner).  On Cygwin, "ps PID" outputs
    # everything, and "ps -p PID" outputs the banner, and the process
    # line if alive.  In both cases it exits with success.
    #
    # We once used grep to check the result:
    #
    # ps -p $pid | grep ["^[	]*$pid[^0-9]"]
    #
    # Unfortunately sometimes there are flags displayed before the
    # process number.  Since we never saw a "ps -p PID" that does not
    # display the title line, we expect two lines.
    case $(ps -p $pid | wc -l | sed -e 's/^[	 ]*//') in
      (1) # process is dead.
	 ;;
      (2) # Process is live.
	 return 0;;
      (*) error SOFTWARE "unexpected ps output:" "$(ps -p $pid)" ;;
    esac
  done
  return 1
}


# pids_kill PIDS
# --------------
# Send signal -ALRM to all the alive PIDS.  This function can be
# called twice: once before cleaning the components, and once when
# exiting, so it's robust to children no longer in the process table.
pids_kill ()
{
  pids_signal -ALRM "$][@"
}


# timeout_factor FACTOR...
# ------------------------
# Change the current timeout factor.
: ${timeout_factor=${TIMEOUT_FACTOR-1}}
timeout_factor ()
{
  local i
  for i
  do
    timeout_factor=$(($timeout_factor * $i))
  done
}


# pids_name PIDS...
# -----------------
# Return the name of the specified children.
pids_name ()
{
  local pid
  for pid
  do
    cat $pid.name
  done
}


# pids_signal SIGNAL PIDS
# -----------------------
# Send SIGNAL to all the alive PIDS.  This function can be called
# twice: once before cleaning the components, and once when exiting,
# so it's robust to children no longer in the process table.
pids_signal ()
{
  local signal="$][1"
  shift
  local pid
  for pid
  do
    if pids_alive $pid; then
      echo "Sending signal $signal to $(pids_name $pid) (kill $signal $pid)"
      kill $signal $pid 2>&1 || true
    fi
  done
}


# pids_wait TIMEOUT PIDS
# ----------------------
pids_wait ()
{
  local timeout="$][1"
  shift

  : ${timeout_factor:=1}
  timeout=$(($timeout * $timeout_factor))
  local count_down="$timeout"

  # True iff we did not time out.
  pids_wait_result=true

  while pids_alive "$][@"; do
    if test $count_down -le 0; then
      echo "Timeout (${timeout}s * $timeout_factor) expired"
      pids_kill "$][@"
      pids_wait_result=false
      break
    fi
    sleep 1
    count_down=$(($count_down - 1))
  done
}




## ---------- ##
## Children.  ##
## ---------- ##


# rst_run_report $TITLE $FILE-PREFIX
# ----------------------------------
# Report the input and output for $FILE-PREFIX.
rst_run_report ()
{
  local title="$][1"
  case $title in
    (?*) title="$title ";;
  esac

  rst_pre "${title}Command"          $][2.cmd
  rst_pre "${title}Environment"      $][2.env
  rst_pre "${title}Pid"              $][2.pid
  rst_pre "${title}Status"           $][2.sta
  rst_pre "${title}Input"            $][2.in
  rst_pre "${title}Output"           $][2.out
  rst_pre "${title}Error"            $][2.err
  rst_pre "${title}Instrumentation"  $][2.val
}


# children_alive [CHILDREN]
# -------------------------
# Return whether there are still some children running,
# i.e., return 1 iff there are no children alive.
children_alive ()
{
  pids_alive $(children_pid "$][@")
}


# children_check_skip [CHILDREN]
# ------------------------------
# We may be running a Windows application with Wine.  Some "syscalls"
# are not supported, in which case "skip" the test, instead of
# reporting an error.
#
# fixme:winsock:WSAIoctl SIO_GET_EXTENSION_FUNCTION_POINTER {b5367df1-cbac-11cf-95ca-00805f48a192}: stub
# fixme:winsock:WSAIoctl SIO_GET_EXTENSION_FUNCTION_POINTER {b5367df2-cbac-11cf-95ca-00805f48a192}: stub
# fixme:winsock:WSAIoctl SIO_GET_EXTENSION_FUNCTION_POINTER {b5367df0-cbac-11cf-95ca-00805f48a192}: stub
#
# Return true iff we should skip.
children_check_skip ()
{
  children_check_skip_result=false

  test $][# -ne 0 ||
    { set x $children; shift; }

  local i_
  for i_ in $children
  do
    if test -f $i_.err &&
       grep '^fixme:winsock:WSAIoctl.*stub' <$i_.err >/dev/null; then
      stderr "$i_ uses Windows features that Wine does not support." \
             "See $i_.err for more information."
      ex_to_int SKIP >$i_.sta
      children_check_skip_result=true
    fi
  done
}


# children_clean [CHILDREN]
# --------------------------
# Remove the children files.
children_clean ()
{
  test $][# -ne 0 ||
    { set x $children; shift; }

  local i
  for i
  do
    rm -f $i.{cmd,pid,sta,in,out,err,val}
  done
}


# children_harvest [CHILDREN]
# ---------------------------
# Report the exit status of the children.  Can be run several times.
# You might want to call it once in the regular control flow to fetch
# some exit status, but also in a trap, if you were interrupted.  So
# it is meant to be callable multiple times, which might be a danger
# wrt *.sta (cf., children_register).
children_harvest ()
{
  # Harvest exit status.
  test $][# -ne 0 ||
    { set x $children; shift; }

  local i
  for i
  do
    # Don't wait for children we already waited for.
    if ! test -e $i.sta; then
      local pid
      pid=$(children_pid $i)
      # Beware of set -e.
      local sta
      if wait $pid 2>&1; then
	sta=$?
      else
	sta=$?
      fi
      echo "$sta$(ex_to_string $sta)" >$i.sta
    fi
  done
}


# children_kill [CHILDREN]
# ------------------------
# Kill (-ARLM) all the alive CHILDREN.  This function can be called
# twice: once before cleaning the components, and once when exiting,
# so it's robust to children no longer in the process table.
children_kill ()
{
  local pids
  pids=$(children_pid "$][@")
  pids_kill $pids
}


# children_pid [CHILDREN]
# -----------------------
# Return the PIDs of the CHILDREN (whether alive or not).  CHILDREN
# can use globbing (e.g., "foo-*").
children_pid ()
{
  test $][# -ne 0 ||
    { set x $children; shift; }

  # FIXME: we need to find a means to catch failing patterns.
  #
  # test -f $i.pid ||
  #   error SOFTWARE "children_pid: cannot find $i.pid."

  local i
  for i
  do
    # Support globbing, do not quote.
    cat $i.pid
  done
}


# children_register NAME
# ----------------------
# It is very important that we do not leave some random exit status
# from some previous runs.  Standard output etc. are not a problem:
# they *are* created during the run, while *.sta is created *only* if
# it does not already exists (this is because you can call "wait" only
# once per processus, so to enable calling children_harvest multiple
# times, we create *.sta only if it does not exist).
#
# Creates NAME.pid which contains the PID, and PID.name which contains
# the name.
children_register ()
{
  test $][# -eq 1
  rm -f $][1.sta
  children="$children $][1"
  echo $! >$][1.pid
  echo $][1 >$!.name
}


# children_report [CHILDREN]
# --------------------------
# Produce an RST report for the CHILDREN.
children_report ()
{
  test $][# -ne 0 ||
    { set x $children; shift; }

  local i
  for i
  do
    rst_run_report "$i" "$i"
  done
}


# children_signal SIGNAL [CHILDREN]
# ---------------------------------
# Send SIGNAL to all the alive CHILDREN.  This function can be called
# twice: once before cleaning the components, and once when exiting,
# so it's robust to children no longer in the process table.
children_signal ()
{
  local signal="$][1"
  shift
  local pids
  pids=$(children_pid "$][@")
  pids_signal $signal $pids
}


# children_status [CHILDREN]
# --------------------------
# Return the exit status of CHILD.  Must be run after harvesting.
# If several CHILD are given, return the highest exit status.
children_status ()
{
  test $][# -ne 0 ||
    { set x $children; shift; }

  local res="0"
  local i
  for i
  do
    # We need to have waited for these children.
    test -f $i.sta ||
      error SOFTWARE "children_status: cannot find $i.sta." \
		     "Was children_harvest called?"         \
		     "Maybe children_cleanup was already called..."
    local sta
    sta=$(sed -n '1{s/^\([0-9][0-9]*\).*/\1/;p;q;}' <$i.sta)
    if test $res -lt $sta; then
      res=$sta
    fi
  done
  echo $res
}


# children_wait TIMEOUT [CHILDREN]
# --------------------------------
# Wait for the registered children, and passed TIMEOUT, kill the remaining
# ones.
children_wait ()
{
  local timeout="$][1"
  shift
  local pids
  pids=$(children_pid "$][@")
  pids_wait $timeout $pids
  children_wait_result=$pids_wait_result
}

]])


m4_defun([URBI_CHILDREN_PREPARE],
[m4_divert_text([M4SH-INIT], [_URBI_CHILDREN_PREPARE])])
