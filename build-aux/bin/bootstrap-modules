#! /usr/bin/perl

# Bootstrap Urbi module buildsystem.
# Input: module.ac files in subdirectories, optionally module.mk files.
# Output: ./modules.ac to include in your configure.ac
#         ./modules.mk to include in your Makefile.am
# module.ac expected content: Autoconf code that sets urbi_enable_module=false
#   to disable the module. Empty is fine.
# module.mk is autogenerated if not present, using all recursively found source
#   files in the module directory
#

BEGIN
{
  use File::Basename;
  unshift @INC, dirname($0) . '/../perl';
}

use BuildAux::FileUtils;
use BuildAux::Verbose;
use BuildAux::XFile;
use File::Basename; # dirname.
use strict;

# depends dependency...
# ---------------------
# Announce that the stamp file depends on the dependency files.
my @dependency;
sub depends(@)
{
  my (@deps) = @_;
  push @dependency, @deps;
}

## ------ ##
## Main.  ##
## ------ ##

my $prefix = $ARGV[0];

my $modules_ac = new BuildAux::XFile(">modules.ac.tmp");
my $modules_mk = new BuildAux::XFile(">modules.mk.tmp");

print $modules_ac <<EOF;
## Generated by $me.
## Do not edit by hand.

EOF

print $modules_mk <<EOF;
## Generated by $me.
## Do not edit by hand.

\$(srcdir)/modules-bootstrap.stamp: \$(boostrap_modules_deps)
	baux=\$\$(cd \$(top_srcdir)/build-aux && pwd);     \\
	  cd \$(top_srcdir)/$prefix &&                  \\
	  \$\$baux/bin/bootstrap-modules '$prefix'
	echo "\$\$(date): \$?" >>\$@

EXTRA_DIST +=                                   \\
  \$(srcdir)/modules-bootstrap.stamp            \\
  \$(srcdir)/modules.ac                         \\
  \$(srcdir)/modules.mk

\$(srcdir)/modules.ac: \$(srcdir)/modules-bootstrap.stamp
\$(srcdir)/modules.mk: \$(srcdir)/modules-bootstrap.stamp

# Automake uses the name \$(top_srcdir) to qualify configure.ac.  The
# other targets are qualified with \$(srcdir).
\$(top_srcdir)/configure.ac: \$(srcdir)/modules.ac
EOF


# Look for module.ac files.
my @acfile = split ("\n", `find -L . -name module.ac | sed -e 's,^\./,,'`);
verbose 1, "acfiles: ", @acfile;
for my $acfile (@acfile)
{
  my $moduledir = dirname $acfile;
  my $mkfile = "$moduledir/module.mk";
  my $modulename = basename $moduledir;
  (my $modulenormname = $modulename) =~ s/-/_/g;
  (my $modulenormdir = $moduledir) =~ s{[/\-]}{_}g;

  # Check if this is a full or a skeleton module.ac.
  print $modules_mk "EXTRA_DIST += $acfile\n";
  # FIXME: make it more Perl.
  if (`grep URBI_MODULE $acfile` ne '')
  {
    verbose 2, "Appending $acfile";
    print $modules_ac "m4_include([$prefix$acfile])\n";
    depends "\$(srcdir)/$acfile";
  }
  else
  {
    my $acfile_auto = new BuildAux::XFile (">$acfile.auto.tmp");
    verbose 2, "Generating and appending $acfile.auto";
    print $acfile_auto
      ("URBI_MODULE([$modulenormname],\n",
       "[\n",
       `cat $acfile`,
       "])\n");

    print $modules_mk "EXTRA_DIST += $acfile.auto\n";
    depends "\$(srcdir)/$acfile";
    print $modules_ac "m4_include([$prefix$acfile.auto])\n";
    depends "\$(srcdir)/$acfile.auto";
    file_update_file "$acfile.auto";
  }

  # Generate module.mk if it is not there.
  # Dependence on included files is handled by Automake.
  if (-f "$mkfile")
  {
    verbose 2, "Appending $mkfile";
    print $modules_mk "include $mkfile\n";
  }
  else
  {
    verbose 2, "Generating and appending $mkfile.auto";
    my $modulesources = qx(find -L "$moduledir" -name '*.cc' -or -name '*.cpp' -or -name '*.hh' -or -name '*.c' -or -name '*.hxx' | xargs echo);
    chomp $modulesources;

    $_ = <<EOF;
## Generated by $me.
## Do not edit by hand.

if BUILD_$modulenormname
module_LTLIBRARIES += $moduledir/$modulename.la

${modulenormdir}_${modulenormname}_la_SOURCES =            \\
  $modulesources  \\
  \$(${modulenormname}_SOURCES)

${modulenormdir}_${modulenormname}_la_LIBADD = \\
  \$(AM_LIBADD) \\
  \$(${modulenormname}_LIBADD) \\
  \$(URBI_SDK_LIBS)

${modulenormdir}_${modulenormname}_la_LDFLAGS =   \\
  -module                               \\
  -avoid-version			\\
  \$(${modulenormname}_LDFLAGS) \\
  \$(AM_LDFLAGS) \$(URBI_SDK_LDFLAGS)

if WIN32

${modulenormdir}_${modulenormname}_la_LDFLAGS += \\
  -no-undefined

${modulenormdir}_${modulenormname}_la_LIBADD += \\
  \$(LIBUOBJECT_REMOTE_LIBS)

endif WIN32

${modulenormdir}_${modulenormname}_la_CPPFLAGS = \\
  \$(AM_CPPFLAGS)           \\
  \$(${modulenormname}_CPPFLAGS) \\
  \$(URBI_SDK_CPPFLAGS)

endif BUILD_$modulenormname
EOF

    file_update ("$mkfile.auto", "$_");
    print $modules_mk "include $mkfile.auto\n";
  }
}

print $modules_mk
  ("\n",
   "boostrap_modules_deps = \\\n  ",
   join ("\t\\\n  ",
         "\$(top_srcdir)/build-aux/bin/bootstrap-modules",
         sort @dependency),
   "\n");

file_update_file ("modules.ac");
file_update_file ("modules.mk");





## Local Variables:
## perl-indent-level: 2
## perl-continued-statement-offset: 2
## perl-continued-brace-offset: 0
## perl-brace-offset: 0
## perl-brace-imaginary-offset: 0
## perl-label-offset: -2
## cperl-indent-level: 2
## cperl-brace-offset: 0
## cperl-continued-brace-offset: 0
## cperl-label-offset: -2
## cperl-extra-newline-before-brace: t
## cperl-merge-trailing-else: nil
## cperl-continued-statement-offset: 2
## End:
