#! /usr/bin/perl -w
##
## output-to-dot: This file is part of build-aux.
## Copyright (C) 2006-2008, Gostai S.A.S.
##
## This software is provided "as is" without warranty of any kind,
## either expressed or implied, including but not limited to the
## implied warranties of fitness for a particular purpose.
##
## See the LICENSE file for more information.
## For comments, bug reports and feedback: http://www.urbiforge.com
##


# Convert a bison automaton description file into an dot file

use strict;
use IO::File;

my $in = $ARGV[0];
my $out = $in;
$out =~ s/output$/dot/;

my $inf = new IO::File ($in)
   or die "cannot open $in";

my @line = $inf->getlines()
    or die "cannot get lines";

my $outf = new IO::File (">$out")
   or die "cannot open $out";

my @gram_lines = ();
my @links = ();

# get grammar lines
my $in_grammar = 0;
foreach (@line)
{
    chomp;

    if (/^Grammar$/)
    {
	$in_grammar = 1;
	s/Grammar//;
    }

    $in_grammar = 0
	if /^Terminals/;

    next if ($in_grammar == 0);

    # Extract links from a single line
    if (!/^$/)
    {
	s/(\/\* empty \*\/)//g;
	if ("$_")
	{
	    push (@gram_lines, "$_\n");
	}
    }
}

#FIXME: hack to force one more loop turn
push (@gram_lines, "666 fake:\n");

# get non terminal symbols
my %nonterminals = ();
foreach (@gram_lines)
{
    if (s/^\s+(\d+)\s+([\w.]+):/$1 $2:/)
    {
	$nonterminals{$2} = 1;
    }
}

# get links from and to non terminals
my $tmp_line = "";
foreach (@gram_lines)
{
    chomp;
    my $cur_line = $_;
    # concat cases to current line
    if ($cur_line =~ /^\s+\d+\s+\|\s+(.*)/)
    {
	$tmp_line = "$tmp_line $1";
    }

    # next state
    if ($cur_line =~ /^\s*\d+\s+[\w.]+:/)
    {
	# get links
	if ($tmp_line =~ m/^\s*(\d+)\s+([\w.]+):/)
	{
	    my $node = $2;
	    $tmp_line =~ m/^.*:\s+(.*)/;
	    foreach(split(/\s+/, $1))
	    {
		if ($nonterminals{$_})
		{
		    s/\"/\\\"/g;
		    push (@links, "\"$node\" -> \"$_\";\n");
		}
	    }
	}
	# set next line
	$tmp_line = $cur_line;
    }
}

# Filter duplicate links
my %seen = ();
my @uniqu = grep { ! $seen{$_} ++ } @links;


# Output result
print $outf "digraph ugrammar\n{\n";
print $outf @uniqu;
print $outf "}\n";


print STDERR "$out was created\n";
exit(0);

### Setup "GNU" style for perl-mode and cperl-mode.
## Local Variables:
## perl-indent-level: 2
## perl-continued-statement-offset: 2
## perl-continued-brace-offset: 0
## perl-brace-offset: 0
## perl-brace-imaginary-offset: 0
## perl-label-offset: -2
## cperl-indent-level: 2
## cperl-brace-offset: 0
## cperl-continued-brace-offset: 0
## cperl-label-offset: -2
## cperl-extra-newline-before-brace: t
## cperl-merge-trailing-else: nil
## cperl-continued-statement-offset: 2
## End:
