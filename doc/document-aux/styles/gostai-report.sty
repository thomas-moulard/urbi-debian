% This file aims at providing the core features needed to write Gostai
% documents.  Not only reports, but also slides.  Therefore, don't put
% too many things here: beamer must still be able to use these
% features.
%
% Packages used for full reports are required from
% gostai-documentation.sty. Arguably, the names are wrong.  Will be
% fixed in the future.

\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{gostai-report}[2010/04/11 v0.6
                                Urbi SDK Manual]


% Number subsubsections and include them in the TOC
\setcounter{secnumdepth}{3}
\setcounter{tocdepth}{3}

%% ---------- %%
%% Packages.  %%
%% ---------- %%

\RequirePackage[draft,margin]{fixme}
\RequirePackage[utf8]{inputenc}
\RequirePackage{afterpage}
\RequirePackage{array}
\RequirePackage{colortbl}
\RequirePackage{graphicx}
\RequirePackage{hhline}
\RequirePackage{mycxx}
\RequirePackage{rotating}
\RequirePackage{supertabular}
\RequirePackage{texi}
\RequirePackage{xspace}
\RequirePackage{misc}


%% -------- %%
%% tex4ht.  %%
%% -------- %%

%% \setHtmlFileName{NAME}
%% ----------------------
%%
%% Declare that, in the event of a split-documentation (several HTML
%% pages), the file corresponding to the current point in the
%% documentation should be named NAME.html.  See
%% build-aux/bin/tex4ht-post.
\newcommand{\setHtmlFileName}[1]
{%
  \ifx\ifHtml\undefined\else%
    \HCode{<!-- tex4ht:FileName="#1" -->}%
  \fi%
}


%% -------- %%
%% Floats.  %%
%% -------- %%

% Don't insert a float at the top of a page before it's referred to!
\RequirePackage{flafter}

\newcommand   {\floatpos}          {htbp}
\newcommand   {\floatposh}         {!htb}
\newcommand   {\flushfloat}        {\afterpage{\clearpage}}
\setcounter   {topnumber}          {3} % Enable up to n floats at the top of pages
\setcounter   {bottomnumber}       {2} % Enable up to n floats at the bottom of pages
\renewcommand {\floatpagefraction} {0.8}


%% ---------- %%
%% Listings.  %%
%% ---------- %%

\RequirePackage{mylistings}

\definecolor{keyword}{rgb}{0.2,0.2,0.8}
\definecolor{comment}{rgb}{0.8,0.5,0}
\definecolor{string}{rgb}{0.0,0.5,0.0}

\definecolor{pastelgreen}{rgb}{.9, 1, .9}
\definecolor{pastelblue}{rgb}{.9, .9, 1}
\definecolor{pastelred}{rgb}{1, .9, .9}

\definecolor{bg}{rgb}{0.9,0.9,1}    % Same as pastelblue.
\definecolor{assert}{rgb}{1,0.9,.9} % Same as pastelred.

\ifx\ifHtml\undefined
  \newcommand{\keywordstyle}[1]{\color{keyword}\bfseries{}#1}
  \newcommand{\commentstyle}[1]{\color{comment}\bfseries{}#1}
  \newcommand{\stringstyle}[1]{\color{string}\bfseries{}#1}
\else
  \newcommand{\commentstyle}[1]{\commentstylePre%
    #1%
    \commentstylePost}
  \newcommand{\keywordstyle}[1]{\keywordstylePre%
    #1%
    \keywordstylePost}
  \newcommand{\stringstyle}[1]{\stringstylePre%
    #1%
    \stringstylePost}
\fi

% Urbi SDK manual style.
%
% aboveskip=.6cm
%
%   Don't use it.  It looks ok on the PDF output, but it is actually
%   useless: the document is just as nice without.  Yet it results in
%   vertical space being lost in slides.  Of course the slides can set
%   it to 0pt, yet again, I don't think we want it anyway.
%
% columns=fullflexible
%
%   When columns is not set to "fullflexible", listing is inserting
%   spaces between each character to adjust the spacing.  Unfortunately
%   the space are also "visible" in the copied/pasted snippets from the
%   resulting PDF document.  This is a real nuisance.  So prefer
%   "columns=fullflexible", and a fixed-space font.  But then, be sure
%   to keepspaces=true.
\lstdefinestyle{UrbiSDK}
{
  basicstyle=\ttfamily,
  columns=fullflexible, % See comment above.
  keepspaces=true,
  backgroundcolor=\color{bg},
  keywordstyle=\keywordstyle,
  commentstyle=\commentstyle,
  stringstyle=\stringstyle,
  captionpos=b,
  frame=single,
  showstringspaces=false,
  % Always enable the use of \var{} in listings, including C++.
  moredelim=[is][\var]{\\var\{}{\}},
}

% style varInString
%
% We'd like to use \var in strings too.  This requires to make strings
% "transparent" (other style applies inside) and cumulative (cumulate
% the style of strings, and of the inner entities.  As a result,
% keywords appearing in the string will be typeset as keywords.  We
% don't want that, so don't enable by default, do it only where the
% user knows what she's doing.
\lstdefinestyle{varInString}
{
  moredelim={**[s][stringstyle]{"}{"}},
}

\lstset{style=UrbiSDK}

% This is so that \lstinline corresponds to urbiscript code in normal
% size.
\lstset{language=[interactive]urbiscript}

% A very very common need.
\newcommand{\this}{\lstinline|this|\xspace}
\newcommand{\that}{\var{that}\xspace}

% In PDF, use a smaller font for the listing boxes than for the inline
% code snippets.  it looks nicer, and helps to have 80 columns fit.
% In HTML it does not look nice to have a smaller font, and we don't
% have the same constraints on the width.
\ifx\ifHtml\undefined
  \lstdefinestyle{UrbiSDKEnv}
  {
    style=UrbiSDK,
    basicstyle=\ttfamily\footnotesize,
  }
\else
  \lstdefinestyle{UrbiSDKEnv}
  {
    style=UrbiSDK,
  }
\fi

% C++ snippets
\ifx\ifHtml\undefined
  \newcommand\cxxPre{}
  \newcommand\cxxPost{}
\fi
\lstnewenvironment{cxx}[1][]
  {\cxxPre%
    \lstset{language=C++,
      style=UrbiSDKEnv,
      #1}}
  {\cxxPost}

% urbiscript assertions.
\ifx\ifHtml\undefined
  \newcommand\urbiassertPre{}
  \newcommand\urbiassertPost{}
\fi
\lstnewenvironment{urbiassert}[1][]
  {\urbiassertPre%
   \lstset{language=[interactive]urbiscript,
      style=UrbiSDKEnv,
      backgroundcolor=\color{assert},
      floatplacement=\floatposh,
      #1}}
  {\urbiassertPost}

% Same as {urbiscript}, but the content is not checked.  Should be
% avoided.
\ifx\ifHtml\undefined
  \newcommand\urbiuncheckedPre{}
  \newcommand\urbiuncheckedPost{}
\fi
\lstnewenvironment{urbiunchecked}[1][]
  {\urbiuncheckedPre%
   \lstset{language=[interactive]urbiscript,
      style=UrbiSDKEnv,
      floatplacement=\floatposh,
      #1}}
  {\urbiuncheckedPost}

% urbiscript code.  Checked.
\ifx\ifHtml\undefined
  \newcommand\urbiscriptPre{}
  \newcommand\urbiscriptPost{}
\fi
\lstnewenvironment{urbiscript}[1][]
  {\urbiscriptPre%
   \lstset{language=[interactive]urbiscript,
      style=UrbiSDKEnv,
      floatplacement=\floatposh,
      #1}}
  {\urbiscriptPost}


% \urbitrajectory{FILE-BASENAME}
% ------------------------------
\RequirePackage{multicol}
\newcommand{\urbitrajectory}[1]
{
  \begin{multicols}{2}
    \lstinputlisting[language=urbiscript,style=UrbiSDKEnv]{trajectories/#1.utraj}
  \columnbreak
    \resizebox{\linewidth}{!}{\input{trajectories/#1.pdftex_t}}
  \end{multicols}
}

% \begin{shell}
% \end{shell}
% -------------
\ifx\ifHtml\undefined
  \newcommand\shellPre{}
  \newcommand\shellPost{}
\fi
\lstnewenvironment{shell}[1][]
  {\shellPre%
    \lstset{language=bash,
      style=UrbiSDKEnv,
      morestring=[b]{'},
      #1}}
  {\shellPost}


% \lstindex[LST-SET]{THING}
% -------------------------
% Use lstinline to output THING and to put it in the index.
\newcommand{\lstindex}[2][]{\index{#2@\lstinline[#1]{#2}}\lstinline[#1]{#2}}

%% \begin{lstitemize}
%% \item[foo] Description of foo
%% \item \lstinline|bar(\var{arg})|\\
%%     Description of bar.
%% \end{lstitemize}
\newenvironment{lstitemize}[1]
{%
  \begin{itemize}%
    \let\itemOrig\item%
    \renewcommand{\item}[1][]{\itemOrig%
      \ifx##1\empty\else%
        \lstinline[#1]|##1|~\\%
      \fi%
    }%
  }{%
  \end{itemize}%
}

%% \begin{lstitemdexize}
%% \item[foo] Description of foo
%% \item \lstinline|bar(\var{arg})|\\
%%     Description of bar.
%% \end{lstitemdexize}
%%
%% Same as above, but puts in the index.
\newenvironment{lstitemdexize}[1]
{%
  \begin{itemize}%
    \let\itemOrig\item%
    \renewcommand{\item}[1][]{\itemOrig%
      \ifx##1\empty\else%
        \lstindex[#1]{##1}~\\%
      \fi%
    }%
  }{%
  \end{itemize}%
}

%% Do not use lstitemdexize here, since we pass the whole signature in
%% the case of C++.
\newenvironment{cxxapi}[1][]
{%
  \begin{lstitemize}{language=C++,#1}%
  }{%
  \end{lstitemize}%
}

%% \defObject{OBJECT}
%% ------------------
%% Announce that the current section (or subsection etc.) defines the
%% object OBJECT.
%%
%% The \index cannot be put inside the \section, it breaks tex4ht when
%% splitting at that boundary.  So we cannot use \lstindex.
%%
%% We pass [] to lstinline so that it matches exactly the definition
%% in urbiscriptapi.  Otherwise makeindex makes them different
%% entries.
\newcommand{\defObject}[1]
{%
  \labelObject{#1}%
  \def\currentObject{#1}%
  \index{#1@\lstinline[]{#1}}%
}

%% \sectionObject{OBJECT}
%% ----------------------
%% Start a section named OBJECT.  Store OBJECT as the \currentObject.
\let\sectionGostaiOriginal\section
\newcommand{\sectionObject}[1]
{%
  \sectionGostaiOriginal{#1}%
  \defObject{#1}%
}

\let\subsectionGostaiOriginal\subsection
\newcommand{\subsectionObject}[1]
{%
  \subsectionGostaiOriginal{#1}%
  \defObject{#1}%
}


%% \begin{urbiscriptapi}
%% \item[asString] ...
%% \item[receive](<arg1>, <arg2>) ...
%% \end{urbiscriptapi}
%% -------------------
%% We used to pass "language=urbiscript" to lstitemdexize, but as a
%% consequence, sometimes, some items were using
%% "\lstindex[language=urbiscript,]{foo}" at one place, and
%% "\lstindex{foo}" at others, given that language=urbiscript is the
%% default anyway.  makeindex does not know that both are equivalent,
%% so it issue two lines in the index, where we want only one.
%%
%% Therefore, don't specify uselessly the language.
% \item@slot
%
% dispatch to \item@slotSquare if followed by [, or
% to \item@slotPipe if followed by |, or to \itemOrig otherwise.
\def\item@slot{%
  \@ifnextchar[{%]
  \item@slotSquare%
  }{%
    \@ifnextchar|{%}
    \item@slotPipe%
    }{%
      \itemOrig%
    }%
  }%
}%

% \item@slotSquare[SLOT]
% \item@slotSquare[SLOT](<arg1>, <arg2>)
\newcommand{\item@slotSquare}[1][]{
  \@ifnextchar({\item@args{#1}}{\item@args{#1}()}%)
}%
% \item@slotSquare|SLOT|
% \item@slotSquare|SLOT|(<arg1>, <arg2>)
\def\item@slotPipe|#1|{%
  \@ifnextchar({\item@args{#1}}{\item@args{#1}()}%)
}%
\newenvironment{urbiscriptapi}[1][]
{%
  \begin{itemize}%
    \let\itemOrig\item%
    \renewcommand\item\item@slot
    % \item@args{slot}(args)
    \def\item@args##1(##2){%
      \itemOrig%
      \ifx##1\empty\else%
        \hypertarget{%
          slot:\currentObject.##1%
        }{%
          \lstindex[#1]{##1}%
          \ifx##2\empty\else%
            \lstinline[{moredelim=[is][\var]{<}{>}}]{(##2)}%
          \fi%
        }~\\%
      \fi%
    }%
  }{%
  \end{itemize}%
}


%% ---------- %%
%% Hyperref.  %%
%% ---------- %%
\RequirePackage{myhyperref}
\hypersetup{colorlinks, citecolor=blue, linkcolor=blue, urlcolor=blue}


%% Wikipedia.
\newcommand{\wref}[2][\empty]{%
  \ifx#1\empty%
    \href{http://en.wikipedia.org/wiki/#2}{#2}%
  \else%
    \href{http://en.wikipedia.org/wiki/#1}{#2}%
  \fi%
}


%% \labelObject{ ObjectName }
%% --------------------------
%% Define a label for an USL (Urbi Standard Library) class name.
\newcommand{\labelObject}[1]
  {\label{sec:std-#1}}

%% \refObject[Plural]{ ObjectName }
%% --------------------------------
%% Point to the definition of an USL class.
\newcommand{\refObject}[2][]
  {\hyperref[sec:std-#2]{\lstinline|#2|#1 (\autoref*{sec:std-#2})}}


%% \slot[Object]{Slot}
%% -------------------
%% Render a slot name.
\newcommand{\slot}[2][\empty]
  {\ifx#1\empty%
    \lstinline{#2}%
  \else%
    \lstinline{#1.#2}%
  \fi}

%% \refSlot[Object]{Slot}
%% ----------------------
%% Set an hyperlink to Object.Slot, where Object defaults to
%% \currentObject.  Display the link as "Object.Slot" if Object is
%% provided, otherwise simply as "Slot".
\newcommand{\refSlot}[2][\empty]
  {\ifx#1\empty%
    \hyperlink{slot:\currentObject.#2}{\lstinline{#2}}%
  \else%
    \hyperlink{slot:#1.#2}{\slot[#1]{#2}}%
  \fi}

%% \autorefObject{ ObjectName }
%% ----------------------------
%% Same as above, but point to the section without spelling the class
%% name.
\newcommand{\autorefObject}[1]
  {\autoref{sec:std-#1}}

%% FIXME: I don't know how to return to \newline here :(
%% \begin{labeled}{MacroName}
\newenvironment{labeled}[1]%
  {\begin{list}{}{%
        \def\@labeled@temp@a{\let\@labeled@MakeLabel}%
        \expandafter\@labeled@temp@a \csname #1 \endcsname %
        \renewcommand{\makelabel}[1]{\@labeled@MakeLabel{##1}\hfill\break}}}%
  {\end{list}}

%% A list of \env, \file, \option.
%% I don't know how to factor.
\newenvironment{envs}%
  {\begin{list}{}{%
    \renewcommand{\makelabel}[1]%
       {\index{##1@\env{##1}}\env{##1}\hfill\break}}}%
  {\end{list}}

\newenvironment{files}%
  {\begin{list}{}{%
    \renewcommand{\makelabel}[1]%
       {\index{##1@\file{##1}}\file{##1}\hfill\break}}}%
  {\end{list}}

\newenvironment{files*}%
  {\begin{list}{}{%
    \renewcommand{\makelabel}[1]%
       {\file{##1}\hfill\break}}}%
  {\end{list}}


%% \begin{options}[General Options]
%% \item[h]{help} Display a help message and exit.
%% \item{version} Display version info and exit.
%% \item[I]{include=\var{dir}} Add \var{dir} to the search path.
%% \end{options}
%%
%% Beware that changing the definition of \item is not a good idea.
%% We might depart from it some day.  The worst consequence is that
%% inner lists have improper \item definitions.  So be sure to use
%% \begin{sublist}...\end{sublist} inside.
%%
%% \begin{options}
%% \item[n]{mode=\var{mode}} Set the mode.
%%   \begin{sublist}
%%     \begin{description}
%%     \item[paranoid] Be really strict.
%%     \item[rasta] Be really cool.
%%     \end{description}
%%   \end{sublist}
%% \end{options}
\newenvironment{sublist}
{%
  \let\item\itemOrig%
}{%
}

\newenvironment{options}[1][\empty]%
{%
  \ifx#1\empty\else%
    \paragraph{#1}%
  \fi%
  \begin{description}%
    \newcommand{\optionsItem}[2][\empty]{%
      \ifx##1\empty%
      \itemOrig[\index{##2@\option{--##2}}\option{--##2}]%
      \else%
      \itemOrig[\index{##1@\option{-##1}}\index{##2@\option{--##2}}%
          \option{-##1}, \option{--##2}]%
      \fi%
      ~\\
    }%
    \let\itemOrig\item%
    \let\item\optionsItem%
  }{%
  \end{description}%
}

%% \begin{refObjects}
%% \item[Object]
%% \end{refObjects}
\newenvironment{refObjects}
{%
  \begin{itemize}%
    \let\itemOrig\item%
    \renewcommand{\item}[1][]{\itemOrig \refObject{##1}}%
  }{%
  \end{itemize}%
}

\endinput

%%% Local Variables:
%%% mode: latex
%%% coding: utf-8
%%% TeX-master: t
%%% ispell-dictionary: "american"
%%% End:
