syncline << "doc/tutorial/first-steps.tex:30";
[01234567:syncline] "doc/tutorial/first-steps.tex:30"
//#line 30 "doc/tutorial/first-steps.tex"
1; // This is a C++ style comment.
[00000000] 1
2 + /* This is a C-style comment. */ 2;
[00000000] 4
/* Contrary to C/C++, this type of comment /* does nest */. */
3;
[00000000] 3

syncline << "doc/tutorial/first-steps.tex:57";
[01234567:syncline] "doc/tutorial/first-steps.tex:57"
//#line 57 "doc/tutorial/first-steps.tex"
42; // Integer literal.
[00000000] 42
3.14; // Floating point number literal.
[00000000] 3.14
"string"; // Character string literal.
[00000000] "string"
[1, 2, "a", "b"]; // List literal.
[00000000] [1, 2, "a", "b"]
["a" => 1, "b" => 2]; // Dictionary literal.
[00000000] ["a" => 1, "b" => 2]
nil;
void;

syncline << "doc/tutorial/first-steps.tex:83";
[01234567:syncline] "doc/tutorial/first-steps.tex:83"
//#line 83 "doc/tutorial/first-steps.tex"
cos(0); // Compute cosine
[00000000] 1
max(1, 3); // Get the maximum of the arguments.
[00000000] 3
max(1, 3, 4, 2);
[00000000] 4

syncline << "doc/tutorial/first-steps.tex:97";
[01234567:syncline] "doc/tutorial/first-steps.tex:97"
//#line 97 "doc/tutorial/first-steps.tex"
echo("Hello world!");
[00000000] *** Hello world!

syncline << "doc/tutorial/first-steps.tex:111";
[01234567:syncline] "doc/tutorial/first-steps.tex:111"
//#line 111 "doc/tutorial/first-steps.tex"
var x = 42;
[00000000] 42
echo(x);
[00000000] *** 42
x = 51;
[00000000] 51
x;
[00000000] 51

syncline << "doc/tutorial/first-steps.tex:130";
[01234567:syncline] "doc/tutorial/first-steps.tex:130"
//#line 130 "doc/tutorial/first-steps.tex"
var y;
y;
// Remember, the interpreter remains silent
// because void is printed out as nothing.
// You can convince yourself that y is actually
// void with the following methods.
y.asString;
[00000000] "void"
y.isVoid;
[00000000] true

syncline << "doc/tutorial/first-steps.tex:148";
[01234567:syncline] "doc/tutorial/first-steps.tex:148"
//#line 148 "doc/tutorial/first-steps.tex"
{
  var x = "test";
  echo(x);
};
[00000000] *** test
// x is no longer defined here

syncline << "doc/tutorial/first-steps.tex:167";
[01234567:syncline] "doc/tutorial/first-steps.tex:167"
//#line 167 "doc/tutorial/first-steps.tex"
0.cos();
[00000000] 1
"a-b-c".split("-");
[00000000] ["a", "b", "c"]
// Empty parentheses are optional
"foo".length();
[00000000] 3
"foo".length;
[00000000] 3
// Method call can be chained
"".length.cos;
[00000000] 1

syncline << "doc/tutorial/first-steps.tex:193";
[01234567:syncline] "doc/tutorial/first-steps.tex:193"
//#line 193 "doc/tutorial/first-steps.tex"
// Define myFunction
function myFunction()
{
  echo("Hello world");
  echo("from my function!");
};
[00000000] function () {
[:]  echo("Hello world");
[:]  echo("from my function!");
[:]}

// Invoke it
myFunction();
[00000000] *** Hello world
[00000000] *** from my function!

syncline << "doc/tutorial/first-steps.tex:221";
[01234567:syncline] "doc/tutorial/first-steps.tex:221"
//#line 221 "doc/tutorial/first-steps.tex"
// Work in a scope.
{
  // Define f
  function f()
  {
    echo("f")
  };
  // This does not invoke f, it returns its value.
  f;
};
[00000000] function () {
[:]  echo("f")
[:]}
{
  // Define f
  function f()
  {
    echo("Hello World");
  };
  // This actually calls f
  f();
};
[00000000] *** Hello World

syncline << "doc/tutorial/first-steps.tex:261";
[01234567:syncline] "doc/tutorial/first-steps.tex:261"
//#line 261 "doc/tutorial/first-steps.tex"
function sum(a, b, c)
{
  return a + b + c;
} | {};
sum(20, 2, 20);
[00000000] 42

syncline << "doc/tutorial/first-steps.tex:274";
[01234567:syncline] "doc/tutorial/first-steps.tex:274"
//#line 274 "doc/tutorial/first-steps.tex"
function succ(i) { i + 1 } | {};
succ(50);
[00000000] 51
