syncline << "doc/specs/call-message.tex:21";
[01234567:syncline] "doc/specs/call-message.tex:21"
//#line 21 "doc/specs/call-message.tex"
function callTwice
{
  var n = call.evalArgAt(0);
  call.evalArgAt(n);
  call.evalArgAt(n)
} |;

// Call twice echo("foo").
callTwice(1, echo("foo"), echo("bar"));
[00000001] *** foo
[00000002] *** foo

// Call twice echo("bar").
callTwice(2, echo("foo"), echo("bar"));
[00000003] *** bar
[00000004] *** bar

syncline << "doc/specs/call-message.tex:45";
[01234567:syncline] "doc/specs/call-message.tex:45"
//#line 45 "doc/specs/call-message.tex"
function strict(x)
{
  echo("Entering");
  echo("Strict: " + x);
  echo("Lazy:   " + call.evalArgAt(0));
} |;

strict({echo("1"); 1});
[00000011] *** 1
[00000013] *** Entering
[00000012] *** Strict: 1
[00000013] *** 1
[00000014] *** Lazy:   1

syncline << "doc/specs/call-message.tex:67";
[01234567:syncline] "doc/specs/call-message.tex:67"
//#line 67 "doc/specs/call-message.tex"
function args { call.args }|
assert
{
  args == [];
  args() == [];
  args({echo(111); 1}) == [Lazy.new(closure() {echo(111); 1})];
  args(1, 2) == [Lazy.new(closure () {1}),
                 Lazy.new(closure () {2})];
};

syncline << "doc/specs/call-message.tex:82";
[01234567:syncline] "doc/specs/call-message.tex:82"
//#line 82 "doc/specs/call-message.tex"
function argsCount { call.argsCount }|;
assert
{
  argsCount == 0;
  argsCount() == 0;
  argsCount({echo(1); 1}) == 1;
  argsCount({echo(1); 1}, {echo(2); 2}) == 2;
};

syncline << "doc/specs/call-message.tex:95";
[01234567:syncline] "doc/specs/call-message.tex:95"
//#line 95 "doc/specs/call-message.tex"
function code { call.getSlot("code") }|
assert (code == getSlot("code"));

syncline << "doc/specs/call-message.tex:101";
[01234567:syncline] "doc/specs/call-message.tex:101"
//#line 101 "doc/specs/call-message.tex"
var c1 = do (CallMessage.new)
{
  var this.target = 1;
  var this.message = "+";
  var this.args = [Lazy.new(function () {2})];
}|
assert { c1.eval == 3 };

// A lazy function that returns the sum of this and the second argument,
// regardless of the first argument.
function Float.addSecond
{
  this + call.evalArgAt(1);
}|
var c2 = do (CallMessage.new)
{
  var this.target = 2;
  var this.message = "addSecond";
  var this.args = [Lazy.new(function (){ assert (false) }),
                   Lazy.new(function (){ echo (5); 5 })];
}|
assert { c2.eval == 7 };
[00000454] *** 5

syncline << "doc/specs/call-message.tex:132";
[01234567:syncline] "doc/specs/call-message.tex:132"
//#line 132 "doc/specs/call-message.tex"
function sumTwice
{
  var n = call.evalArgAt(0);
  call.evalArgAt(n) + call.evalArgAt(n)
}|;

function one () { echo("one"); 1 }|;

sumTwice(1, one, one + one);
[00000008] *** one
[00000009] *** one
[00000010] 2
sumTwice(2, one, one + one);
[00000011] *** one
[00000012] *** one
[00000011] *** one
[00000012] *** one
[00000013] 4

sumTwice(3, one, one);
[00000014:error] !!! evalArgAt: invalid index: 3
[00000014:error] !!!    called from: sumTwice
sumTwice(3.14, one, one);
[00000015:error] !!! evalArgAt: invalid index: 3.14
[00000015:error] !!!    called from: sumTwice

syncline << "doc/specs/call-message.tex:162";
[01234567:syncline] "doc/specs/call-message.tex:162"
//#line 162 "doc/specs/call-message.tex"
function twice
{
  call.evalArgs + call.evalArgs
}|;
twice({echo(1); 1}, {echo(2); 2});
[00000011] *** 1
[00000012] *** 2
[00000011] *** 1
[00000012] *** 2
[00000013] [1, 2, 1, 2]

syncline << "doc/specs/call-message.tex:177";
[01234567:syncline] "doc/specs/call-message.tex:177"
//#line 177 "doc/specs/call-message.tex"
function myself { call.message }|
assert(myself == "myself");

syncline << "doc/specs/call-message.tex:185";
[01234567:syncline] "doc/specs/call-message.tex:185"
//#line 185 "doc/specs/call-message.tex"
function Global.getSender { call.sender } |
function Global.callGetSender { getSender } |

assert
{
  // Call from the current Lobby, with the Lobby as target.
  getSender === lobby;
  // Call from the current Lobby, with Global as the target.
  Global.getSender === lobby;
  // Ask Lobby to call getSender.
  callGetSender === lobby;
  // Ask Global to call getSender.
  Global.callGetSender === Global;
};

syncline << "doc/specs/call-message.tex:206";
[01234567:syncline] "doc/specs/call-message.tex:206"
//#line 206 "doc/specs/call-message.tex"
function Global.getTarget { call.target } |
function Global.callGetTarget { getTarget } |

assert
{
  // Call from the current Lobby, with the Lobby as target.
  getTarget === lobby;
  // Call from the current Lobby, with Global as the target.
  Global.getTarget === Global;
  // Ask Lobby to call getTarget.
  callGetTarget === lobby;
  // Ask Global to call getTarget.
  Global.callGetTarget === Global;
};
