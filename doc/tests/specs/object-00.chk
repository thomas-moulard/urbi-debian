syncline << "doc/specs/object.tex:27";
[01234567:syncline] "doc/specs/object.tex:27"
//#line 27 "doc/specs/object.tex"
Object.new;
[00000421] Object_0x00000000

syncline << "doc/specs/object.tex:37";
[01234567:syncline] "doc/specs/object.tex:37"
//#line 37 "doc/specs/object.tex"
{
  class Foo
  {
    var attr = 23;
  };
  assert
  {
    Foo.localSlotNames == ["asFoo", "attr", "type"];
    Foo.asFoo === Foo;
    Foo.attr == 23;
    Foo.type == "Foo";
  };
};

syncline << "doc/specs/object.tex:59";
[01234567:syncline] "doc/specs/object.tex:59"
//#line 59 "doc/specs/object.tex"
{
  var o = Object.new;
  assert(o.acceptVoid === o);
};

syncline << "doc/specs/object.tex:70";
[01234567:syncline] "doc/specs/object.tex:70"
//#line 70 "doc/specs/object.tex"
do (Object.new)
{
  assert
  {
    addProto(Orderable) === this;
    protos == [Orderable, Object];
  };
}|;

syncline << "doc/specs/object.tex:85";
[01234567:syncline] "doc/specs/object.tex:85"
//#line 85 "doc/specs/object.tex"
assert {
123.allProtos.size == 12;
};

syncline << "doc/specs/object.tex:91";
[01234567:syncline] "doc/specs/object.tex:91"
//#line 91 "doc/specs/object.tex"
assert {
Object.allSlotNames == Object.slotNames;
};

syncline << "doc/specs/object.tex:99";
[01234567:syncline] "doc/specs/object.tex:99"
//#line 99 "doc/specs/object.tex"
assert {
Object.apply([this]) === Object;
Object.apply([1])    === Object;
};

syncline << "doc/specs/object.tex:108";
[01234567:syncline] "doc/specs/object.tex:108"
//#line 108 "doc/specs/object.tex"
assert {
     12.as(Float) == 12;
   "12".as(Float) == 12;
    12.as(String) == "12";
Object.as(Object) === Object;
};

syncline << "doc/specs/object.tex:117";
[01234567:syncline] "doc/specs/object.tex:117"
//#line 117 "doc/specs/object.tex"
assert
{
  Global.asBool == true;
  nil.asBool ==    false;
};
void.asBool;
[00000421:error] !!! unexpected void

syncline << "doc/specs/object.tex:132";
[01234567:syncline] "doc/specs/object.tex:132"
//#line 132 "doc/specs/object.tex"
assert {
{ var myCos = Object.bounce("cos"); myCos(0) }    == 0.cos;
{ var myType = bounce("type"); myType(Object); } == "Object";
{ var myType = bounce("type"); myType(3.14); }   == "Float";
};

syncline << "doc/specs/object.tex:159";
[01234567:syncline] "doc/specs/object.tex:159"
//#line 159 "doc/specs/object.tex"
assert {
Object.clone.protos == [Object];
Object.clone.localSlotNames == [];
};

syncline << "doc/specs/object.tex:168";
[01234567:syncline] "doc/specs/object.tex:168"
//#line 168 "doc/specs/object.tex"
var foo = Object.new |;
cloneSlot("foo", "bar") |;
assert(!(foo === bar));

syncline << "doc/specs/object.tex:177";
[01234567:syncline] "doc/specs/object.tex:177"
//#line 177 "doc/specs/object.tex"
var moo = Object.new |;
cloneSlot("moo", "loo") |;
assert(!(moo === loo));

syncline << "doc/specs/object.tex:187";
[01234567:syncline] "doc/specs/object.tex:187"
//#line 187 "doc/specs/object.tex"
do (Object.new)
{
  assert(!hasLocalSlot("foo"));
  assert(createSlot("foo").isVoid);
  assert(hasLocalSlot("foo"));
}|;

syncline << "doc/specs/object.tex:202";
[01234567:syncline] "doc/specs/object.tex:202"
//#line 202 "doc/specs/object.tex"
do (2) { var this.attr = "foo"; this.attr->prop = "bar" }.dump(0);
[00015137] *** Float_0x240550 {
[00015137] ***   /* Special slots */
[00015137] ***   protos = Float
[00015137] ***   value = 2
[00015137] ***   /* Slots */
[00015137] ***   attr = String_0x23a750 <...>
[00015137] ***     /* Properties */
[00015137] ***     prop = String_0x23a7a0 <...>
[00015137] ***   }
do (2) { var this.attr = "foo"; this.attr->prop = "bar" }.dump(1);
[00020505] *** Float_0x240550 {
[00020505] ***   /* Special slots */
[00020505] ***   protos = Float
[00020505] ***   value = 2
[00020505] ***   /* Slots */
[00020505] ***   attr = String_0x23a750 {
[00020505] ***     /* Special slots */
[00020505] ***     protos = String
[00020505] ***     /* Slots */
[00020505] ***     }
[00020505] ***     /* Properties */
[00020505] ***     prop = String_0x239330 {
[00020505] ***       /* Special slots */
[00020505] ***       protos = String
[00020505] ***       /* Slots */
[00020505] ***       }
[00020505] ***   }

syncline << "doc/specs/object.tex:239";
[01234567:syncline] "doc/specs/object.tex:239"
//#line 239 "doc/specs/object.tex"
const var myPi = 3.14|;
assert
{
  getProperty("myPi", "constant");
  getProperty("myPi", "foobar").isVoid;
};

syncline << "doc/specs/object.tex:251";
[01234567:syncline] "doc/specs/object.tex:251"
//#line 251 "doc/specs/object.tex"
var a = Object.new|;

// Local slot.
var a.slot = 21|;
assert
{
  a.locateSlot("slot") === a;
  a.getLocalSlot("slot") == 21;
};

// Inherited slot are not looked-up.
assert { a.locateSlot("init") == Object };
a.getLocalSlot("init");
[00041066:error] !!! lookup failed: init

syncline << "doc/specs/object.tex:272";
[01234567:syncline] "doc/specs/object.tex:272"
//#line 272 "doc/specs/object.tex"
var b = Object.new|;
var b.slot = 21|;

assert
{
  // Local slot.
  b.locateSlot("slot") === b;
  b.getSlot("slot") == 21;

  // Inherited slot.
  b.locateSlot("init") === Object;
  b.getSlot("init") == Object.getSlot("init");
};

// Unknown slot.
assert { b.locateSlot("ENOENT") == nil; };
b.getSlot("ENOENT");
[00041066:error] !!! lookup failed: ENOENT

syncline << "doc/specs/object.tex:296";
[01234567:syncline] "doc/specs/object.tex:296"
//#line 296 "doc/specs/object.tex"
class Base         { var this.base = 23; } |;
class Derive: Base { var this.derive = 43 } |;
assert(Derive.hasLocalSlot("derive"));
assert(!Derive.hasLocalSlot("base"));

syncline << "doc/specs/object.tex:306";
[01234567:syncline] "doc/specs/object.tex:306"
//#line 306 "doc/specs/object.tex"
const var halfPi = pi / 2|;
assert
{
  hasProperty("halfPi", "constant");
  !hasProperty("halfPi", "foobar");
};

syncline << "doc/specs/object.tex:319";
[01234567:syncline] "doc/specs/object.tex:319"
//#line 319 "doc/specs/object.tex"
assert {
Derive.hasSlot("derive");
Derive.hasSlot("base");
!Base.hasSlot("derive");
};

syncline << "doc/specs/object.tex:331";
[01234567:syncline] "doc/specs/object.tex:331"
//#line 331 "doc/specs/object.tex"
do (2) { var this.attr = "foo"; this.attr->prop = "bar"}.inspect;
[00001227] *** Inspecting 2
[00001227] *** ** Prototypes:
[00001227] ***   0
[00001227] *** ** Local Slots:
[00001228] ***   attr : String
[00001228] ***     Properties:
[00001228] ***      prop : String = "bar"

syncline << "doc/specs/object.tex:345";
[01234567:syncline] "doc/specs/object.tex:345"
//#line 345 "doc/specs/object.tex"
assert {
Float.isA(Orderable);
!(String.isA(Float));
};

syncline << "doc/specs/object.tex:352";
[01234567:syncline] "doc/specs/object.tex:352"
//#line 352 "doc/specs/object.tex"
assert {
nil.isNil;
!(0.isNil);
};

syncline << "doc/specs/object.tex:359";
[01234567:syncline] "doc/specs/object.tex:359"
//#line 359 "doc/specs/object.tex"
assert {
Float.isProto;
!(42.isProto);
};

syncline << "doc/specs/object.tex:367";
[01234567:syncline] "doc/specs/object.tex:367"
//#line 367 "doc/specs/object.tex"
assert {
void.isVoid;
! 42.isVoid;
};

syncline << "doc/specs/object.tex:375";
[01234567:syncline] "doc/specs/object.tex:375"
//#line 375 "doc/specs/object.tex"
var top = Object.new|;
var top.top1 = 1|;
var top.top2 = 2|;
var bot = top.new|;
var bot.bot1 = 10|;
var bot.bot2 = 20|;
assert
{
  top.localSlotNames == ["top1", "top2"];
  bot.localSlotNames == ["bot1", "bot2"];
};

syncline << "doc/specs/object.tex:393";
[01234567:syncline] "doc/specs/object.tex:393"
//#line 393 "doc/specs/object.tex"
assert {
locateSlot("init") == Channel;
locateSlot("doesNotExist").isNil;
};

syncline << "doc/specs/object.tex:400";
[01234567:syncline] "doc/specs/object.tex:400"
//#line 400 "doc/specs/object.tex"
1.print;
[00001228] 1
[1, "12"].print;
[00001228] [1, "12"]

syncline << "doc/specs/object.tex:409";
[01234567:syncline] "doc/specs/object.tex:409"
//#line 409 "doc/specs/object.tex"
assert {
12.protos == [0];
};

syncline << "doc/specs/object.tex:416";
[01234567:syncline] "doc/specs/object.tex:416"
//#line 416 "doc/specs/object.tex"
2.properties("foo");
[00238495:error] !!! lookup failed: foo
do (2) { var foo = "foo" }.properties("foo");
[00238501] ["constant" => false]
do (2) { var foo = "foo" ; foo->bar = "bar" }.properties("foo");
[00238502] ["bar" => "bar", "constant" => false]

syncline << "doc/specs/object.tex:429";
[01234567:syncline] "doc/specs/object.tex:429"
//#line 429 "doc/specs/object.tex"
do (2)
{
  var foo = "foo";
  foo->bar = "bar";
  removeProperty("foo", "bar");
}.properties("foo");
[00238502] ["constant" => false]

2.removeProperty("foo", "bar");
[00000072:error] !!! lookup failed: foo

do (2)
{
  var foo = "foo";
  removeProperty("foo", "bar");
}|;

syncline << "doc/specs/object.tex:452";
[01234567:syncline] "doc/specs/object.tex:452"
//#line 452 "doc/specs/object.tex"
do (Object.new)
{
  assert
  {
    addProto(Orderable);
    removeProto(123) === this;
    protos == [Orderable, Object];
    removeProto(Orderable) === this;
    protos == [Object];
  };
}|;

syncline << "doc/specs/object.tex:470";
[01234567:syncline] "doc/specs/object.tex:470"
//#line 470 "doc/specs/object.tex"
{
  var base = Object.new;
  var base.slot = "base";

  var derive = Base.new;
  var derive.slot = "derive";

  do (derive)
  {
    assert
    {
      removeSlot("no such slot") === this;
      removeSlot("slot") === this;
      localSlotNames == [];
      base.slot == "base";
      removeSlot("slot") === this;
      base.slot == "base";
    };
  }|;
};

syncline << "doc/specs/object.tex:496";
[01234567:syncline] "doc/specs/object.tex:496"
//#line 496 "doc/specs/object.tex"
assert(setConstSlot("fortyTwo", 42) == 42);
fortyTwo = 51;
[00000000:error] !!! cannot modify const slot

syncline << "doc/specs/object.tex:508";
[01234567:syncline] "doc/specs/object.tex:508"
//#line 508 "doc/specs/object.tex"
do (Object.new)
{
  var slot = "slot";
  var value = "value";
  assert
  {
    setProperty("slot", "prop", value) === value;
    "prop" in properties("slot");
    getProperty("slot", "prop") === value;
    slot->prop === value;
    setProperty("slot", "noSuchProperty", value) === value;
  };
}|;
setProperty("noSuchSlot", "prop", "12");
[00000081:error] !!! lookup failed: noSuchSlot

syncline << "doc/specs/object.tex:530";
[01234567:syncline] "doc/specs/object.tex:530"
//#line 530 "doc/specs/object.tex"
do (Object.new)
{
  assert
  {
    protos == [Object];
    setProtos([Orderable, Object]).isVoid;
    protos == [Orderable, Object];
  };
}|;

syncline << "doc/specs/object.tex:546";
[01234567:syncline] "doc/specs/object.tex:546"
//#line 546 "doc/specs/object.tex"
assert {
Object.setSlot("theObject", Object) === Object;
Object.theObject === Object;
theObject === Object;
};

syncline << "doc/specs/object.tex:560";
[01234567:syncline] "doc/specs/object.tex:560"
//#line 560 "doc/specs/object.tex"
assert {
Object.localSlotNames
  .subset(Object.slotNames);
Object.protos.foldl(function (var r, var p) { r + p.localSlotNames },
                    [])
  .subset(Object.slotNames);
};

syncline << "doc/specs/object.tex:573";
[01234567:syncline] "doc/specs/object.tex:573"
//#line 573 "doc/specs/object.tex"
class Example {};
[00000081] Example
assert
{
  Example.type == "Example";
};
Example.new;
[00000081] Example_0x6fb2720

syncline << "doc/specs/object.tex:586";
[01234567:syncline] "doc/specs/object.tex:586"
//#line 586 "doc/specs/object.tex"
{
  var foo = Object.new;
  var bar = Object.new;
  assert
  {
    foo.uid == foo.uid;
    foo.uid != bar.uid;
  };
};

syncline << "doc/specs/object.tex:600";
[01234567:syncline] "doc/specs/object.tex:600"
//#line 600 "doc/specs/object.tex"
{
  var o = Object.new|
  assert(o.unacceptVoid === o);
};

syncline << "doc/specs/object.tex:611";
[01234567:syncline] "doc/specs/object.tex:611"
//#line 611 "doc/specs/object.tex"
assert {
Object.setSlot("one", 1)    == 1;
Object.updateSlot("one", 2) == 2;
Object.one                  == 2;
};

syncline << "doc/specs/object.tex:621";
[01234567:syncline] "doc/specs/object.tex:621"
//#line 621 "doc/specs/object.tex"
assert {
(0 && "foo") == 0;
(2 && "foo") == "foo";

(""    && "foo") == "";
("foo" && "bar") == "bar";
};

syncline << "doc/specs/object.tex:633";
[01234567:syncline] "doc/specs/object.tex:633"
//#line 633 "doc/specs/object.tex"
assert {
(0 || "foo") == "foo";
(2 ||  1/0)  == 2;

(""    || "foo") == "foo";
("foo" || 1/0)   == "foo";
};

syncline << "doc/specs/object.tex:644";
[01234567:syncline] "doc/specs/object.tex:644"
//#line 644 "doc/specs/object.tex"
assert {
!1 == false;
!0 == true;

!"foo" == false;
!""    == true;
};
