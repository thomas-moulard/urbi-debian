syncline << "doc/specs/lang.tex:36";
[01234567:syncline] "doc/specs/lang.tex:36"
//#line 36 "doc/specs/lang.tex"
#Été;
[00048238:error] !!! syntax error: invalid character: `#'
[00048239:error] !!! syntax error: invalid character: `\xc3'
[00048239:error] !!! syntax error: invalid character: `\x89'
[00048239:error] !!! syntax error: invalid character: `\xc3'
[00048239:error] !!! syntax error: invalid character: `\xa9'

syncline << "doc/specs/lang.tex:58";
[01234567:syncline] "doc/specs/lang.tex:58"
//#line 58 "doc/specs/lang.tex"
1; // This is a one line comment.
[00000001] 1

2; /* an inner comment */ 3;
[00000002] 2
[00000003] 3

4; /* nested /* comments */ 5; */ 6;
[00000004] 4
[00000005] 6

7
  /*
    /*
       Multi-line.
    */
  */
;
[00000006] 7

syncline << "doc/specs/lang.tex:129";
[01234567:syncline] "doc/specs/lang.tex:129"
//#line 129 "doc/specs/lang.tex"
var x;
var foobar51;
var this.a_name_with_underscores;
// Invalid.
// var 3x;
// obj.3x();

// Invalid because "if" is a keyword.
// var if;
// obj.if();
// However, keywords can be escaped with simple quotes.
var 'if';
var this.'else';

// Identifiers can be escaped with simple quotes
var '%x';
var '1 2 3';
var this.'[]';

syncline << "doc/specs/lang.tex:291";
[01234567:syncline] "doc/specs/lang.tex:291"
//#line 291 "doc/specs/lang.tex"
assert {
pi == 180deg;
pi == 200grad;
};

syncline << "doc/specs/lang.tex:308";
[01234567:syncline] "doc/specs/lang.tex:308"
//#line 308 "doc/specs/lang.tex"
[ => ]; // The empty dictionary
[00000000] [ => ]
["a" => 1, "b" => 2, "c" => 3];
[00000000] ["a" => 1, "b" => 2, "c" => 3]

syncline << "doc/specs/lang.tex:341";
[01234567:syncline] "doc/specs/lang.tex:341"
//#line 341 "doc/specs/lang.tex"
assert {
1d   == 24h;
0.5d == 12h;
1h   == 60min;
1min == 60s;
1s   == 1000ms;


1s == 1;
1s 2s 3s == 6;
1s 1ms == 1.001;
1ms 1s == 1.001;
};

syncline << "doc/specs/lang.tex:365";
[01234567:syncline] "doc/specs/lang.tex:365"
//#line 365 "doc/specs/lang.tex"
assert {
            1 == 1;
            1 == 1.0;
          1.2 == 1.2000;
      1.234e6 == 1234000;
        1e+11 == 1E+11;
         1e10 == 10000000000;
         1e30 == 1e10 * 1e10 * 1e10;
};

syncline << "doc/specs/lang.tex:396";
[01234567:syncline] "doc/specs/lang.tex:396"
//#line 396 "doc/specs/lang.tex"
0.000001;
[00000011] 1e-06

0.0000001;
[00000012] 1e-07

0.00000000001;
[00000013] 1e-11

1e+3;
[00000014] 1000

1E-5;
[00000014] 1e-05

syncline << "doc/specs/lang.tex:418";
[01234567:syncline] "doc/specs/lang.tex:418"
//#line 418 "doc/specs/lang.tex"
1.;
[00004701:error] !!! syntax error: unexpected ;

syncline << "doc/specs/lang.tex:426";
[01234567:syncline] "doc/specs/lang.tex:426"
//#line 426 "doc/specs/lang.tex"
assert {
      0x2a == 42;
      0x2A == 42;
  0xabcdef == 11259375;
  0xABCDEF == 11259375;
0xFFFFFFFF == 4294967295;
};

syncline << "doc/specs/lang.tex:436";
[01234567:syncline] "doc/specs/lang.tex:436"
//#line 436 "doc/specs/lang.tex"
123foo;
[00005658:error] !!! syntax error: invalid token: `123foo'
12.3foo;
[00018827:error] !!! syntax error: invalid token: `12.3foo'
0xabcdef;
[00060432] 11259375
0xabcdefg;
[00061848:error] !!! syntax error: invalid token: `0xabcdefg'

syncline << "doc/specs/lang.tex:455";
[01234567:syncline] "doc/specs/lang.tex:455"
//#line 455 "doc/specs/lang.tex"
[]; // The empty list
[00000000] []
[1, 2, 3];
[00000000] [1, 2, 3]

syncline << "doc/specs/lang.tex:507";
[01234567:syncline] "doc/specs/lang.tex:507"
//#line 507 "doc/specs/lang.tex"
assert {
// Special characters.
"\"" == "\"";
"\\" == "\\";

// ASCII characters.
"\a" == "\007"; "\a" == "\x07";
"\b" == "\010"; "\b" == "\x08";
"\f" == "\014"; "\f" == "\x0c";
"\n" == "\012"; "\n" == "\x0a";
"\r" == "\015"; "\r" == "\x0d";
"\t" == "\011"; "\t" == "\x09";
"\v" == "\013"; "\v" == "\x0b";

// Octal escapes.
"\0" == "\00"; "\0" == "\000";
"\0000" == "\0""0";
"\062\063" == "23";

// Hexadecimal escapes.
"\x00" == "\0";
"\x32\x33" == "23";

// Binary blob escape.
"\B(3)("\")" == "\"\\\"";
};

syncline << "doc/specs/lang.tex:538";
[01234567:syncline] "doc/specs/lang.tex:538"
//#line 538 "doc/specs/lang.tex"
assert {
"foo" "bar" "baz" == "foobarbaz";
};

syncline << "doc/specs/lang.tex:547";
[01234567:syncline] "doc/specs/lang.tex:547"
//#line 547 "doc/specs/lang.tex"
"";
[00000000] ""
"foo";
[00000000] "foo"
"a\nb"; // urbiscript escapes string when dumping them
[00000000] "a\nb"
echo("a\nb"); // We can see there is an actual line feed
[00000000] *** a
[:]b
echo("a\\nb");
[00000000] *** a\nb

syncline << "doc/specs/lang.tex:573";
[01234567:syncline] "doc/specs/lang.tex:573"
//#line 573 "doc/specs/lang.tex"
();
[00000000] ()
(1,);
[00000000] (1,)
(1, 2);
[00000000] (1, 2)
(1, 2, 3, 4,);
[00000000] (1, 2, 3, 4)

syncline << "doc/specs/lang.tex:606";
[01234567:syncline] "doc/specs/lang.tex:606"
//#line 606 "doc/specs/lang.tex"
1; 2; 3;
[00000000] 1
[00000000] 2
[00000000] 3

syncline << "doc/specs/lang.tex:623";
[01234567:syncline] "doc/specs/lang.tex:623"
//#line 623 "doc/specs/lang.tex"
{
  for (3)
  {
    sleep(1s);
    echo("ping");
  },
  sleep(0.5s);
  for (3)
  {
    sleep(1s);
    echo("pong");
  },
};
[00000316] *** ping
[00000316] *** pong
[00000316] *** ping
[00000316] *** pong
[00000316] *** ping
[00000316] *** pong

syncline << "doc/specs/lang.tex:650";
[01234567:syncline] "doc/specs/lang.tex:650"
//#line 650 "doc/specs/lang.tex"
{
  sleep(100ms) | echo("1"),
  sleep(400ms) | echo("2"),
  echo("done");
};
[00000316] *** done
[00000316] *** 1
[00000316] *** 2

syncline << "doc/specs/lang.tex:661";
[01234567:syncline] "doc/specs/lang.tex:661"
//#line 661 "doc/specs/lang.tex"
{
  sleep(100ms) | echo("1"),
  sleep(400ms) | echo("2"),
};
echo("done");
[00000316] *** 1
[00000316] *** 2
[00000316] *** done

syncline << "doc/specs/lang.tex:679";
[01234567:syncline] "doc/specs/lang.tex:679"
//#line 679 "doc/specs/lang.tex"
{
  { echo("11") ; sleep(100ms) ; echo("12") },
  { echo("21") ; sleep(400ms) ; echo("22") },
};
[00000316] *** 11
[00000316] *** 21
[00000316] *** 12
[00000316] *** 22

syncline << "doc/specs/lang.tex:691";
[01234567:syncline] "doc/specs/lang.tex:691"
//#line 691 "doc/specs/lang.tex"
{
  { echo("11") | echo("12") },
  { echo("21") | echo("22") },
};
[00000316] *** 11
[00000316] *** 12
[00000316] *** 21
[00000316] *** 22

syncline << "doc/specs/lang.tex:864";
[01234567:syncline] "doc/specs/lang.tex:864"
//#line 864 "doc/specs/lang.tex"
assert {
       1 + 1 ==    2;
       1 - 2 ==   -1;
       2 * 3 ==    6;
      10 / 2 ==    5;
     2 ** 10 == 1024;
    -(1 + 2) ==   -3;
   1 + 2 * 3 ==    7;
 (1 + 2) * 3 ==    9;
     -2 ** 2 ==   -4;
   - - - - 1 ==    1;
};

syncline << "doc/specs/lang.tex:897";
[01234567:syncline] "doc/specs/lang.tex:897"
//#line 897 "doc/specs/lang.tex"
var y = 0;
[00000000] 0
y = 10;
[00000000] 10
y += 10;
[00000000] 20
y /= 5;
[00000000] 4

syncline << "doc/specs/lang.tex:919";
[01234567:syncline] "doc/specs/lang.tex:919"
//#line 919 "doc/specs/lang.tex"
var value = 0|;
var valueAlias = value|;
value += 10;
[00002275] 10
valueAlias;
[00002301] 0

syncline << "doc/specs/lang.tex:952";
[01234567:syncline] "doc/specs/lang.tex:952"
//#line 952 "doc/specs/lang.tex"
var myList = []|;
var myList.specialFeature = 42|;
myList += [1, 2, 3];
[00848865] [1, 2, 3]
myList.specialFeature;
[00848869] 42
var myOtherList = myList + [4, 5];
[00848873] [1, 2, 3, 4, 5]
myOtherList.specialFeature;
[00848926:error] !!! lookup failed: specialFeature

syncline << "doc/specs/lang.tex:969";
[01234567:syncline] "doc/specs/lang.tex:969"
//#line 969 "doc/specs/lang.tex"
var something = []|;
var somethingElse = something|;
something += [1, 2];
[00008557] [1, 2]
somethingElse += [3, 4];
[00008562] [1, 2, 3, 4]
something;
[00008566] [1, 2, 3, 4]

syncline << "doc/specs/lang.tex:990";
[01234567:syncline] "doc/specs/lang.tex:990"
//#line 990 "doc/specs/lang.tex"
class Counter
{
  var count = 0;
  function init (n)   { var this.count = n };
  // Display the value, and the identity.
  function asString() { "%s @ %s" % [count, uid ] };
  function '+'(var n) { new(count + n) };
  function '-'(var n) { new(count - n) };
}|;

syncline << "doc/specs/lang.tex:1003";
[01234567:syncline] "doc/specs/lang.tex:1003"
//#line 1003 "doc/specs/lang.tex"
class ImmutableCounter : Counter
{
  function '+='(var n) { this + n };
  function '-='(var n) { this - n };
}|;

var ic1 = ImmutableCounter.new(0);
[00010566] 0 @ 0x100354b70
var ic2 = ic1;
[00010574] 0 @ 0x100354b70

ic1 += 1;
[00010588] 1 @ 0x10875bee0

// ic1 points to a new object.
ic1;
[00010592] 1 @ 0x10875bee0
// ic2 still points to its original value.
ic2;
[00010594] 0 @ 0x100354b70

syncline << "doc/specs/lang.tex:1026";
[01234567:syncline] "doc/specs/lang.tex:1026"
//#line 1026 "doc/specs/lang.tex"
class MutableCounter : Counter
{
  function '+='(var n) { count += n | this };
  function '-='(var n) { count -= n | this };
}|;

var mc1 = MutableCounter.new(0);
[00029902] 0 @ 0x100364e00
var mc2 = mc1;
[00029911] 0 @ 0x100364e00

mc1 += 1;
[00029925] 1 @ 0x100364e00

// mc1 points to the same, updated, object.
mc1;
[00029930] 1 @ 0x100364e00
// mc2 too.
mc2;
[00029936] 1 @ 0x100364e00

syncline << "doc/specs/lang.tex:1066";
[01234567:syncline] "doc/specs/lang.tex:1066"
//#line 1066 "doc/specs/lang.tex"
{
  var count = 0;
  var countAlias = count;
  assert
  {
    count++ == 0;
    count   == 1;
    countAlias == 0;
    count++ == 1;
    count   == 2;
    countAlias == 0;
    count-- == 2;
    count   == 1;
  };
};

syncline << "doc/specs/lang.tex:1113";
[01234567:syncline] "doc/specs/lang.tex:1113"
//#line 1113 "doc/specs/lang.tex"
assert {
4 << 2 == 16;
4 >> 2 ==  1;
};

syncline << "doc/specs/lang.tex:1132";
[01234567:syncline] "doc/specs/lang.tex:1132"
//#line 1132 "doc/specs/lang.tex"
assert {
true && true;
true || false;
!true == false;
true || (1 / 0);
(false && (1 / 0)) == false;
};

syncline << "doc/specs/lang.tex:1158";
[01234567:syncline] "doc/specs/lang.tex:1158"
//#line 1158 "doc/specs/lang.tex"
assert
{
 ! (0 < 0);
    0 <= 0;
    0 == 0;
   0 !== 0;
};
var z = 0;
[00000000] 0
assert
{
     z === z;
  ! (z !== z);
};

syncline << "doc/specs/lang.tex:1193";
[01234567:syncline] "doc/specs/lang.tex:1193"
//#line 1193 "doc/specs/lang.tex"
assert {
1     in [0, 1, 2];
3 not in [0, 1, 2];

"one"   in     ["zero" => 0, "one" => 1, "two" => 2];
"three" not in ["zero" => 0, "one" => 1, "two" => 2];
};

syncline << "doc/specs/lang.tex:1206";
[01234567:syncline] "doc/specs/lang.tex:1206"
//#line 1206 "doc/specs/lang.tex"
// On lists.
var l = [1, 2, 3, 4, 5];
[00000000] [1, 2, 3, 4, 5]
assert
{
  l[0] == 1;
  l[-1] == 5;
  (l[0] = 10) == 10;
  l == [10, 2, 3, 4, 5];
};

// On strings.
var s = "abcdef";
[00000005] "abcdef"
assert
{
  s[0] == "a";
  s[1,3] == "bc";
  (s[1,3] = "foo") == "foo";
  s == "afoodef";
};

syncline << "doc/specs/lang.tex:1318";
[01234567:syncline] "doc/specs/lang.tex:1318"
//#line 1318 "doc/specs/lang.tex"
// Return value is 1.  Displayed.
1;
[00000000] 1
// Return value is that of {}, i.e., void.  Nothing displayed.
1 | {};
// Same as "1 | {}", a valueless expression.
1|;

syncline << "doc/specs/lang.tex:1331";
[01234567:syncline] "doc/specs/lang.tex:1331"
//#line 1331 "doc/specs/lang.tex"
// Scopes evaluate to their last expression
{
  1;
  2;
  3; // This last separator is optional.
};
[00000000] 3
// Scopes can be used as expressions
{1; 2; 3} + 1;
[00000000] 4

syncline << "doc/specs/lang.tex:1356";
[01234567:syncline] "doc/specs/lang.tex:1356"
//#line 1356 "doc/specs/lang.tex"
// This declare variable x with value 42, and evaluates to 42.
var t = 42;
[00000000] 42
// x equals 42
t;
[00000000] 42
// We can assign it a new value
t = 51;
[00000000] 51
t;
[00000000] 51
// Initialization defaults to void
var u;
u.isVoid;
[00000000] true

syncline << "doc/specs/lang.tex:1382";
[01234567:syncline] "doc/specs/lang.tex:1382"
//#line 1382 "doc/specs/lang.tex"
{
  var x = "x";
  var y = "outer y";
  {
    var y = "inner y";
    var z = "z";
    // We can access variables of parent scopes.
    echo(x);
    // This refers to the inner y.
    echo(y);
    echo(z);
  };
  // This refers to the outer y.
  echo(y);
  // This would be invalid: z does not exist anymore.
  // echo(z);
  // This would be invalid: x is already declared in this scope.
  // var x;
};
[00000000] *** x
[00000000] *** inner y
[00000000] *** z
[00000000] *** outer y

syncline << "doc/specs/lang.tex:1423";
[01234567:syncline] "doc/specs/lang.tex:1423"
//#line 1423 "doc/specs/lang.tex"
function () { echo(0) };
[00000000] function () {
[:]  echo(0)
[:]}

function (arg1, arg2) { echo(0) };
[00000000] function (var arg1, var arg2) {
[:]  echo(0)
[:]}

function (
           arg1, // Ignored argument.
           arg2, // Also ignored.
          )
{
  echo(0)
};
[00000000] function (var arg1, var arg2) {
[:]  echo(0)
[:]}

syncline << "doc/specs/lang.tex:1450";
[01234567:syncline] "doc/specs/lang.tex:1450"
//#line 1450 "doc/specs/lang.tex"
// Functions are often stored in variables to call them later.
var f1 = function () {
  echo("hello")
}|
f1();
[00000000] *** hello

// This form is strictly equivalent, yet simpler.
function f2()
{
  echo("hello")
}|
f2();
[00000000] *** hello

syncline << "doc/specs/lang.tex:1477";
[01234567:syncline] "doc/specs/lang.tex:1477"
//#line 1477 "doc/specs/lang.tex"
var f = function(a, b) {
  echo(b + a);
}|
f(1, 0);
[00000000] *** 1
// Calling a function with the wrong number of argument is an error.
f(0);
[00000000:error] !!! f: expected 2 arguments, given 1
f(0, 1, 2);
[00000000:error] !!! f: expected 2 arguments, given 3

syncline << "doc/specs/lang.tex:1491";
[01234567:syncline] "doc/specs/lang.tex:1491"
//#line 1491 "doc/specs/lang.tex"
f(
  "bar",
  "foo",
 );
[00000000] *** foobar

syncline << "doc/specs/lang.tex:1510";
[01234567:syncline] "doc/specs/lang.tex:1510"
//#line 1510 "doc/specs/lang.tex"
function g1(a, b)
{
  echo(a);
  echo(b);
  a // Return value is a
}|
g1(1, 2);
[00000000] *** 1
[00000000] *** 2
[00000000] 1

function g2(a, b)
{
  echo(a);
  return a; // Stop execution at this point and return a
  echo(b); // This is not executed
}|
g2(1, 2);
[00000000] *** 1
[00000000] 1

function g3()
{
  return; // Stop execution at this point and return void
  echo(0); // This is not executed
}|
g3(); // Returns void, so nothing is printed.

syncline << "doc/specs/lang.tex:1562";
[01234567:syncline] "doc/specs/lang.tex:1562"
//#line 1562 "doc/specs/lang.tex"
function first1(a, b) {
  echo(a); echo(b)
}|
first1({echo("Arg1"); 1},
       {echo("Arg2"); 2});
[00000000] *** Arg1
[00000000] *** Arg2
[00000000] *** 1
[00000000] *** 2

syncline << "doc/specs/lang.tex:1579";
[01234567:syncline] "doc/specs/lang.tex:1579"
//#line 1579 "doc/specs/lang.tex"
function first2
{
  echo(call.evalArgAt(0));
  echo(call.evalArgAt(1));
}|
first2({echo("Arg1"); 1},
       {echo("Arg2"); 2});
[00000000] *** Arg1
[00000000] *** 1
[00000000] *** Arg2
[00000000] *** 2

syncline << "doc/specs/lang.tex:1597";
[01234567:syncline] "doc/specs/lang.tex:1597"
//#line 1597 "doc/specs/lang.tex"
function first3
{
  var a = call.evalArgAt(0);
  var b = call.evalArgAt(1);
  echo(a); echo(b);
}|
first3({echo("Arg1"); 1},
       {echo("Arg2"); 2});
[00000000] *** Arg1
[00000000] *** Arg2
[00000000] *** 1
[00000000] *** 2

syncline << "doc/specs/lang.tex:1621";
[01234567:syncline] "doc/specs/lang.tex:1621"
//#line 1621 "doc/specs/lang.tex"
var n = 0|
function cl()
{
  // x refers to a variable outside the function
  n++;
  echo(n);
}|
cl();
[00000000] *** 1
n;
[00000000] 1
n++;
[00000000] 1
cl();
[00000000] *** 3

syncline << "doc/specs/lang.tex:1642";
[01234567:syncline] "doc/specs/lang.tex:1642"
//#line 1642 "doc/specs/lang.tex"
function wrapper()
{
  // Normally, x is local to 'wrapper', and is limited to this scope.
  var x = 0;
  at (x > 1)
    echo("ping");
  // Here we make it escape the scope by returning a closure on it.
  return function() { x++ };
} |

var w = wrapper()|
w();
[00000000] 0
w();
[00000000] 1
[00000000] *** ping

syncline << "doc/specs/lang.tex:1688";
[01234567:syncline] "doc/specs/lang.tex:1688"
//#line 1688 "doc/specs/lang.tex"
var o = Object.new|
o.localSlotNames;
[00000000] []
o.createSlot("test");
o.localSlotNames;
[00000000] ["test"]
o.getSlot("test").asString;
[00000000] "void"
o.updateSlot("test", 42);
[00000000] 42
o.getSlot("test");
[00000000] 42

syncline << "doc/specs/lang.tex:1730";
[01234567:syncline] "doc/specs/lang.tex:1730"
//#line 1730 "doc/specs/lang.tex"
var ob = Object.new|
ob.protos;
[00000000] [Object]
ob.addProto(Pair);
[00000000] (nil, nil)
ob.protos;
[00000000] [(nil, nil), Object]
ob.removeProto(Object);
[00000000] (nil, nil)
ob.protos;
[00000000] [(nil, nil)]

syncline << "doc/specs/lang.tex:1765";
[01234567:syncline] "doc/specs/lang.tex:1765"
//#line 1765 "doc/specs/lang.tex"
var a = Object.new|
var b = Object.new|
var c = Object.new|
a.setSlot("x", "slot in a")|
b.setSlot("x", "slot in b")|
// c has no "x" slot
c.getSlot("x");
[00000000:error] !!! lookup failed: x
// c can inherit the "x" slot from a.
c.addProto(a)|
c.getSlot("x");
[00000000] "slot in a"
// b is prepended to the prototype list, and has thus priority
c.addProto(b)|
c.getSlot("x");
[00000000] "slot in b"
// a local slot in c has priority over prototypes
c.setSlot("x", "slot in c")|
c.getSlot("x");
[00000000] "slot in c"

syncline << "doc/specs/lang.tex:1799";
[01234567:syncline] "doc/specs/lang.tex:1799"
//#line 1799 "doc/specs/lang.tex"
var p = Object.new|
var p.slot = 0|
var d = Object.new|
d.addProto(p)|
d.slot;
[00000000] 0
d.slot = 1;
[00000000] 1
// p's slot was not altered
p.slot;
[00000000] 0
// It was copied in d
d.slot;
[00000000] 1

syncline << "doc/specs/lang.tex:1852";
[01234567:syncline] "doc/specs/lang.tex:1852"
//#line 1852 "doc/specs/lang.tex"
var obj = Object.new|
var obj.a = 42|
var obj.b = function (x) { x + 1 }|
obj.a;
[00000000] 42
obj.a();
[00000000] 42
obj.a(50);
[00000000:error] !!! a: expected 0 argument, given 1
obj.b;
[00000000:error] !!! b: expected 1 argument, given 0
obj.b();
[00000000:error] !!! b: expected 1 argument, given 0
obj.b(50);
[00000000] 51

syncline << "doc/specs/lang.tex:1889";
[01234567:syncline] "doc/specs/lang.tex:1889"
//#line 1889 "doc/specs/lang.tex"
switch ( ("foo", [1, 2]) )
{
  // The pattern does not match the values of the list.
  case ("foo", [2, 1]):
    echo("fail");

  // The pattern does not match the tuple.
  case ["foo", [1, 2]]:
    echo("fail");

  // The pattern matches and binds the variable "l"
  // but the condition is not verified.
  case ("foo", var l) if l.size == 0:
    echo("fail");

  // The pattern matches.
  case ("foo", [var a, var b]):
    echo("foo(%s, %s)" % [a, b]);
};
[00000000] *** foo(1, 2)

syncline << "doc/specs/lang.tex:1919";
[01234567:syncline] "doc/specs/lang.tex:1919"
//#line 1919 "doc/specs/lang.tex"
(1, "foo") = (1, "foo");
[00000000] (1, "foo")
[1, "foo"] = [1, "foo"];
[00000000] [1, "foo"]
["b" => "foo", "a" => 1] = ["a" => 1, "b" => "foo"];
[00000000] ["a" => 1, "b" => "foo"]

syncline << "doc/specs/lang.tex:1931";
[01234567:syncline] "doc/specs/lang.tex:1931"
//#line 1931 "doc/specs/lang.tex"
try
{
  (1, 2) = (3, 4)
}
catch (var e if e.isA(Exception.MatchFailure))
{
  e.message
};
[00000000] "pattern did not match"

syncline << "doc/specs/lang.tex:1948";
[01234567:syncline] "doc/specs/lang.tex:1948"
//#line 1948 "doc/specs/lang.tex"
{
  (var a, var b) = (1, 2);
  echo("a = %d, b = %d" % [a, b]);
};
[00000000] *** a = 1, b = 2
{
  [var a, var b] = [1, 2];
  echo("a = %d, b = %d" % [a, b]);
};
[00000000] *** a = 1, b = 2
{
  ["b" => var b, "a" => var a] = ["a" => 1, "b" => 2, "c" => 3];
  echo("a = %d, b = %d" % [a, b]);
};
[00000000] *** a = 1, b = 2

syncline << "doc/specs/lang.tex:1977";
[01234567:syncline] "doc/specs/lang.tex:1977"
//#line 1977 "doc/specs/lang.tex"
switch (["speed" => 2, "time" => 6s])
{
  case ["speed" => var s] if s > 3:
    echo("Too fast");
  case ["speed" => var s, "time" => var t] if s * t > 10:
    echo("Too far");
};
[00000000] *** Too far

syncline << "doc/specs/lang.tex:1990";
[01234567:syncline] "doc/specs/lang.tex:1990"
//#line 1990 "doc/specs/lang.tex"
try
{
  throw ("message", 0)
}
catch (var e if e.isA(Exception))
{
  echo(e.message)
}
catch ((var msg, var value) if value.isA(Float))
{
  echo("%s: %d" % [msg, value])
};
[00000000] *** message: 0

syncline << "doc/specs/lang.tex:2010";
[01234567:syncline] "doc/specs/lang.tex:2010"
//#line 2010 "doc/specs/lang.tex"
{
  var e = Event.new;
  at (e?(var msg, var value) if value % 2 == 0)
    echo("%s: %d" % [msg, value]);

  // Does not trigger the "at" because the guard is not verified.
  e!("message", 1);

  // Trigger the "at".
  e!("message", 2);
};
[00000000] *** message: 2

syncline << "doc/specs/lang.tex:2037";
[01234567:syncline] "doc/specs/lang.tex:2037"
//#line 2037 "doc/specs/lang.tex"
var i = 5|
for (; true; echo(i))
{
  if (i > 8)
    break;
  i++;
};
[00000000] *** 6
[00000000] *** 7
[00000000] *** 8
[00000000] *** 9

syncline << "doc/specs/lang.tex:2057";
[01234567:syncline] "doc/specs/lang.tex:2057"
//#line 2057 "doc/specs/lang.tex"
for (var i = 0; i < 8; i++)
{
  if (i % 2 != 0)
    continue;
  echo(i);
};
[00000000] *** 0
[00000000] *** 2
[00000000] *** 4
[00000000] *** 6

syncline << "doc/specs/lang.tex:2087";
[01234567:syncline] "doc/specs/lang.tex:2087"
//#line 2087 "doc/specs/lang.tex"
do (1024)
{
  assert(this == 1024);
  assert(sqrt == 32);
  setSlot("y", 23);
}.y;
[00000000] 23

syncline << "doc/specs/lang.tex:2112";
[01234567:syncline] "doc/specs/lang.tex:2112"
//#line 2112 "doc/specs/lang.tex"
if (true) assert(true) else assert(false);
if (false) assert(false) else assert(true);
if (true) assert(true);

syncline << "doc/specs/lang.tex:2121";
[01234567:syncline] "doc/specs/lang.tex:2121"
//#line 2121 "doc/specs/lang.tex"
if (true)
  assert(true);
else
  assert(false);
[00000002:error] !!! syntax error: unexpected else

syncline << "doc/specs/lang.tex:2136";
[01234567:syncline] "doc/specs/lang.tex:2136"
//#line 2136 "doc/specs/lang.tex"
assert(1 + if (true) 3 else 4 == 4);
[00000003:error] !!! syntax error: unexpected if
assert(1 + { if (true) 3 else 4 } == 4);

syncline << "doc/specs/lang.tex:2146";
[01234567:syncline] "doc/specs/lang.tex:2146"
//#line 2146 "doc/specs/lang.tex"
assert({if (false) 10 else 20} == 20);
assert({if (true)  10 else 20} == 10);

assert({if (true) 10         } == 10);

assert({if (var x = 10) x + 2 else x - 2} == 12);
assert({if (var x = 0)  x + 2 else x - 2} == -2);

if (var xx = 123) xx | xx;
[00000005:error] !!! lookup failed: xx

syncline << "doc/specs/lang.tex:2202";
[01234567:syncline] "doc/specs/lang.tex:2202"
//#line 2202 "doc/specs/lang.tex"
for (var x : [0, 1, 2, 3, 4])
  echo(x.sqr);
[00000000] *** 0
[00000000] *** 1
[00000000] *** 4
[00000000] *** 9
[00000000] *** 16

syncline << "doc/specs/lang.tex:2218";
[01234567:syncline] "doc/specs/lang.tex:2218"
//#line 2218 "doc/specs/lang.tex"
var Hobbits = Object.new|
function Hobbits.each (action)
{
  action("Frodo");
  action("Merry");
  action("Pippin");
  action("Sam");
}|
for (var name in Hobbits)
  echo("%s is a hobbit." % [name]);
[00000000] *** Frodo is a hobbit.
[00000000] *** Merry is a hobbit.
[00000000] *** Pippin is a hobbit.
[00000000] *** Sam is a hobbit.
// This for statement is equivalent to:
Hobbits.each(function (name) { echo("%s is a hobbit." % [name]) });
[00000000] *** Frodo is a hobbit.
[00000000] *** Merry is a hobbit.
[00000000] *** Pippin is a hobbit.
[00000000] *** Sam is a hobbit.

syncline << "doc/specs/lang.tex:2251";
[01234567:syncline] "doc/specs/lang.tex:2251"
//#line 2251 "doc/specs/lang.tex"
assert {
{ var res = []; for (3) { res << 1; res << 2 } ; res }
        == [1, 2, 1, 2, 1, 2];

{ var res = []; for|(3) { res << 1; res << 2 } ; res }
        == [1, 2, 1, 2, 1, 2];

{ var res = []; for&(3) { res << 1; res << 2 } ; res }
        == [1, 1, 1, 2, 2, 2];
};

syncline << "doc/specs/lang.tex:2266";
[01234567:syncline] "doc/specs/lang.tex:2266"
//#line 2266 "doc/specs/lang.tex"
assert {
3 == { var r = 0; for ([1, 2, 3]) r += 1; r};
3 == { var r = 0; for ("123")     r += 1; r};
};

syncline << "doc/specs/lang.tex:2300";
[01234567:syncline] "doc/specs/lang.tex:2300"
//#line 2300 "doc/specs/lang.tex"
assert {
{
  var n = 10|;
  var res = []|;
  loop;
  {
    n--;
    res << n;
    if (n == 0)
      break
  };
  res
}
==
[9, 8, 7, 6, 5, 4, 3, 2, 1, 0];
};

syncline << "doc/specs/lang.tex:2317";
[01234567:syncline] "doc/specs/lang.tex:2317"
//#line 2317 "doc/specs/lang.tex"
assert {
{
  var n = 10|;
  var res = []|;
  loop|
  {
    n--;
    res << n;
    if (n == 0)
      break
  };
  res
}
==
[9, 8, 7, 6, 5, 4, 3, 2, 1, 0];
};

syncline << "doc/specs/lang.tex:2368";
[01234567:syncline] "doc/specs/lang.tex:2368"
//#line 2368 "doc/specs/lang.tex"
function sw(v)
{
  switch (v)
  {
    case "":
      echo("Empty string");
    case "foo":
      "bar";
    default:
      v[0];
  }
}|;
sw("");
[00000000] *** Empty string
sw("foo");
[00000000] "bar"
sw("foobar");
[00000000] "f"

syncline << "doc/specs/lang.tex:2403";
[01234567:syncline] "doc/specs/lang.tex:2403"
//#line 2403 "doc/specs/lang.tex"
var j = 3|
while (0 < j)
{
  echo(j);
  j--;
};
[00000000] *** 3
[00000000] *** 2
[00000000] *** 1

syncline << "doc/specs/lang.tex:2438";
[01234567:syncline] "doc/specs/lang.tex:2438"
//#line 2438 "doc/specs/lang.tex"
{
  var i = 4|
  while (true)
  {
    i -= 1;
    echo ("in: " + i);
    if (i == 1)
      break
    else if (i == 2)
      continue;
    echo ("out: " + i);
  };
};
[00000000] *** in: 3
[00000000] *** out: 3
[00000000] *** in: 2
[00000000] *** in: 1

syncline << "doc/specs/lang.tex:2478";
[01234567:syncline] "doc/specs/lang.tex:2478"
//#line 2478 "doc/specs/lang.tex"
{
  var i = 4|
  while| (true)
  {
    i -= 1;
    echo ("in: " + i);
    if (i == 1)
      break
    else if (i == 2)
      continue;
    echo ("out: " + i);
  };
};
[00000000] *** in: 3
[00000000] *** out: 3
[00000000] *** in: 2
[00000000] *** in: 1

syncline << "doc/specs/lang.tex:2510";
[01234567:syncline] "doc/specs/lang.tex:2510"
//#line 2510 "doc/specs/lang.tex"
throw 42;
[00000000:error] !!! 42
function inner() { throw "exn" } |
function outer() { inner() }|
// Exceptions propagate to parent call up to the top-level
outer();
[00000000:error] !!! exn
[00000000:error] !!!    called from: inner
[00000000:error] !!!    called from: outer

syncline << "doc/specs/lang.tex:2554";
[01234567:syncline] "doc/specs/lang.tex:2554"
//#line 2554 "doc/specs/lang.tex"
try {} catch {} catch (var e) {};
[00000701:error] !!! syntax error: catch: exception already caught by a previous clause

syncline << "doc/specs/lang.tex:2562";
[01234567:syncline] "doc/specs/lang.tex:2562"
//#line 2562 "doc/specs/lang.tex"
try {} catch (var e) {} catch {};

syncline << "doc/specs/lang.tex:2571";
[01234567:syncline] "doc/specs/lang.tex:2571"
//#line 2571 "doc/specs/lang.tex"
function test(e)
{
  try
  { throw e;  }
  catch (0)
  { echo("zero") }
  catch ([var x, var y])
  { echo(x + y) }
} | {};
test(0);
[00002126] *** zero
test([22, 20]);
[00002131] *** 42
test(51);
[00002143:error] !!! 51
[00002143:error] !!!    called from: test

syncline << "doc/specs/lang.tex:2593";
[01234567:syncline] "doc/specs/lang.tex:2593"
//#line 2593 "doc/specs/lang.tex"
try   { echo("try") }
catch { echo("catch")}
else  { echo("else")};
[00002855] *** try
[00002855] *** else

try   { echo("try"); echo("throw"); throw 0 }
catch { echo("catch")}
else  { echo("else")};
[00002855] *** try
[00002855] *** throw
[00002855] *** catch

syncline << "doc/specs/lang.tex:2616";
[01234567:syncline] "doc/specs/lang.tex:2616"
//#line 2616 "doc/specs/lang.tex"
try { throw 0; "try" } catch (0) { "catch" } else { "else" };
[00467080] "catch"

syncline << "doc/specs/lang.tex:2624";
[01234567:syncline] "doc/specs/lang.tex:2624"
//#line 2624 "doc/specs/lang.tex"
try { "try" } catch (0) { "catch" } else { "else" };
[00467080] "else"

syncline << "doc/specs/lang.tex:2629";
[01234567:syncline] "doc/specs/lang.tex:2629"
//#line 2629 "doc/specs/lang.tex"
try { "try" } catch (0) { "catch" };
[00467080] "try"

syncline << "doc/specs/lang.tex:2642";
[01234567:syncline] "doc/specs/lang.tex:2642"
//#line 2642 "doc/specs/lang.tex"
try
{
  Math.cos(3,1415);
}
catch (var e)
{
  echo ("Exception type: %s" % e.type);
  if (e.isA(Exception.Arity))
  {
    echo("Routine: %s" % e.routine);
    echo("Number of effective arguments: %s" % e.effective);
  };
};
[00000132] *** Exception type: Arity
[00000133] *** Routine: cos
[00000134] *** Number of effective arguments: 2

syncline << "doc/specs/lang.tex:2672";
[01234567:syncline] "doc/specs/lang.tex:2672"
//#line 2672 "doc/specs/lang.tex"
try
{
  echo("inside");
}
finally
{
  echo("finally");
};
[00000001] *** inside
[00000002] *** finally

syncline << "doc/specs/lang.tex:2687";
[01234567:syncline] "doc/specs/lang.tex:2687"
//#line 2687 "doc/specs/lang.tex"
try { 51 } finally { 42 };
[00000001] 51

syncline << "doc/specs/lang.tex:2697";
[01234567:syncline] "doc/specs/lang.tex:2697"
//#line 2697 "doc/specs/lang.tex"
function with_return(var enable)
{
  try
  {
    echo("before return");
    if (enable)
      return;
    echo("after return");
  }
  finally
  {
    echo("finally");
  };
  echo("after try-block")
}|

with_return(false);
[00001983] *** before return
[00001985] *** after return
[00001985] *** finally
[00001986] *** after try-block

with_return(true);
[00001991] *** before return
[00001992] *** finally

syncline << "doc/specs/lang.tex:2728";
[01234567:syncline] "doc/specs/lang.tex:2728"
//#line 2728 "doc/specs/lang.tex"
for (var i : ["1", "continue", "2", "break", "3"])
  try
  {
    echo("before:  " + i);
    switch (i)
    {
      case "break":    break;
      case "continue": continue;
    };
    echo("after:   " + i);
  }
  finally
  {
    echo("finally: " + i);
  };
[00000663] *** before:  1
[00000671] *** after:   1
[00000671] *** finally: 1
[00000673] *** before:  continue
[00000675] *** finally: continue
[00000682] *** before:  2
[00000703] *** after:   2
[00000703] *** finally: 2
[00000704] *** before:  break
[00000705] *** finally: break

syncline << "doc/specs/lang.tex:2763";
[01234567:syncline] "doc/specs/lang.tex:2763"
//#line 2763 "doc/specs/lang.tex"
try           { echo("try");     "try" }
catch (var e) { echo("catch");   "catch" }
finally       { echo("finally"); "finally" };
[00000614] *** try
[00000615] *** finally
[00000616] "try"

try           { echo("try");     "try" }
catch (var e) { echo("catch");   "catch" }
else          { echo("else");    "else" }
finally       { echo("finally"); "finally" };
[00000614] *** try
[00000615] *** else
[00000615] *** finally
[00000616] "else"

try                      { echo("throw 42"); throw 42; "try" }
catch (var e if e == 42) { echo("caught " + e);        "catch" }
finally                  { echo("finally");            "finally" };
[00000626] *** throw 42
[00000626] *** caught 42
[00000631] *** finally
[00000631] "catch"

syncline << "doc/specs/lang.tex:2793";
[01234567:syncline] "doc/specs/lang.tex:2793"
//#line 2793 "doc/specs/lang.tex"
try                      { echo("throw"); throw 51; "try" }
catch (var e if e == 42) { echo("caught " + e);     "catch" }
finally                  { echo("finally");         "finally" };
[00000616] *** throw
[00000617] *** finally
[00000625:error] !!! 51

syncline << "doc/specs/lang.tex:2804";
[01234567:syncline] "doc/specs/lang.tex:2804"
//#line 2804 "doc/specs/lang.tex"
try     { throw "throw" }
catch   { throw "catch" }
finally { throw "finally" };
[00005200:error] !!! finally

syncline << "doc/specs/lang.tex:2830";
[01234567:syncline] "doc/specs/lang.tex:2830"
//#line 2830 "doc/specs/lang.tex"
assert(true);
assert(42);

syncline << "doc/specs/lang.tex:2838";
[01234567:syncline] "doc/specs/lang.tex:2838"
//#line 2838 "doc/specs/lang.tex"
function fail () { false }|;
assert (fail);
[00010239:error] !!! failed assertion: fail (fail == false)

function lazyFail { call.evalArgAt(0); false }|;
assert (lazyFail(1+2, "+" * 2));
[00010241:error] !!! failed assertion: lazyFail(1.'+'(2), "+".'*'(2)) (lazyFail(3, ?) == false)

syncline << "doc/specs/lang.tex:2850";
[01234567:syncline] "doc/specs/lang.tex:2850"
//#line 2850 "doc/specs/lang.tex"
function areEqual
{
  var res = true;
  if (!call.args.empty)
  {
    var args = call.evalArgs;
    var a = args[0];
    for (var b : args.tail)
      if (a != b)
      {
        res = false;
        break;
      }
  };
  res
}|;
assert (areEqual);
assert (areEqual(1));
assert (areEqual(1, 0 + 1));
assert (areEqual(1, 1, 1+1));
[00001388:error] !!! failed assertion: areEqual(1, 1, 1.'+'(1)) (areEqual(1, 1, 2) == false)
assert (areEqual(1+2, 3+3, 4*6));
[00001393:error] !!! failed assertion: areEqual(1.'+'(2), 3.'+'(3), 4.'*'(6)) (areEqual(3, 6, 24) == false)

syncline << "doc/specs/lang.tex:2877";
[01234567:syncline] "doc/specs/lang.tex:2877"
//#line 2877 "doc/specs/lang.tex"
assert(1 == 1 + 1);
[00000002:error] !!! failed assertion: 1 == 1.'+'(1) (1 != 2)

syncline << "doc/specs/lang.tex:2892";
[01234567:syncline] "doc/specs/lang.tex:2892"
//#line 2892 "doc/specs/lang.tex"
assert
{
  true;
  42;
  1 == 1 + 1;
};
[00000002:error] !!! failed assertion: 1 == 1.'+'(1) (1 != 2)

syncline << "doc/specs/lang.tex:2905";
[01234567:syncline] "doc/specs/lang.tex:2905"
//#line 2905 "doc/specs/lang.tex"
assert {
true;
42;
1 == 1 + 1;
[00000002:error] !!! failed assertion: 1 == 1.'+'(1) (1 != 2)
};
