syncline << "doc/specs/file.tex:24";
[01234567:syncline] "doc/specs/file.tex:24"
//#line 24 "doc/specs/file.tex"
File.create("file.txt");
[00000001] File("file.txt")

File.new(Path.new("file.txt"));
[00000001] File("file.txt")

syncline << "doc/specs/file.tex:40";
[01234567:syncline] "doc/specs/file.tex:40"
//#line 40 "doc/specs/file.tex"
File.save("file.txt", "1\n2\n");
assert(File.new("file.txt").asList == ["1", "2"]);

syncline << "doc/specs/file.tex:46";
[01234567:syncline] "doc/specs/file.tex:46"
//#line 46 "doc/specs/file.tex"
File.save("file.txt", "1\n2\n");
assert(File.new("file.txt").asPrintable == "File(\"file.txt\")");

syncline << "doc/specs/file.tex:53";
[01234567:syncline] "doc/specs/file.tex:53"
//#line 53 "doc/specs/file.tex"
File.save("file.txt", "1\n2\n");
assert(File.new("file.txt").asString == "file.txt");

syncline << "doc/specs/file.tex:60";
[01234567:syncline] "doc/specs/file.tex:60"
//#line 60 "doc/specs/file.tex"
File.save("file.txt", "1\n2\n");
assert
{
  File.new("file.txt").content == Binary.new("", "1\n2\n");
};

syncline << "doc/specs/file.tex:72";
[01234567:syncline] "doc/specs/file.tex:72"
//#line 72 "doc/specs/file.tex"
var p = Path.new("create.txt") |
assert (!p.exists);

// Create the file, and put something in it.
var f = File.create(p)|;
var o = OutputStream.new(f)|;
o << "Hello, World!"|;
o.close;

assert
{
  // The file exists, with the expect contents.
  p.exists;
  f.content.data == "Hello, World!";

  // If we create is again, it is empty.
  File.create(p).isA(File);
  f.content.data == "";
};
