# Makefile.in generated by automake 1.11.1 from Makefile.am.
# @configure_input@

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
# Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@

# Rules to convert several common figure formats to formats well
# supported by pdflatex (png, jpg, pdf).





VPATH = @srcdir@
pkgdatadir = $(datadir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkglibexecdir = $(libexecdir)/@PACKAGE@
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = @build@
host_triplet = @host@
DIST_COMMON = $(dist_bin_SCRIPTS) $(dist_doc_DATA) $(dist_noinst_DATA) \
	$(dist_noinst_SCRIPTS) $(include_HEADERS) \
	$(srcdir)/Makefile.am $(srcdir)/Makefile.in \
	$(srcdir)/config.sty.in \
	$(srcdir)/document-aux/make/pdf-figs.mk \
	$(srcdir)/document-aux/make/tex.mk $(srcdir)/tests/local.mk \
	$(srcdir)/trajectories/local.mk \
	$(top_srcdir)/build-aux/check.mk \
	$(top_srcdir)/build-aux/init.mk \
	$(top_srcdir)/build-aux/make/html-dir.mk \
	$(top_srcdir)/build-aux/revision.mk TODO
XFAIL_TESTS =
bin_PROGRAMS =
TESTS =
@ENABLE_DOC_PDF_TRUE@am__append_1 = $(PDFS)

# We cannot simply use html_DATA here, since Automake does not
# support installing directories.
@ENABLE_DOC_HTML_TRUE@am__append_2 = urbi-sdk.htmldir
subdir = doc
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/tests/m4/urbi-tests.m4 \
	$(top_srcdir)/build-aux/acx_pthread.m4 \
	$(top_srcdir)/build-aux/boost.m4 \
	$(top_srcdir)/build-aux/libtool.m4 \
	$(top_srcdir)/build-aux/ltoptions.m4 \
	$(top_srcdir)/build-aux/ltsugar.m4 \
	$(top_srcdir)/build-aux/ltversion.m4 \
	$(top_srcdir)/build-aux/lt~obsolete.m4 \
	$(top_srcdir)/build-aux/m4-after.m4 \
	$(top_srcdir)/build-aux/package-version.m4 \
	$(top_srcdir)/build-aux/pthread-sources.m4 \
	$(top_srcdir)/build-aux/require-progs.m4 \
	$(top_srcdir)/build-aux/shlibext.m4 \
	$(top_srcdir)/build-aux/tc-prog.m4 \
	$(top_srcdir)/build-aux/urbi-append-flags.m4 \
	$(top_srcdir)/build-aux/urbi-arg-progs.m4 \
	$(top_srcdir)/build-aux/urbi-arg.m4 \
	$(top_srcdir)/build-aux/urbi-boost.m4 \
	$(top_srcdir)/build-aux/urbi-build-aux.m4 \
	$(top_srcdir)/build-aux/urbi-canonical-host.m4 \
	$(top_srcdir)/build-aux/urbi-compilation-mode.m4 \
	$(top_srcdir)/build-aux/urbi-config-scripts.m4 \
	$(top_srcdir)/build-aux/urbi-dirs.m4 \
	$(top_srcdir)/build-aux/urbi-distcheck-configure-flags.m4 \
	$(top_srcdir)/build-aux/urbi-doc.m4 \
	$(top_srcdir)/build-aux/urbi-enable-doc-sections.m4 \
	$(top_srcdir)/build-aux/urbi-float-check.m4 \
	$(top_srcdir)/build-aux/urbi-isystem.m4 \
	$(top_srcdir)/build-aux/urbi-lib-suffix.m4 \
	$(top_srcdir)/build-aux/urbi-libport.m4 \
	$(top_srcdir)/build-aux/urbi-libtool.m4 \
	$(top_srcdir)/build-aux/urbi-module.m4 \
	$(top_srcdir)/build-aux/urbi-package-info.m4 \
	$(top_srcdir)/build-aux/urbi-package-kind.m4 \
	$(top_srcdir)/build-aux/urbi-pragma.m4 \
	$(top_srcdir)/build-aux/urbi-prog-cxx.m4 \
	$(top_srcdir)/build-aux/urbi-prog-latex.m4 \
	$(top_srcdir)/build-aux/urbi-pthread.m4 \
	$(top_srcdir)/build-aux/urbi-resolve-dir.m4 \
	$(top_srcdir)/build-aux/urbi-sockets.m4 \
	$(top_srcdir)/build-aux/urbi-ufloat.m4 \
	$(top_srcdir)/build-aux/urbi-win32.m4 \
	$(top_srcdir)/build-aux/warning.m4 \
	$(top_srcdir)/build-aux/xenomai.m4 \
	$(top_srcdir)/modules/modules.ac \
	$(top_srcdir)/modules/system/ros/module.ac.auto \
	$(top_srcdir)/modules/algorithm/md5/module.ac.auto \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/src/kernel/config.h
CONFIG_CLEAN_FILES = config.sty
CONFIG_CLEAN_VPATH_FILES =
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;
am__install_max = 40
am__nobase_strip_setup = \
  srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*|]/\\\\&/g'`
am__nobase_strip = \
  for p in $$list; do echo "$$p"; done | sed -e "s|$$srcdirstrip/||"
am__nobase_list = $(am__nobase_strip_setup); \
  for p in $$list; do echo "$$p $$p"; done | \
  sed "s| $$srcdirstrip/| |;"' / .*\//!s/ .*/ ./; s,\( .*\)/[^/]*$$,\1,' | \
  $(AWK) 'BEGIN { files["."] = "" } { files[$$2] = files[$$2] " " $$1; \
    if (++n[$$2] == $(am__install_max)) \
      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = "" } } \
    END { for (dir in files) print dir, files[dir] }'
am__base_list = \
  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
  sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
am__installdirs = "$(DESTDIR)$(libdir)" "$(DESTDIR)$(bindir)" \
	"$(DESTDIR)$(bindir)" "$(DESTDIR)$(bindir)" \
	"$(DESTDIR)$(docdir)" "$(DESTDIR)$(pdfdir)" \
	"$(DESTDIR)$(includedir)"
LTLIBRARIES = $(lib_LTLIBRARIES) $(noinst_LTLIBRARIES)
PROGRAMS = $(bin_PROGRAMS)
SCRIPTS = $(dist_bin_SCRIPTS) $(dist_noinst_SCRIPTS) \
	$(nodist_bin_SCRIPTS) $(nodist_noinst_SCRIPTS)
AM_V_GEN = $(am__v_GEN_$(V))
am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))
am__v_GEN_0 = @echo "  GEN   " $@;
AM_V_at = $(am__v_at_$(V))
am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))
am__v_at_0 = @
SOURCES =
DIST_SOURCES =
DATA = $(dist_doc_DATA) $(dist_noinst_DATA) $(nodist_noinst_DATA) \
	$(noinst_DATA) $(pdf_DATA)
HEADERS = $(include_HEADERS)
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
INSTALL_HEADER = @INSTALL_HEADER@
ACLOCAL = @ACLOCAL@
AMTAR = @AMTAR@
AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
AR = @AR@
AS = @AS@
AUTOCONF = @AUTOCONF@
AUTOHEADER = @AUTOHEADER@
AUTOMAKE = @AUTOMAKE@
AWK = @AWK@
BISON = @BISON@
BOOST_CPPFLAGS = @BOOST_CPPFLAGS@
BOOST_DATE_TIME_LDFLAGS = @BOOST_DATE_TIME_LDFLAGS@
BOOST_DATE_TIME_LDPATH = @BOOST_DATE_TIME_LDPATH@
BOOST_DATE_TIME_LIBS = @BOOST_DATE_TIME_LIBS@
BOOST_HEADER_DIR = @BOOST_HEADER_DIR@
BOOST_LDPATH = @BOOST_LDPATH@
BOOST_LIBRARY_GLOB = @BOOST_LIBRARY_GLOB@
BOOST_REGEX_LDFLAGS = @BOOST_REGEX_LDFLAGS@
BOOST_REGEX_LDPATH = @BOOST_REGEX_LDPATH@
BOOST_REGEX_LIBS = @BOOST_REGEX_LIBS@
BOOST_ROOT = @BOOST_ROOT@
BOOST_SYSTEM_LDFLAGS = @BOOST_SYSTEM_LDFLAGS@
BOOST_SYSTEM_LDPATH = @BOOST_SYSTEM_LDPATH@
BOOST_SYSTEM_LIBS = @BOOST_SYSTEM_LIBS@
CC = @CC@
CCAS = @CCAS@
CCASDEPMODE = @CCASDEPMODE@
CCASFLAGS = @CCASFLAGS@
CCDEPMODE = @CCDEPMODE@
CFLAGS = @CFLAGS@
COMPILATION_MODE_DEBUG = @COMPILATION_MODE_DEBUG@
COMPILATION_MODE_SPACE = @COMPILATION_MODE_SPACE@
COMPILATION_MODE_SPEED = @COMPILATION_MODE_SPEED@
CONVERT = @CONVERT@
CPP = @CPP@
CPPFLAGS = @CPPFLAGS@
CXX = @CXX@
CXXCPP = @CXXCPP@
CXXDEPMODE = @CXXDEPMODE@
CXXFLAGS = @CXXFLAGS@
CYGPATH_W = @CYGPATH_W@
DEFS = @DEFS@
DEPDIR = @DEPDIR@
DISABLED_MODULES = @DISABLED_MODULES@
DISABLED_MODULES_U = @DISABLED_MODULES_U@
DISTCHECK_CONFIGURE_FLAGS = @DISTCHECK_CONFIGURE_FLAGS@
DLLTOOL = @DLLTOOL@
DLMODEXT = @DLMODEXT@
DOT = @DOT@
DOXYGEN = @DOXYGEN@
DSYMUTIL = @DSYMUTIL@
DUMPBIN = @DUMPBIN@
ECHO_C = @ECHO_C@
ECHO_N = @ECHO_N@
ECHO_T = @ECHO_T@
EGREP = @EGREP@
ENABLED_MODULES = @ENABLED_MODULES@
ENABLED_MODULES_U = @ENABLED_MODULES_U@
EXEEXT = @EXEEXT@
FGREP = @FGREP@
FLEX = @FLEX@
GREP = @GREP@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
LD = @LD@
LDFLAGS = @LDFLAGS@
LIBOBJS = @LIBOBJS@
LIBPORT_BUILDPREFIX = @LIBPORT_BUILDPREFIX@
LIBPORT_SRCDIR = @LIBPORT_SRCDIR@
LIBS = 
LIBSFX = @LIBSFX@
LIBTOOL = @LIBTOOL@
LIBTOOL_DEPS = @LIBTOOL_DEPS@
LIPO = @LIPO@
LN_S = @LN_S@
LTLIBOBJS = @LTLIBOBJS@
MAKEINFO = @MAKEINFO@
MKDIR_P = @MKDIR_P@
NM = @NM@
NMEDIT = @NMEDIT@
OBJDUMP = @OBJDUMP@
OBJEXT = @OBJEXT@
OTOOL = @OTOOL@
OTOOL64 = @OTOOL64@
PACKAGE = @PACKAGE@
PACKAGE_BRAND = @PACKAGE_BRAND@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_COPYRIGHT = @PACKAGE_COPYRIGHT@
PACKAGE_COPYRIGHT_HOLDER = @PACKAGE_COPYRIGHT_HOLDER@
PACKAGE_COPYRIGHT_YEARS = @PACKAGE_COPYRIGHT_YEARS@
PACKAGE_KIND = @PACKAGE_KIND@
PACKAGE_MAJOR = @PACKAGE_MAJOR@
PACKAGE_MINOR = @PACKAGE_MINOR@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_PATCHLEVEL = @PACKAGE_PATCHLEVEL@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_URL = @PACKAGE_URL@
PACKAGE_VERSION = @PACKAGE_VERSION@
PATH_SEPARATOR = @PATH_SEPARATOR@
PDFCROP = @PDFCROP@
PDFLATEX = @PDFLATEX@
PTHREAD_CC = @PTHREAD_CC@
PTHREAD_CFLAGS = @PTHREAD_CFLAGS@
PTHREAD_LDFLAGS = @PTHREAD_LDFLAGS@
PTHREAD_LIBS = @PTHREAD_LIBS@
PTHREAD_SOURCES = @PTHREAD_SOURCES@
RANLIB = @RANLIB@
SED = @SED@
SET_MAKE = @SET_MAKE@
SHELL = @SHELL@
SHLIBEXT = @SHLIBEXT@
SOCKETS_LIBS = @SOCKETS_LIBS@
STRIP = @STRIP@
SVN = @SVN@
TC_COMPILER_FLAGS_NAME = @TC_COMPILER_FLAGS_NAME@
TEX4HT = @TEX4HT@
URBI_ENV = @URBI_ENV@
URBI_HOST = @URBI_HOST@
URBI_HOST_COMP = @URBI_HOST_COMP@
URBI_HOST_CPU = @URBI_HOST_CPU@
URBI_HOST_OS = @URBI_HOST_OS@
VERSION = @VERSION@
VISIBILITY_CXXFLAGS = @VISIBILITY_CXXFLAGS@
WARNING_CXXFLAGS = @WARNING_CXXFLAGS@
XENOMAI_PATH = @XENOMAI_PATH@
XENOMAI_POSIX_CPPFLAGS = @XENOMAI_POSIX_CPPFLAGS@
XENOMAI_POSIX_LDFLAGS = @XENOMAI_POSIX_LDFLAGS@
abs_builddir = @abs_builddir@
abs_srcdir = @abs_srcdir@
abs_top_builddir = @abs_top_builddir@
abs_top_srcdir = @abs_top_srcdir@
ac_ct_CC = @ac_ct_CC@
ac_ct_CXX = @ac_ct_CXX@
ac_ct_DUMPBIN = @ac_ct_DUMPBIN@
ac_cv_distcheck_configure_flags = @ac_cv_distcheck_configure_flags@
acx_pthread_config = @acx_pthread_config@
am__include = @am__include@
am__leading_dot = @am__leading_dot@
am__quote = @am__quote@
am__tar = @am__tar@
am__untar = @am__untar@
bindir = @bindir@
branddir = @branddir@
brandincludedir = @brandincludedir@
brandlibdir = @brandlibdir@
brandlibexecdir = @brandlibexecdir@
brandsharedir = @brandsharedir@
build = @build@
build_alias = @build_alias@
build_cpu = @build_cpu@
build_os = @build_os@
build_vendor = @build_vendor@
builddir = @builddir@
datadir = @datadir@
datarootdir = @datarootdir@
docdir = @docdir@
dvidir = @dvidir@
enable_doc_sections = @enable_doc_sections@
envdir = @envdir@
exec_prefix = @exec_prefix@
host = @host@
host_alias = @host_alias@
host_cpu = @host_cpu@
host_os = @host_os@
host_vendor = @host_vendor@
htmldir = @htmldir@
includedir = @includedir@
infodir = @infodir@
install_sh = @install_sh@
kbranddir = @kbranddir@
kernel_builddir = @kernel_builddir@
kernel_srcdir = @kernel_srcdir@
kerneldir = @kerneldir@
kernelincludedir = @kernelincludedir@
libdir = @libdir@
libdirname = @libdirname@
libexecdir = @libexecdir@
localedir = @localedir@
localstatedir = @localstatedir@
mandir = @mandir@
mkdir_p = @mkdir_p@
modules_srcdir = @modules_srcdir@
oldincludedir = @oldincludedir@
pdfdir = @pdfdir@
prefix = @prefix@
program_transform_name = @program_transform_name@
psdir = @psdir@
ros_CPPFLAGS = @ros_CPPFLAGS@
ros_LDFLAGS = @ros_LDFLAGS@
sbindir = @sbindir@
sdk_remote_builddir = @sdk_remote_builddir@
sdk_remote_srcdir = @sdk_remote_srcdir@
sharedstatedir = @sharedstatedir@
srcdir = @srcdir@
subdirs = @subdirs@
sysconfdir = @sysconfdir@
target_alias = @target_alias@
top_build_prefix = @top_build_prefix@
top_builddir = @top_builddir@
top_srcdir = @top_srcdir@
umaindir = @umaindir@
uobjectsdir = @uobjectsdir@
urbi_uobjectsdir = @urbi_uobjectsdir@
urbiincludedir = @urbiincludedir@

# Initialize some common variables so that we can always use +=.  Do
# not initialize TESTS, otherwise Automake sees empty test suites
# everywhere.
AM_CFLAGS = 
AM_CPPFLAGS = 
AM_CXXFLAGS = 
# We work on C++ only.
AM_DEFAULT_SOURCE_EXT = .cc
AM_LDFLAGS = 
# Require 1.11.1 asap.
# http://lists.gnu.org/archive/html/automake/2009-12/msg00012.html
# Use bzip2 only.
AUTOMAKE_OPTIONS = 1.11 no-dist-gzip dist-bzip2 -Wno-portability \
	-Wno-portability -Wno-override
BUILDCHECK_ENVIRONMENT = $(CHECK_ENVIRONMENT) \
	PATH=$(sdk_remote_builddir)/src/tests/bin:$$PATH
BUILT_SOURCES = $(REVISION_FILE)
CHECK_CLEANFILES = 

# Use the wrappers to run the non-installed executables.
CHECK_ENVIRONMENT = srcdir=$(srcdir)

# Visual Studio Debugger PDB Files (C++).
# http://msdn2.microsoft.com/en-us/library/yd4f8bd1.aspx.
# Files created by MSVC++ and our cl.exe.

# Files which are not shipped should be cleaned.
CLEANFILES = vc80.pdb $(PROGRAMS:=.auto.*) $(EXTRA_PROGRAMS:=.auto.*) \
	lt-*.obj $(nodist_check_SCRIPTS) $(nodist_noinst_SCRIPTS) \
	$(STAMPS) *.i *.ii *.i.c *.ii.cc $(REVISION_FILE) \
	$(REVISION_FILE_STAMP) rev.{sty,tex} $(EPS_IMAGES) $(pdf_DATA)
DISTCLEANFILES = 
EXTRA_DATA = $(PDFS)

# The tests are generated in the src tree, but since it changes often,
# we don't put them in the repository.  That's no reason to forget to
# ship it.

# Ship what we need from document-aux.  Something more automatic is
# needed.
EXTRA_DIST = $(build_aux_dir)/bin/ls-files $(REVISION) $(test_mks) \
	$(TESTS) tests/test.u document-aux/bin/texi2dvi $(call \
	ls_files,@{document-aux}/figs/* @{document-aux}/styles/ldf/*) \
	document-aux/styles/fixme.sty \
	document-aux/styles/gostai-documentation.sty \
	document-aux/styles/gostai-report.sty \
	document-aux/styles/hevea.sty document-aux/styles/misc.hva \
	document-aux/styles/misc.sty document-aux/styles/mycxx.sty \
	document-aux/styles/myhyperref.sty \
	document-aux/styles/myifthen.hva \
	document-aux/styles/myifthen.sty \
	document-aux/styles/myindex.sty \
	document-aux/styles/mylistings.hva \
	document-aux/styles/mylistings.sty \
	document-aux/styles/texi.hva document-aux/styles/texi.sty \
	$(call ls_files,img/*) $(urbi_sdk_sources) $(TRAJECTORIES) \
	$(TRAJECTORIES:.utraj=.dat) $(build_aux_dir)/bin/spell-check
EXTRA_HEADERS = 
EXTRA_LTLIBRARIES = 
INSTALLCHECK_ENVIRONMENT = $(CHECK_ENVIRONMENT) \
	PATH=$(DESTDIR)$(bindir):$$PATH
M4SHFLAGS = 

# Our system leaves trailing unused *chk files.
MAINTAINERCLEANFILES = $(shell find $(srcdir) -name '*.chk')
MOSTLYCLEANFILES = 

# Sometimes it is really convenient to see the output of the
# preprocessor.  But it's a pain to run the command by hand.

# Sometimes, the remaining # lines are a nuisance: the error is not
# reported against the preprocessed file.  And then we also want to
# compile these files, that's why I used extensions that can be
# directly compiled (*.c and *.cc).
SUFFIXES = .i .ii .i.c .ii.cc

# By default, tests are buildcheck.
TESTS_ENVIRONMENT = URBI_PATH=$$URBI_PATH srcdir=$(srcdir) \
	PATH=$(abs_top_builddir)/sdk-remote/src/tests/bin:$$PATH \
	$(BUILDCHECK_ENVIRONMENT)
TFAIL_TESTS = 
dist_bin_SCRIPTS = 
dist_noinst_DATA = 
dist_noinst_SCRIPTS = 
include_HEADERS = 
lib_LTLIBRARIES = 
nodist_bin_SCRIPTS = 
nodist_check_DATA = 
nodist_check_SCRIPTS = 
nodist_noinst_DATA = 
nodist_noinst_SCRIPTS = 
noinst_LTLIBRARIES = 

# Because we use sysexists, which uses 77, we can't use the
# traditional 77 to mean SKIP tests.  Rather, use 176 consistently.
SKIP_STATUS = 176

# Automake still does not honor AM_LDADD.
LDADD = $(AM_LDADD)
build_aux_builddir = $(top_builddir)/build-aux
build_aux_dir = $(build_aux_srcdir)
build_aux_srcdir = $(top_srcdir)/build-aux
move_if_change = $(build_aux_dir)/bin/move-if-change

# Running continuously the test suite is costly, especially for the
# buildfarm.  Some changes have no impact whatsoever on the kernel,
# uconsole etc, for instance changes in the documentation.  In that
# case we would like not to rerun the test suite.  But spelling out
# the exact dependencies (on the libraries, the binaries, the
# wrappers, but also the urbi/*.u files) is hard.  So we create stamp
# files that make it easier to depend on changes of some components.
STAMPS = 
noinst_DATA = $(STAMPS) $(html_DIR)

# ls_files_in_dir DIR GLOBBING-PATTERNS
# -------------------------------------
# The files in DIR that match the GLOBBING-PATTERNS.
#
# The GLOBBING-PATTERNS are put in single quotes to avoid being
# caught by the shell.
ls_files_in_dir = \
  $(or									   \
    $(shell $(build_aux_dir)/bin/ls-files -s $(1) $(patsubst %,'%',$(2))), \
    $(error ls-files in $(1) returned nothing for: $(2)))


# ls_files GLOBBING-PATTERNS
# --------------------------
# The files in $(srcdir) that match the GLOBBING-PATTERNS.
ls_files = \
  $(call ls_files_in_dir,$(srcdir),$(1))


# make_path REPLACEMENT-PATTERN, DIR...
# -------------------------------------
# Apply REPLACEMENT-PATTERN to each DIR, and join the result with colons.
# For instance:
# (call make_path,foo/%/bar,a b c)
#  => foo/a/bar:foo/b/bar:foo/c/bar
build_aux_empty := 
build_aux_space := $(build_aux_empty) $(build_aux_empty)
make_path = \
  $(subst $(build_aux_space),:,$(patsubst %,$(1),$(2)))

INSTALL_DATA_HOOKS = install-html-dir
INSTALL_EXEC_HOOKS = 
UNINSTALL_HOOKS = 
REVISION = $(build_aux_dir)/bin/git-version-gen
html_DIR = $(am__append_2)
EXTRA_html_DIR = 
TEST_SUITE_LOG = tests/test-suite.log

# The list of LaTeX source files from the Kernel documentation that
# will be turned into tests.
test_tex = $(filter-out document-aux/%, $(call ls_files,*.tex)) $(if \
	$(addons), $(call ls_files, $(patsubst %,@{%}/*.tex, \
	$(addons))))

# Look in addons/ if there are additional LaTeX files that should
# generate test cases.  To this end, we call `ls-file
# @{addons/foo}/*.tex for each foo in addons/.
addons = \
  $(patsubst $(srcdir)/%,%,			\
    $(wildcard $(srcdir)/addons/*))


# From each LaTeX source a test.mk is generated.  E.g.,
# specs/string.tex => $(srcdir)/tests/specs/strings/test.mk.  This is
# the set of these test.mk files.
test_mks = \
  $(patsubst %.tex,$(srcdir)/tests/%-test.mk,	\
     $(test_tex))


# Restructured Text title and section.
am__rst_title = sed 's/.*/   &   /;h;s/./=/g;p;x;p;g;p;s/.*//'
am__rst_section = sed 'p;s/./=/g;p;g'
am__rst_pre = sed 's/^/	/;$${p;g;}'
am__rst_block = sed 's/.*/&::/;$${p;g;}'

# Put stdin (possibly several lines separated by ".  ") in a 123-box.
am__text_box = \
$(AWK) '					\
{						\
  n = split($$0, lines, "\\.  ");		\
  max = 0;					\
  for (i = 1; i <= n; ++i)			\
    if (max < length(lines[i]))			\
      max = length(lines[i]);			\
  ++max;					\
  for (i = 0; i < max + 6 ; ++i)		\
    line = line "-";				\
  format="|   %-" max "s   |\n";		\
  print "." line ".";				\
  for (i = 1; i <= n; ++i)			\
    if (lines[i])				\
      printf format, lines[i] ".";		\
  print "`" line "'"'"'";			\
}'


# Output stdin converting ".  " as ".\n".
am__rst_bullet = \
$(AWK) '					\
{						\
  n = split($$0, lines, "\\.  ");		\
  for (i = 0; i <= n ; ++i)			\
    if (lines[i])				\
      print lines[i] ".";			\
  print "";					\
}'


# If stdout is a non-dumb tty, use colors.  If test -t is not supported,
# then this fails; a conservative approach.  Of course do not redirect
# stdout here, just stderr.  Finish by sgr0 to help "set -x" debugging
# return to standard display.
am__tty_colors = \
blu=;						\
grn=;						\
lgn=;						\
red=;						\
std=;						\
ylw=;						\
test "X$(AM_COLOR_TESTS)" != Xno &&		\
test "X$$TERM" != Xdumb &&			\
{						\
  test "X$(AM_COLOR_TESTS)" = Xalways ||	\
  {						\
    test -t 1 2>/dev/null &&			\
    tput bold 1 >/dev/null 2>&1 &&		\
    tput setaf 1 >/dev/null 2>&1 &&		\
    tput sgr0 >/dev/null 2>&1;			\
  }						\
} &&						\
{						\
  blu=$$(tput setaf 4);				\
  grn=$$(tput setaf 2);				\
  lgn=$$(tput bold)$$(tput setaf 2);		\
  red=$$(tput setaf 1);				\
  ylw=$$(tput setaf 3);				\
  std=$$(tput sgr0);				\
}


# To be inserted before the command running the test.  Creates the
# directory for the log if needed.  Stores in $dir the directory
# containing $<, and passes the TESTS_ENVIRONMENT.
am__check_pre = \
$(mkdir_p) "$$(dirname $@)";			\
if test -f ./$<; then dir=./;			\
elif test -f $<; then dir=;			\
else dir="$(srcdir)/"; fi;			\
$(TESTS_ENVIRONMENT)


# To be appended to the command running the test.  Handles the stdout
# and stderr redirection, and catch the exit status.
am__check_post = \
>$@-t 2>&1;					\
estatus=$$?;					\
if test $$estatus -eq 177; then			\
  $(ENABLE_HARD_ERRORS) || estatus=1;		\
fi;						\
$(am__tty_colors);				\
xfailed=PASS;					\
for xfail in : $(XFAIL_TESTS); do		\
  case $< in					\
    $$xfail | */$$xfail) xfailed=XFAIL; break;;	\
  esac;						\
done;						\
for tfail in : $(TFAIL_TESTS); do		\
  case $< in					\
    $$tfail | */$$tfail) xfailed=TFAIL; break;;	\
  esac;						\
done;						\
case $$estatus:$$xfailed in			\
    0:?FAIL)          col=$$red; res=XPASS;;	\
    0:*)              col=$$grn; res=PASS ;;	\
    $(SKIP_STATUS):*) col=$$blu; res=SKIP ;;	\
    $(HARD_STATUS):*) col=$$red; res=FAIL ;;	\
    *:TFAIL)          col=$$ylw; res=TFAIL;;	\
    *:XFAIL)          col=$$lgn; res=XFAIL;;	\
    *:*)              col=$$red; res=FAIL ;;	\
esac;						\
echo "$${col}$$res$${std}: $@";			\
echo "$$res: $@ (exit: $$estatus)" |		\
  $(am__rst_section) >$@;			\
cat $@-t >>$@;					\
rm $@-t

check_programs = \
  $(nodist_check_SCRIPTS)  $(dist_check_SCRIPTS)  $(check_SCRIPTS)	\
  $(nodist_check_PROGRAMS) $(dist_check_PROGRAMS) $(check_PROGRAMS)

TEST_SUITE_HTML = $(TEST_SUITE_LOG:.log=.html)

# Get the list of tests that failed.
LIST_FAILED_TEST_LOGS = \
  perl -e 'print join " ",						\
                 grep {open(_) && <_> =~ /^(FAIL|XPASS): /} (@ARGV);'	\
       -- $(TEST_LOGS)

TEST_LOGS = $(TESTS:.chk=.log)
LAZY_TEST_SUITE = 1
STRICT_TEST_LOGS = $(shell $(LIST_FAILED_TEST_LOGS))
UCONSOLE_CHECK = $(top_builddir)/tests/bin/uconsole-check
UCONSOLE_CHECKFLAGS = -k2 --no-locations
tests_deps := $(call ls_files, *.u)

#.PHONY: check-buildfarm
CHECK_BUILDFARM_FLAGS = AM_COLOR_TESTS=no VERBOSE=1 # INSTRUMENTATION=1
# include $(top_srcdir)/build-aux/doxygen.mk

# Document aux.
share_dir = $(srcdir)/document-aux
share_bin_dir = $(share_dir)/bin
share_make_dir = $(share_dir)/make
share_style_dir = $(share_dir)/styles
share_bib_dir = $(share_dir)/bib
TEXI2DVI = $(share_bin_dir)/texi2dvi
# Find the style files, the bibliography files, and the figures.
# Arguably, we should always use qualified names, but this is annoying
# (at least for style files, it is acceptable for bib files).  We do
# it nevertheless for figures, because experience has already bitten
# me (AD).  So use \includegraphics{figs/lrde-big} instead of
# {lrde-big}.

# Find local *.sty files.  Find converted images from document-aux.
TEXI2DVIFLAGS = --tidy --build-dir=tmp.t2d --batch -I \
	$(share_style_dir) -I $(share_bib_dir) -I $(share_dir) -I \
	$(srcdir) -I $(builddir)/document-aux -I \
	$(top_srcdir)/modules/system/ros/doc -I \
	$(top_builddir)/modules/system/ros/doc
TEXI2PDF = $(TEXI2DVI) --pdf
TEXI2PDFFLAGS = $(TEXI2DVIFLAGS)
TEXI2HTML = $(TEXI2DVI) --html
TEXI2HTMLFLAGS = $(TEXI2DVIFLAGS) --tex4ht --verbose \
	--tex4ht-options=$(TEX4HTFLAGS)
TEXI2TEXT = $(TEXI2DVI) --text
TEXI2TEXTFLAGS = $(TEXI2DVIFLAGS)
TEXI2INFO = $(TEXI2DVI) --info
TEXI2INFOFLAGS = $(TEXI2DVIFLAGS)
share_tex_dependencies = \
$(STYLES) \
$(wildcard $(share_style_dir)/* $(share_bib_dir)/*)

CONVERT_TO_PDF = \
  { $(ENSURE_TARGET_DIR) ; } &&			\
  $(CONVERT) $< pdf:$@.tmp &&			\
  mv $@.tmp $@


# Formats to convert to PDF.
SHARE_EXTS_TO_PDF = \
  dot fig fdp gif id tif tiff pbm pgm ppm pdffig plt $(EXTS_TO_PDF)

# Formats to convert to PNG.
SHARE_EXTS_TO_PNG = dia $(EXTS_TO_PNG)

# FILES
# convert_ext SRC-EXT, DST-EXT, FILEs
# -----------------------------------
# Return the sorted list of $(FILES) with SRC-EXT as extension,
# changing to DST-EXT.
share_convert_ext = \
   $(sort						\
          $(patsubst %.$(1),%.$(2),			\
                     $(filter %.$(1),$(3))))


# FILES
# convert_exts SRC-EXTS, DST-EXT, FILES
# -------------------------------------
# Map all the extensions in SRC-EXTS to DST-EXT of the $(FILES) list.
share_convert_exts = \
  $(foreach ext,					\
            $(1),					\
            $(call share_convert_ext,$(ext),$(2),$(3)))


# FILES
# share_convert_to_pdf FILES
# --------------------------
# Choose the most appropriate format for PDFLaTeX for the FILES.
# Beware that unknown formats are left out.
share_convert_to_pdf = \
    $(call share_convert_exts,$(SHARE_EXTS_TO_PDF),pdf,$(1))	\
    $(call share_convert_exts,$(SHARE_EXTS_TO_PNG),png,$(1))

DOT_IMAGES = $(call ls_files,img/*.dot)
PNG_IMAGES = \
  $(call ls_files,img/*.png					\
                  @{../modules/system/ros}/doc/img/*.png)

cube_and_disc = urbi-sdk/$(PACKAGE_MAJOR).$(PACKAGE_MINOR)/cube-and-disc
PDF_IMAGES = $(call ls_files,img/*.pdf) document-aux/figs/gostai.pdf \
	document-aux/figs/$(cube_and_disc).pdf $(DOT_IMAGES:.dot=.pdf) \
	$(TRAJECTORIES:.utraj=.pdf)
EPS_IMAGES = $(PDF_IMAGES:.pdf=.eps) $(PNG_IMAGES:.png=.eps)
CONVERT_TO_EPS = \
  { $(ENSURE_TARGET_DIR) ; } &&			\
  $(CONVERT) $< eps:$@.tmp &&			\
  mv $@.tmp $@

pdf_DATA = $(am__append_1)

# Use tex4ht.
TEX4HTFLAGS = urbi-style,2,sections+
TEX4HT_POST = $(abs_top_srcdir)/build-aux/bin/tex4ht-post
dist_doc_DATA = \
  AUTHORS.txt					\
  LICENSE.txt					\
  README.txt					\
  THANKS.txt


# All the documents that can be compiled.  Used only for dependencies.
MASTERS = \
  urbi-naming.tex				\
  urbi-sandbox.tex				\
  urbi-sdk.tex

PDFS = \
  urbi-naming.pdf				\
  urbi-sdk.pdf

urbi_sdk_tex = $(call ls_files,*.tex)
urbi_sdk_sources = \
  $(urbi_sdk_tex)				\
  $(call ls_files,*.sty tables/*.txt)

REVISION_FILE = revision.sty
REVISIONFLAGS = --latex
urbi_sdk_deps = \
  config.sty					\
  $(REVISION_FILE)				\
  $(urbi_sdk_sources)

URBI = $(top_builddir)/tests/bin/urbi
GNUPLOT = gnuplot
TRAJECTORIES = $(call ls_files,trajectories/*.utraj)
SPELL_CHECK = $(abs_top_srcdir)/build-aux/bin/spell-check
AM_SPELL_CHECKFLAGS = -p urbi.dict --clean
RUN_SPELL_CHECK = $(SPELL_CHECK) $(AM_SPELL_CHECKFLAGS) $(SPELL_CHECKFLAGS)
doc_files = $(pdf_DATA) urbi-sdk.htmldir
all: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) all-am

.SUFFIXES:
.SUFFIXES: .i .ii .i.c .ii.cc .c .cc
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am $(top_srcdir)/build-aux/init.mk $(top_srcdir)/build-aux/revision.mk $(top_srcdir)/build-aux/make/html-dir.mk $(srcdir)/tests/local.mk $(top_srcdir)/build-aux/check.mk $(srcdir)/document-aux/make/tex.mk $(srcdir)/document-aux/make/pdf-figs.mk $(srcdir)/trajectories/local.mk $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign doc/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign doc/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
config.sty: $(top_builddir)/config.status $(srcdir)/config.sty.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@
install-libLTLIBRARIES: $(lib_LTLIBRARIES)
	@$(NORMAL_INSTALL)
	test -z "$(libdir)" || $(MKDIR_P) "$(DESTDIR)$(libdir)"
	@list='$(lib_LTLIBRARIES)'; test -n "$(libdir)" || list=; \
	list2=; for p in $$list; do \
	  if test -f $$p; then \
	    list2="$$list2 $$p"; \
	  else :; fi; \
	done; \
	test -z "$$list2" || { \
	  echo " $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL) $(INSTALL_STRIP_FLAG) $$list2 '$(DESTDIR)$(libdir)'"; \
	  $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL) $(INSTALL_STRIP_FLAG) $$list2 "$(DESTDIR)$(libdir)"; \
	}

uninstall-libLTLIBRARIES:
	@$(NORMAL_UNINSTALL)
	@list='$(lib_LTLIBRARIES)'; test -n "$(libdir)" || list=; \
	for p in $$list; do \
	  $(am__strip_dir) \
	  echo " $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f '$(DESTDIR)$(libdir)/$$f'"; \
	  $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f "$(DESTDIR)$(libdir)/$$f"; \
	done

clean-libLTLIBRARIES:
	-test -z "$(lib_LTLIBRARIES)" || rm -f $(lib_LTLIBRARIES)
	@list='$(lib_LTLIBRARIES)'; for p in $$list; do \
	  dir="`echo $$p | sed -e 's|/[^/]*$$||'`"; \
	  test "$$dir" != "$$p" || dir=.; \
	  echo "rm -f \"$${dir}/so_locations\""; \
	  rm -f "$${dir}/so_locations"; \
	done

clean-noinstLTLIBRARIES:
	-test -z "$(noinst_LTLIBRARIES)" || rm -f $(noinst_LTLIBRARIES)
	@list='$(noinst_LTLIBRARIES)'; for p in $$list; do \
	  dir="`echo $$p | sed -e 's|/[^/]*$$||'`"; \
	  test "$$dir" != "$$p" || dir=.; \
	  echo "rm -f \"$${dir}/so_locations\""; \
	  rm -f "$${dir}/so_locations"; \
	done
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(MKDIR_P) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	for p in $$list; do echo "$$p $$p"; done | \
	sed 's/$(EXEEXT)$$//' | \
	while read p p1; do if test -f $$p || test -f $$p1; \
	  then echo "$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n;h' -e 's|.*|.|' \
	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
	sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
	    else { print "f", $$3 "/" $$4, $$1; } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	    test -z "$$files" || { \
	    echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(bindir)$$dir'"; \
	    $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(bindir)$$dir" || exit $$?; \
	    } \
	; done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	files=`for p in $$list; do echo "$$p"; done | \
	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
	      -e 's/$$/$(EXEEXT)/' `; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(bindir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(bindir)" && rm -f $$files

clean-binPROGRAMS:
	@list='$(bin_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list
install-dist_binSCRIPTS: $(dist_bin_SCRIPTS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(MKDIR_P) "$(DESTDIR)$(bindir)"
	@list='$(dist_bin_SCRIPTS)'; test -n "$(bindir)" || list=; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  if test -f "$$d$$p"; then echo "$$d$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n' \
	    -e 'h;s|.*|.|' \
	    -e 'p;x;s,.*/,,;$(transform)' | sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1; } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) { files[d] = files[d] " " $$1; \
	      if (++n[d] == $(am__install_max)) { \
		print "f", d, files[d]; n[d] = 0; files[d] = "" } } \
	    else { print "f", d "/" $$4, $$1 } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	     if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	     test -z "$$files" || { \
	       echo " $(INSTALL_SCRIPT) $$files '$(DESTDIR)$(bindir)$$dir'"; \
	       $(INSTALL_SCRIPT) $$files "$(DESTDIR)$(bindir)$$dir" || exit $$?; \
	     } \
	; done

uninstall-dist_binSCRIPTS:
	@$(NORMAL_UNINSTALL)
	@list='$(dist_bin_SCRIPTS)'; test -n "$(bindir)" || exit 0; \
	files=`for p in $$list; do echo "$$p"; done | \
	       sed -e 's,.*/,,;$(transform)'`; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(bindir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(bindir)" && rm -f $$files
install-nodist_binSCRIPTS: $(nodist_bin_SCRIPTS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(MKDIR_P) "$(DESTDIR)$(bindir)"
	@list='$(nodist_bin_SCRIPTS)'; test -n "$(bindir)" || list=; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  if test -f "$$d$$p"; then echo "$$d$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n' \
	    -e 'h;s|.*|.|' \
	    -e 'p;x;s,.*/,,;$(transform)' | sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1; } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) { files[d] = files[d] " " $$1; \
	      if (++n[d] == $(am__install_max)) { \
		print "f", d, files[d]; n[d] = 0; files[d] = "" } } \
	    else { print "f", d "/" $$4, $$1 } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	     if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	     test -z "$$files" || { \
	       echo " $(INSTALL_SCRIPT) $$files '$(DESTDIR)$(bindir)$$dir'"; \
	       $(INSTALL_SCRIPT) $$files "$(DESTDIR)$(bindir)$$dir" || exit $$?; \
	     } \
	; done

uninstall-nodist_binSCRIPTS:
	@$(NORMAL_UNINSTALL)
	@list='$(nodist_bin_SCRIPTS)'; test -n "$(bindir)" || exit 0; \
	files=`for p in $$list; do echo "$$p"; done | \
	       sed -e 's,.*/,,;$(transform)'`; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(bindir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(bindir)" && rm -f $$files

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs
install-dist_docDATA: $(dist_doc_DATA)
	@$(NORMAL_INSTALL)
	test -z "$(docdir)" || $(MKDIR_P) "$(DESTDIR)$(docdir)"
	@list='$(dist_doc_DATA)'; test -n "$(docdir)" || list=; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL_DATA) $$files '$(DESTDIR)$(docdir)'"; \
	  $(INSTALL_DATA) $$files "$(DESTDIR)$(docdir)" || exit $$?; \
	done

uninstall-dist_docDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(dist_doc_DATA)'; test -n "$(docdir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	test -n "$$files" || exit 0; \
	echo " ( cd '$(DESTDIR)$(docdir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(docdir)" && rm -f $$files
install-pdfDATA: $(pdf_DATA)
	@$(NORMAL_INSTALL)
	test -z "$(pdfdir)" || $(MKDIR_P) "$(DESTDIR)$(pdfdir)"
	@list='$(pdf_DATA)'; test -n "$(pdfdir)" || list=; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL_DATA) $$files '$(DESTDIR)$(pdfdir)'"; \
	  $(INSTALL_DATA) $$files "$(DESTDIR)$(pdfdir)" || exit $$?; \
	done

uninstall-pdfDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(pdf_DATA)'; test -n "$(pdfdir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	test -n "$$files" || exit 0; \
	echo " ( cd '$(DESTDIR)$(pdfdir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(pdfdir)" && rm -f $$files
install-includeHEADERS: $(include_HEADERS)
	@$(NORMAL_INSTALL)
	test -z "$(includedir)" || $(MKDIR_P) "$(DESTDIR)$(includedir)"
	@list='$(include_HEADERS)'; test -n "$(includedir)" || list=; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL_HEADER) $$files '$(DESTDIR)$(includedir)'"; \
	  $(INSTALL_HEADER) $$files "$(DESTDIR)$(includedir)" || exit $$?; \
	done

uninstall-includeHEADERS:
	@$(NORMAL_UNINSTALL)
	@list='$(include_HEADERS)'; test -n "$(includedir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	test -n "$$files" || exit 0; \
	echo " ( cd '$(DESTDIR)$(includedir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(includedir)" && rm -f $$files
tags: TAGS
TAGS:

ctags: CTAGS
CTAGS:


distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) $(nodist_check_SCRIPTS) \
	  $(nodist_check_DATA)
	$(MAKE) $(AM_MAKEFLAGS) check-TESTS
check: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) check-am
all-am: Makefile $(LTLIBRARIES) $(PROGRAMS) $(SCRIPTS) $(DATA) \
		$(HEADERS)
install-binPROGRAMS: install-libLTLIBRARIES

installdirs:
	for dir in "$(DESTDIR)$(libdir)" "$(DESTDIR)$(bindir)" "$(DESTDIR)$(bindir)" "$(DESTDIR)$(bindir)" "$(DESTDIR)$(docdir)" "$(DESTDIR)$(pdfdir)" "$(DESTDIR)$(includedir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:
	-test -z "$(MOSTLYCLEANFILES)" || rm -f $(MOSTLYCLEANFILES)

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)
	-test -z "$(DISTCLEANFILES)" || rm -f $(DISTCLEANFILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
	-test -z "$(BUILT_SOURCES)" || rm -f $(BUILT_SOURCES)
	-test -z "$(MAINTAINERCLEANFILES)" || rm -f $(MAINTAINERCLEANFILES)
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic clean-libLTLIBRARIES \
	clean-libtool clean-local clean-noinstLTLIBRARIES \
	mostlyclean-am

distclean: distclean-am
	-rm -f Makefile
distclean-am: clean-am distclean-generic

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am: install-dist_docDATA install-includeHEADERS \
	install-pdfDATA
	@$(NORMAL_INSTALL)
	$(MAKE) $(AM_MAKEFLAGS) install-data-hook
install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-binPROGRAMS install-dist_binSCRIPTS \
	install-libLTLIBRARIES install-nodist_binSCRIPTS
	@$(NORMAL_INSTALL)
	$(MAKE) $(AM_MAKEFLAGS) install-exec-hook
install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am: installcheck-local

maintainer-clean: maintainer-clean-am
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-generic mostlyclean-libtool \
	mostlyclean-local

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS uninstall-dist_binSCRIPTS \
	uninstall-dist_docDATA uninstall-includeHEADERS \
	uninstall-libLTLIBRARIES uninstall-nodist_binSCRIPTS \
	uninstall-pdfDATA
	@$(NORMAL_INSTALL)
	$(MAKE) $(AM_MAKEFLAGS) uninstall-hook
.MAKE: all check check-am install install-am install-data-am \
	install-exec-am install-strip uninstall-am

.PHONY: all all-am check check-TESTS check-am clean clean-binPROGRAMS \
	clean-generic clean-libLTLIBRARIES clean-libtool clean-local \
	clean-noinstLTLIBRARIES distclean distclean-generic \
	distclean-libtool distdir dvi dvi-am html html-am info info-am \
	install install-am install-binPROGRAMS install-data \
	install-data-am install-data-hook install-dist_binSCRIPTS \
	install-dist_docDATA install-dvi install-dvi-am install-exec \
	install-exec-am install-exec-hook install-html install-html-am \
	install-includeHEADERS install-info install-info-am \
	install-libLTLIBRARIES install-man install-nodist_binSCRIPTS \
	install-pdf install-pdf-am install-pdfDATA install-ps \
	install-ps-am install-strip installcheck installcheck-am \
	installcheck-local installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-generic \
	mostlyclean-libtool mostlyclean-local pdf pdf-am ps ps-am \
	uninstall uninstall-am uninstall-binPROGRAMS \
	uninstall-dist_binSCRIPTS uninstall-dist_docDATA \
	uninstall-hook uninstall-includeHEADERS \
	uninstall-libLTLIBRARIES uninstall-nodist_binSCRIPTS \
	uninstall-pdfDATA

.PHONY: stamps
stamps: $(STAMPS)
.c.i:
	$(COMPILE) -E -o $@ $<

.cc.ii:
	$(CXXCOMPILE) -E -o $@ $<
.i.i.c:
	grep -v '#' $< | tr -s '\n' '\n' >$@.tmp
	mv $@.tmp $@

.ii.ii.cc:
	grep -v '#' $< | tr -s '\n' '\n' >$@.tmp
	mv $@.tmp $@
install-data-hook: $(INSTALL_DATA_HOOKS)
install-exec-hook: $(INSTALL_EXEC_HOOKS)
uninstall-hook: $(UNINSTALL_HOOKS)

.PHONY check-TESTS: clean-semaphores
clean-semaphores:
	-$(build_aux_dir)/bin/semaphore-clean.sh
REVISIONFLAGS ?= --header
REVISION_PREFIX ?= PACKAGE_

$(REVISION_FILE): $(top_srcdir)/.version $(REVISION) $(build_aux_dir)/revision.mk
	$(REVISION) $(REVISIONFLAGS)			\
		--cache=$<				\
		--prefix=$(REVISION_PREFIX)		\
		--directory				\
		--output=$@
	touch $@

.PHONY: install-html-dir
install-html-dir: $(html_DIR) $(EXTRA_html_DIR)
	$(mkdir_p) $(DESTDIR)$(htmldir)
	l1='$(html_DIR)';				\
	l2='$(EXTRA_html_DIR)';				\
	for d in $$l1 $$l2;				\
	do						\
	  base=$$(basename $$d);			\
	  dir=$$(dirname $$d);				\
	  (cd $$dir && tar cf - $$base)			\
	    | (cd $(DESTDIR)$(htmldir) && tar xf -);	\
	done

# Be sure to run up-to-date checking binaries.
check-TESTS: tests-check-programs
tests-check-programs:
	$(MAKE) $(AM_MAKEFLAGS) -C $(top_builddir)/tests am-check-programs

-include $(test_mks)

# Generating the test files.
$(srcdir)/tests/%-test.mk: %.tex $(srcdir)/bin/tex2chk
	srcdir=$(srcdir) move_if_change=$(move_if_change) \
	  $(srcdir)/bin/tex2chk $<

# Set this to `false' to disable hard errors.
ENABLE_HARD_ERRORS ?= :

# The exit status denoting a test to skip.
SKIP_STATUS ?= 77
# The exit status denoting a hard error, that cannot be saved by XFAIL.
HARD_STATUS ?= 177

# From a test file to a log file.
# Do not use a regular `.test.log:' rule here, since in that case the
# following rule (without incoming extension) will mask this one.
%.log: %.test $(check_programs)
	@$(am__check_pre) $${dir}$< $(am__check_post)

# The exact same commands, but for programs.
#
# Should be active by default, because it sometimes triggers when in
# should not.  For instance I had foo.chk tests that relied on
# directories with the name, without extensions (foo).  Then Make
# tried to run the directories to produce foo.log, not foo.chk.
#
#%.log: %$(EXEEXT)
#	@$(am__check_pre) $${dir}$< $(am__check_post)

TEST_LOGS ?= $(TESTS:.test=.log)
TEST_SUITE_LOG ?= test-suite.log

.PHONY: am-check-programs
am-check-programs: $(check_programs)

$(TEST_SUITE_LOG): $(TEST_LOGS)
	@results=$$(for f in $(TEST_LOGS); do sed 1q $$f; done);	\
	all=$$(  echo "$$results" | grep -c '^.');			\
	fail=$$( echo "$$results" | grep -c '^FAIL');			\
	pass=$$( echo "$$results" | grep -c '^PASS');			\
	skip=$$( echo "$$results" | grep -c '^SKIP');			\
	tfail=$$(echo "$$results" | grep -c '^TFAIL');			\
	xfail=$$(echo "$$results" | grep -c '^XFAIL');			\
	xpass=$$(echo "$$results" | grep -c '^XPASS');			\
	case fail=$$fail:xpass=$$xpass in				\
	  fail=0:xpass=0)						\
	    msg="The test suite passed.  ";				\
	    exit=true;;							\
	  *)								\
	    msg="The test suite failed.  ";				\
	    exit=false;;						\
	esac;								\
	msg="$$msg   - $$pass/$$all tests passed.  ";			\
	test $$fail -eq 0 ||						\
	  msg="$$msg   - $$fail failures.  ";				\
	test $$xpass -eq 0 ||						\
	  msg="$$msg   - $$xpass unexpected pass.  ";			\
	test $$xfail -eq 0 ||						\
	  msg="$$msg   - $$xfail expected failures.  ";			\
	test $$tfail -eq 0 ||						\
	  msg="$$msg   - $$tfail expected temporary failures.  ";	\
	test $$skip -eq 0 ||						\
	  msg="$$msg   - $$skip skipped tests.  ";			\
	if test "$$exit" = false; then					\
	  {								\
	    echo "$(PACKAGE_STRING): $(subdir)/$(TEST_SUITE_LOG)" |	\
	      $(am__rst_title);						\
	    echo "$$msg" | $(am__rst_bullet);				\
	    echo "TESTS_ENVIRONMENT" | $(am__rst_block);		\
	    echo "$(TESTS_ENVIRONMENT)" | 				\
	       tr ' ' '\n' | 						\
	       sort |							\
               $(am__rst_pre);						\
	    echo;							\
	    echo ".. contents:: :depth: 2";				\
	    echo;							\
	    for f in $(TEST_LOGS);					\
	    do								\
	      case $$(sed 1q $$f) in					\
	        SKIP:*|PASS:*|XFAIL:*);;				\
	        *) echo; cat $$f;;					\
	      esac;							\
	    done;							\
	  } >$(TEST_SUITE_LOG).tmp;					\
	  mv $(TEST_SUITE_LOG).tmp $(TEST_SUITE_LOG);			\
	  msg="$${msg}See $(subdir)/$(TEST_SUITE_LOG).  ";		\
	  if test -n "$(PACKAGE_BUGREPORT)"; then			\
	    msg="$${msg}Please report it to $(PACKAGE_BUGREPORT).  ";	\
	  fi;								\
	fi;								\
	$(am__tty_colors);						\
	if $$exit; then echo $$grn; else echo $$red; fi;		\
	  echo "$$msg" | $(am__text_box);				\
	echo $$std;							\
	test x"$$VERBOSE" = x || $$exit || cat $(TEST_SUITE_LOG);	\
	$$exit

# Run all the tests.
check-TESTS:
	@if test -n '$(LAZY_TEST_SUITE)'; then	\
	  rm -f $(STRICT_TEST_LOGS);		\
	else					\
	  rm -f $(TEST_LOGS);			\
	fi
	@rm -f $(TEST_SUITE_LOG)
	@$(MAKE) $(TEST_SUITE_LOG)

%.html: %.log
	@for r2h in $(RST2HTML) $$RST2HTML rst2html rst2html.py;	\
	do								\
	  if ($$r2h --version) >/dev/null 2>&1; then			\
	    R2H=$$r2h;							\
	  fi;								\
	done;								\
	if test -z "$$R2H"; then					\
	  echo >&2 "cannot find rst2html, cannot create $@";		\
	  exit 2;							\
	fi;								\
	$$R2H $< >$@.tmp
	@mv $@.tmp $@

# Be sure to run check-TESTS first, and then to convert the result.
# Beware of concurrent executions.  Run "check", not "check-TESTS",
# since the dependencies (check_PROGRAMS and others) are attached to
# the former, not the latter.  And expect "check" to fail.
check-html installcheck-html:
	@target=$$(echo $@ | sed -e 's/-html$$//');		\
	if $(MAKE) $(AM_MAKEFLAGS) $$target; then :; else	\
	  rv=$$?;						\
	  $(MAKE) $(AM_MAKEFLAGS) $(TEST_SUITE_HTML);		\
	  exit $$rv;						\
	fi

.PHONY: check-html installcheck-html
.PHONY: recheck recheck-html
recheck recheck-html:
	@target=$$(echo $@ | sed -e 's/^re//');			\
	if test -f $(TEST_SUITE_LOG); then			\
	  TESTS=$$($(LIST_FAILED_TEST_LOGS));			\
	  $(MAKE) $(AM_MAKEFLAGS) $$target TESTS="$$TESTS";	\
	else							\
	  $(MAKE) $(AM_MAKEFLAGS) $$target;			\
	fi

check-clean: check-clean-local
	rm -f $(CHECK_CLEANFILES) $(TEST_SUITE_LOG) $(TEST_SUITE_HTML) $(TEST_LOGS)
.PHONY: check-clean check-clean-local
clean-local: check-clean

# A target that just runs "make check", we don't want to "make all" as
# is the default with "make check-am".
just-check: $(nodist_check_SCRIPTS)
	$(MAKE) $(AM_MAKEFLAGS) check-TESTS
	$(MAKE) $(AM_MAKEFLAGS) spell-check
$(TEST_LOGS): $(top_builddir)/all.stamp
%.log: %.chk $(tests_deps)
	@$(am__check_pre) $(UCONSOLE_CHECK) $(UCONSOLE_CHECKFLAGS) $${dir}$< $(am__check_post)
check-clean-local:
	-chmod -R 700 $(TEST_LOGS:.log=.dir) 2>/dev/null
	rm -rf $(TEST_LOGS:.log=.dir)

# Run the tests with the install-environment.
installcheck-local:
	$(MAKE) $(AM_MAKEFLAGS)						\
	  TESTS_ENVIRONMENT='$$(INSTALLCHECK_ENVIRONMENT)' check
%heck-buildfarm:
	$(MAKE) $(AM_MAKEFLAGS) $*heck-html $(CHECK_BUILDFARM_FLAGS)

.check-TESTS: clean-semaphores

# Make sure we don't become promoted as default target.
all:
.PHONY: all
ChangeLog ?= ChangeLog

%.dvi: %.tex $(share_tex_dependencies)
	$(TEXI2DVI) $(TEXI2DVIFLAGS) -o $@ $<

%.html: %.tex $(share_tex_dependencies)
	$(TEXI2HTML) $(TEXI2HTMLFLAGS) -o $@ $<

%.info: %.tex $(share_tex_dependencies)
	$(TEXI2INFO) $(TEXI2INFOFLAGS) -o $@ $<

%.pdf: %.tex $(share_tex_dependencies)
	$(TEXI2PDF) $(TEXI2PDFFLAGS) -o $@ $<

%.txt: %.tex $(share_tex_dependencies)
	$(TEXI2TEXT) $(TEXI2TEXTFLAGS) -o $@ $<

%.dvi: %.ltx $(share_tex_dependencies)
	$(TEXI2DVI) $(TEXI2DVIFLAGS) -o $@ $<

%.info: %.ltx $(share_tex_dependencies)
	$(TEXI2INFO) $(TEXI2INFOFLAGS) -o $@ $<

%.html: %.ltx $(share_tex_dependencies)
	$(TEXI2HTML) $(TEXI2HTMLFLAGS) -o $@ $<

%.pdf: %.ltx $(share_tex_dependencies)
	$(TEXI2PDF) $(TEXI2PDFFLAGS) -o $@ $<

%.txt: %.ltx $(share_tex_dependencies)
	$(TEXI2TEXT) $(TEXI2TEXTFLAGS) -o $@ $<

rev.sty: $(ChangeLog)
	if svn --version >/dev/null 2>&1; then			\
	  $(share_bin_dir)/generate-rev-sty $< >$@;		\
	elif test -f $@; then					\
	  touch $@;						\
	else							\
	  echo '@newcommand{@SvnRev}{}' | tr '@' '\\' >$@;	\
	fi

rev.tex: rev.sty
	@echo >&2 "******* rev.tex is deprecated, using rev.sty instead"
	{								   \
	  echo "\PackageWarning{rev}";					   \
	  echo "        {rev.tex is deprecated, using rev.sty instead}{}"; \
	  cat rev.sty;							   \
	} >$@

tex-mostlyclean:
	rm -rf tmp.t2d
.PHONY: tex-mostlyclean
# mostlyclean-local is an Automake special target.
mostlyclean-local: tex-mostlyclean
.PHONY: mostlyclean-local

CONVERT ?= convert
DIA ?= dia
DOT ?= dot
ENSURE_TARGET_DIR ?= mkdir -p $(dir $@) || true
EPSTOPDF ?= epstopdf
FDP ?= fdp
FIG2DEV ?= fig2dev
GNUPLOT ?= gnuplot
PDFCROP ?= pdfcrop

# There seems to be more bugs in dia -> fig -> pdf than dia -> png.
%.png: %.dia
	$(ENSURE_TARGET_DIR)
	$(DIA) -n -e $@.tmp $<
	mv $@.tmp $@

%.png: %.fdp
	$(ENSURE_TARGET_DIR)
	$(FDP) -Tpng $< -o $@.tmp
	mv $@.tmp $@

%.fig: %.dot
	$(ENSURE_TARGET_DIR)
	$(DOT) -Tfig $< -o $@.tmp
	mv $@.tmp $@

%.pdf: %.dot
	$(ENSURE_TARGET_DIR)
# Some versions of dot don't support PDF output.
	if $(DOT) -Tpdf </dev/null 2>/dev/null; then	\
	  $(DOT) -Tpdf $< -o $@.t1 &&			\
	  $(PDFCROP) $@.t1 $@.tmp;			\
	else						\
	  $(DOT) -Tfig $< -o $@.t1 &&			\
	  $(FIG2DEV) -Lpdf -p dummy $@.t1 $@.tmp;	\
	fi
	rm $@.t1
	mv $@.tmp $@

%.fig: %.fdp
	$(ENSURE_TARGET_DIR)
	$(FDP) -Tfig $< -o $@.tmp
	perl -0777 -pi -e 's/^2 3 0.*\n.*\n//m' $@.tmp
	mv $@.tmp $@

%.pdf: %.fig
	$(ENSURE_TARGET_DIR)
	$(FIG2DEV) -Lpdf -p dummy $< $@.tmp
	mv $@.tmp $@

%.eps: %.fig
	$(ENSURE_TARGET_DIR)
	$(FIG2DEV) -Leps -p dummy $< $@.tmp
	mv $@.tmp $@

%.pdf %.eps %.pdftex_t: %.pdffig
	$(ENSURE_TARGET_DIR)
	-rm -f $*.{pdf,pdftex_t}
	$(FIG2DEV) -Lpdftex_t -p $*.pdf $< $*.pdftex_t
# Some versions of fig2dev produce code for epsfig instead of graphicx.
# Do not force the extension to PDF.
	perl -pi -e 's/\\epsfig\{file=/\\includegraphics{/;' \
		 -e 's/(\\includegraphics\{.*)\.pdf/$$1/;'   \
	  $*.pdftex_t
	$(FIG2DEV) -Lpdftex -p dummy $< $*.pdf
	$(FIG2DEV) -Lpstex -p dummy $< $*.eps

%.pdftex_t %.eps %.pdf: %.plt
	$(ENSURE_TARGET_DIR)
# gnuplot creates an output, even if it failed.  Remove it.
	rm -f $*.{tex,eps,pdf,pdftex_t}
# Put the output first, before the plotting command, and before
# requests from the user.  Set the terminal too there for the same
# reasons.
	{					\
	  echo 'set output "$*.eps"' &&		\
	  echo 'set terminal epslatex color' &&	\
	  cat $<;				\
	} > $*.plt.tmp
	LC_ALL=C $(GNUPLOT) $*.plt.tmp
	mv $*.tex $*.pdftex_t
	$(EPSTOPDF) $*.eps -o $*.pdf
	rm $*.plt.tmp

%.pdf: %.gif
	$(CONVERT_TO_PDF)
%.pdf: %.id
	$(ENSURE_TARGET_DIR)
	$(EPSTOPDF) $< -o pdf:$@.tmp
	mv $@.tmp $@

#%.pdf: %.eps
#	$(ENSURE_TARGET_DIR)
#	$(EPSTOPDF) $< -o $@.tmp
#	mv $@.tmp $@

%.pdf: %.jpg
	$(CONVERT_TO_PDF)
%.pdf: %.png
	$(CONVERT_TO_PDF)
%.pdf: %.tif
	$(CONVERT_TO_PDF)
%.pdf: %.tiff
	$(CONVERT_TO_PDF)
%.pdf: %.pbm
	$(CONVERT_TO_PDF)
%.pdf: %.pgm
	$(CONVERT_TO_PDF)
%.pdf: %.ppm
	$(CONVERT_TO_PDF)

%.eps: %.pdf
	$(CONVERT_TO_EPS)
# We have png => pdf => eps, but the result is poor, and it even fails
# with old versions of ghostscript.
%.eps: %.png
	$(CONVERT_TO_EPS)
%.htmldir: %.tex $(share_tex_dependencies) urbi-style.cfg
	-rm -rf $@ $@.tmp
	-$(mkdir_p) $@.tmp
	$(TEXI2HTML) $(TEXI2HTMLFLAGS) -o $@.tmp/$(notdir $*).html $<
	cd $@.tmp && $(TEX4HT_POST) -v -v --index $(notdir $*).html $(notdir $*)*.html
# We need to find a better means to provide our own *.png here.  I
# have not used the name "gostai.png" because stupidly the PDF
# compilation seems to prefer *.png to *.pdf, which is wrong here.
	cp $(share_dir)/figs/$(cube_and_disc).png $@.tmp/urbi-sdk0x.png
	cp $(share_dir)/figs/gostai.png $@.tmp/urbi-sdk1x.png
	mv $@.tmp $@

$(MASTERS:.tex=.pdf): $(urbi_sdk_deps) $(PDF_IMAGES)
$(MASTERS:.tex=.dvi) $(MASTERS:.tex=.htmldir): $(urbi_sdk_deps) $(EPS_IMAGES)

view: $(pdf_DATA)
	xpdf $<

# Compile urbi-sandbox, to see if some construct works well.
.PHONY: sandbox
sandbox: urbi-sandbox.htmldir urbi-sandbox.pdf
	open urbi-sandbox.pdf
	open urbi-sandbox.htmldir/index.html
$(srcdir)/%.dat: %.utraj
	$(ENSURE_TARGET_DIR)
	$(URBI) -q						\
	        -f $(srcdir)/trajectories/plot.u		\
	        -f '$<'						\
	        -e 'plot("$@.tmp", sample(y, 40, 0.1s));'	\
	        -e 'shutdown;'
	mv $@.tmp $@

%.pdftex_t %.eps %.pdf: %.dat
	$(ENSURE_TARGET_DIR)
# gnuplot creates an output, even if it failed.  Remove it.
	rm -f $*.{tex,eps,pdf,pdftex_t}
# Put the output first, before the plotting command, and before
# requests from the user.  Set the terminal too there for the same
# reasons.
	{						\
	  echo 'set output "$*.eps"';			\
	  echo 'set terminal epslatex color';		\
	  echo 'set key off';				\
	  echo 'plot "$<" using 1:2 with linespoints';	\
	} > $*.plt.tmp
	LC_ALL=C $(GNUPLOT) $*.plt.tmp
	mv $*.tex $*.pdftex_t
	$(EPSTOPDF) $*.eps -o $*.pdf
	rm $*.plt.tmp

# Not only is this true (i.e., we do want these intermediate files to
# be kept, as we store them in our repository), but it is also
# mandated by GNU Make, who, otherwise, does not seem to understand
# how to go from utraj to pdf with an intermediate step in $(srcdir).
.SECONDARY: $(addprefix $(srcdir)/,$(TRAJECTORIES:.utraj=.dat))

.PHONY: spell-check
spell-check:
	cd $(srcdir) &&						\
	$(RUN_SPELL_CHECK) $(urbi_sdk_tex) $(dist_doc_DATA)

# Make the *.txt documentation more accessible.  Cannot be handled in
# script/post-install since it is launched at the end of install-exec
# in the top-level diretory, which is processed before this `doc'
# directory.
install-data-hook:
	if test -n "$(DESTDIR)"; then		\
	  cd "$(DESTDIR)$(prefix)" &&		\
	  for i in share/doc/urbi-sdk/*.txt; do	\
	    case $(URBI_HOST_OS) in		\
	      (windows)				\
	        unix2dos "$$i" &&		\
	        cp -f "$$i" .			\
	        ;;				\
	      (*)				\
	        $(LN_S) -f "$$i"		\
	        ;;				\
	    esac				\
	  done					\
	fi

.PHONY: install-doc
install-doc: $(doc_files)
	scp -r $(doc_files) $(doc_host):$(doc_dir)/doc.new

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
