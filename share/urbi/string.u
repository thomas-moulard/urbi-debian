/*
 * Copyright (C) 2010, Gostai S.A.S.
 *
 * This software is provided "as is" without warranty of any kind,
 * either expressed or implied, including but not limited to the
 * implied warranties of fitness for a particular purpose.
 *
 * See the LICENSE file for more information.
 */

do (String)
{
  // The connectives == and < are builtins.
  //
  // Warning: We derive from Orderable first so that we use its
  // Object.==, otherwise String would use both Comparable.== and
  // Comparable.!= that bounce endlessly one on the other.
  setProtos([Orderable, Comparable, RangeIterable]);

  // Allow to use a string in a "for" loop.
  function asList()
  {
    split("")
  };

  // Look in \a set for the string that is the closest to this.
  function closest(var set)
  {
    // One character is too short.
    if (size == 1)
      return nil |

    var lcm = toLower |
    var min = 999 |
    var res = nil |
    for| (var n: set)
    {
      var d = lcm.distance(n.toLower) |
      if (d < min)
      {
        min = d |
        res = n |
	if (min == 0)      // Case mismatch only, that must be it.
          return res
      }
    } |
    // Do not overcorrect. Two errors, not including case mismatches,
    // ought to be enough for everybody. Also, do not try to correct
    // words with less than three letters unless we got a case
    // mismatch (caught above) or only one case-sensitive change.
    if (2 < min
        || (size < 3 && res.size < 3 && 1 < distance(res)))
      return nil |
    res
  };

  // It is more natural to refer to the length of a string.  Besides,
  // other encodings will make a difference between size and length.
  copySlot("size", "length");

  // String.'%%'
  // -----------
  // If the Formatter object is not present, provide a simple
  // implementation of '%', only handling '%s'.
  if (hasSlot("Formatter"))
    var this.'%' = function(list)
    {
      Formatter.new(this) % list
    }
  else
    var this.'%' = function(list)
    {
      if (!list.isA(List))
        list = [list] |
      var chunks = split("%s") |
      if (list.size != chunks.size - 1)
        throw "Invalid format: wrong number of arguments" |
      var res = "" |
      for| (var el: chunks)
      {
        res += el |
        if (!list.empty)
          res += list.removeFront
      }|
      res
    };
};
