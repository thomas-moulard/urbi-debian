/*
 * Copyright (C) 2010, Gostai S.A.S.
 *
 * This software is provided "as is" without warranty of any kind,
 * either expressed or implied, including but not limited to the
 * implied warranties of fitness for a particular purpose.
 *
 * See the LICENSE file for more information.
 */

do (System)
{
  // Assertion control.
  var ndebug = false;

  function assert_(assertion, message)
  {
    if (!assertion)
      throw Exception.new("failed assertion: " + message);
  };

  /// assert(assertion).
  function 'assert'
  {
    if (call.args.size != 1)
      throw Exception.Arity.new(call.message, call.args.size, 1) |
    if (!ndebug)
      assert_(call.evalArgAt(0), call.argString(0));
  };

  // To be executed when we have dictionnaries.
  function '$registerOps'()
  {
    if (this.hasLocalSlot("$opNeg"))
      return |
    var this.'$funRename' =
      [
        "has"    => "in",
        "hasNot" => "not in",
      ] |
    var this.'$opNeg' =
      [
        "=="  => "!=",
        "===" => "!==",
        "<"   => ">=",
        "<="  => ">",
        "in"  => "not in",
      ] |
    // Add the opposite.
    for|(var p: this.'$opNeg')
      this.'$opNeg'[p[1]] = p[0];
  };

  /// callFormat
  function callFormat(var res, var message, var args)
  {
    '$registerOps' |
    if (args.size == 1 && message in ["!"])
      "%s %s" % [message, args[0]]
    else if (args.size == 2 && message in '$funRename')
      "%s %s %s" % [args[1], '$funRename'[message], args[0]]
    else if (args.size == 2 && message in '$opNeg')
      "%s %s %s" % [args[0], message, args[1]]
    else if (2 <= args.size)
    {
      if (args[0])
        "%s.%s(%s)" % [args[0], message, args.tail.join(", ")]
      else
        "%s(%s)" % [message, args.tail.join(", ")]
    }
    else
    {
      if (args[0])
        "%s.%s" % [args[0], message]
      else
        "%s" % [message]
    }
  };

  /// callNegatedFormat
  function callNegatedFormat(var res, var message, var args)
  {
    if (args.size == 1 && message in ["!"])
      "%s %s == %s" % [message, args[0], res]
    else if (args.size == 2 && message in '$funRename')
      "%s %s %s" % [args[1], '$opNeg'['$funRename'[message]], args[0]]
    else if (args.size == 2 && message in '$opNeg')
      "%s %s %s" % [args[0], '$opNeg'[message], args[1]]
    else if (2 <= args.size)
    {
      if (args[0])
        "%s.%s(%s) == %s" % [args[0], message, args.tail.join(", "), res]
      else
        "%s(%s) == %s" % [message, args.tail.join(", "), res]
    }
    else
    {
      if (args[0])
        "%s.%s == %s" % [args[0], message, res]
      else
        "%s == %s" % [message, res]
    }
  };

  /// assertCall(Message: String | Lazy, Lhs, Rhs).
  function assertCall
  {
    if (call.args.size < 2)
      throw Exception.Arity.new(call.message, call.args.size, 2) |
    if (!ndebug)
    {
      // Support lazy invocations (all arguments are lazy),
      // or a partially lazy one, to ease bouncing from functions.
      var message =
      {
        if (call.args[0].type == "String")
          call.args[0]
        else
          call.argAt(0)
      }|

      // Skip the function name.
      var args = call.args.tail |

      var c = call |
      c.message = message |

      var target = args[0] |
      c.args = args.tail |
      c.target = target.value.acceptVoid |

      // Do the assertion and compute its message if thrown.
      var res = c.eval |

      assert_(res, {

        var unevaluated = Object.new |
        var unevaluated.asString = "?" |

        var args = [target] + c.args |
        // Evaluate all arguments, and pretty print them.
        var argStr = args.map(closure (v) { v.asString }) |
        var argVal = args.map(closure (v) {
          if (v.getSlot("val").isVoid
            || v.getSlot("val").allProtos.hasSame(Executable))
            unevaluated
          else
            v.val
        }) |
        var argPrint = argVal.map(closure (v) { v.asPrintable }) |
        if (target.asString == "<IMPLICIT>")
          argStr[0] = argPrint[0] = "" |
        "%s (%s)"
          % [callFormat("?", message, argStr),
             callNegatedFormat(res, message, argPrint)]
      })|
    }
  };


  /// assert_op(Operator: String | Lazy, Lhs, Rhs).
  var assert_op = getSlot("assertCall");

  var period = 20ms;

  // systemFiles.
  systemFiles->updateHook = function(slot, value)
  {
    setSystemFiles(value) |
    void
  };
  var loadFile_ = getSlot("loadFile");
  var defaultIsSystem = true;
  loadFile = function(file, isSystem = defaultIsSystem)
  {
    var res = loadFile_(file).acceptVoid |
    if (isSystem)
    {
      addSystemFile(file.asString)
    } |
    res.unacceptVoid
  };
  addSystemFile("urbi/urbi.u");
  addSystemFile(searchFile("urbi/urbi.u").asString);
  addSystemFile(searchFile("urbi/system.u").asString);

  [
    "ast/factory.cc",
    "ast/parametric-ast.cc",
    "ast/parametric-ast.hh",
    "ast/parametric-ast.hxx",
    "binder/binder.cc",
    "flower/flower.cc",
    "object/code.cc",
    "object/object-class.cc",
    "parser/ugrammar.y",
    "rewrite/desugarer.cc",
    "rewrite/pattern-binder.cc",
    "rewrite/rescoper.cc"
  ].each(getSlot("addSystemFile"));

  /// Look for file and load it.
  // Throw on errors.
  function load(file)
  {
    loadFile(searchFile(file));
  };

  function lobbies()
  {
    Lobby.instances
  };

  function lobby()
  {
    Lobby.lobby
  };

  // Look for file, and load it if found.
  function maybeLoad(var file, var channel = Global.clog)
  {
    var path = nil |
    try
    {
      path = searchFile(file)
    }
    catch (var e if e.isA(Exception.FileNotFound))
    {
    }|
    if (!path.isNil)
    {
      channel.echo("loading %s." % path) |
      loadFile(path)
    }
  };

  function ps()
  {
    nonInterruptible |
    for| (var t : jobs)
      t.dumpState
  };

  // Do not make a wrapper function here, as you would get a tag for
  // the scope of that function, instead of the caller.
  setSlot("scopeTag", Tag.getSlot("scope"));

  function version()
  {
    PackageInfo.components["Urbi SDK"].version
  };

};
