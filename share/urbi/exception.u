/*
 * Copyright (C) 2010, Gostai S.A.S.
 *
 * This software is provided "as is" without warranty of any kind,
 * either expressed or implied, including but not limited to the
 * implied warranties of fitness for a particular purpose.
 *
 * See the LICENSE file for more information.
 */

class Global.Exception
{
  addProto(Global.Traceable);

  // An error, or a warning?
  var isError = true;
  var message = "<no message>";

  // $location and backtrace are defined by the raise function of the
  // interpreter.  They point to where the Exception was thrown, not
  // created.
  var '$location';
  var slot;
  var routine;

  function init(msg)
  {
    message = msg
  };

  /// Make the instanciation of subobjects easier.
  function '$Exception'(msg)
  {
    Exception.getSlot("init").apply([this, msg])
  };

  function location()
  {
    // Syntax errors are located where the syntax error is, not where
    // the exception was thrown from (e.g., the "eval" or "load"
    // call).  This location is stored in 'loc', while '$location' is
    // always set by the generic exception throwing mechanism
    // (Interpreter::raise).
    if (hasLocalSlot("loc"))
      loc
    else if (!hideSystemFiles)
      '$location'.acceptVoid
    else if (!'$location'.isVoid
             && '$location'.begin.file.asString not in System.systemFiles)
      '$location'
    else
    {
      var b = backtrace |
      if (b.size != 0
          && !b[0].location.isNil)
      {
        // FIXME: Nasty hack: we need to avoid displaying
        // "assertCall:" when an assertion exception is displayed.
        // Actually, we need a means to "skip" a part of the
        // backtrace, see what's done in the runner for instance.
        if (b[0].name not in ["assert", "assert_", "assertCall"])
          routine = b[0].name|
        b[0].location
      }
    }
  };

  function '$show'()
  {
    var chan = { if (isError) cerr else Channel.warning } |
    chan << "!!! " + this |
    // Don't display the top-level stack frame if it's already
    // been used as location.
    var bt = backtrace |
    if (bt.size != 0 && location.acceptVoid == bt[0].location)
      bt.removeFront|
    for| (var sf: bt)
      // FIXME: Read the fixme above.
      if (sf.name not in ["assert", "assert_", "assertCall"])
        chan << "!!!    called from: " + sf
  };

  // <loc>: <slot or routine>: <message>
  function asString()
  {
    // FIXME: This is a hack: calling location might change 'routine'.
    // Clear this.
    var loc = location.acceptVoid |
    var res = message |
    if (!slot.isVoid)
      res = "%s: %s" % [slot, res]
    else if (!routine.isVoid)
      res = "%s: %s" % [routine, res] |
    if (!loc.isVoid)
      res = "%s: %s" % [loc, res] |
    res
  };

  function asPrintable()
  {
    "%s%s `%s'" %
      [{if (type == "Exception") "" else "Exception."},
       type, asString]
  };
};


// These functions should not be visible outside of this file.  The
// exception indentation is not done to minize differences.
{
  function makeFmtException(name, inherit, locSlots, fmt, fmtSlots)
  {
    var locSize = locSlots.size;
    var fmtSize = fmtSlots.size;

    class Res : inherit
    {
      type = name;
      var fmt = fmt;

      function init
      {
        if (call.argsCount != locSize + fmtSize)
          throw Exception.Arity.new("%s.%s" % [name, "init"],
                                    call.argsCount,
                                    size) |
        var values = call.evalArgs |
        for (var i: locSize)
          this.updateSlot(locSlots[i], values[i]) |
        for (var i: fmtSize)
          this.setSlot(fmtSlots[i], values[i + locSize])
      };

      function message()
      {
        var l = [];
        for (var i: fmtSize)
          l << this.getSlot(fmtSlots[i]) |
        fmt % l
      };
    };

    Exception.setSlot(name, Res);
  };

  function makeMsgException(name, inherit, locSlots, msg)
  {
    makeFmtException(name, inherit, locSlots, "", []);
    Exception.getSlot(name).removeSlot("fmt");
    Exception.getSlot(name).message = msg;
  };

  function makeException(name, inherit, locSlots)
  {
    makeMsgException(name, inherit, locSlots, Exception.message);
  };

class Exception.Arity: Exception
{
  var effective;
  var min;
  var max;

  function init(routine, effective, min, max = void)
  {
    this.routine = routine |
    this.effective = effective |
    this.min = min |
    if (!max.isVoid)
      this.max = max |
  };

  function message()
  {
     if (max.isVoid)
      "expected %s argument%s, given %s"
      % [min, {if (1 < min) "s" else ""}, effective]
    else
      "expected between %s and %s argument%s, given %s"
      % [min, max, {if (1 < max) "s" else ""}, effective]
  };
};

class Exception.BadNumber: Exception
{
  function init(routine, fmt, effective)
  {
    this.routine = routine;
    var this.fmt = fmt;
    var this.effective = effective;
  };

  function message()
  {
    fmt % effective
  };
};

class Exception.BadInteger: Exception.BadNumber
{
};

makeFmtException(
  "NegativeNumber", Exception.BadNumber, ["routine"],
  "expected non-negative number, got %s", ["effective"]
);

makeFmtException(
  "NonPositiveNumber", Exception.BadNumber, ["routine"],
  "expected positive number, got %s", ["effective"]
);

makeMsgException(
  "Constness", Exception.BadNumber, [],
  "cannot modify const slot"
);

makeFmtException(
  "FileNotFound", Exception, [],
  "file not found: %s", ["path"]
);

makeMsgException(
  "ImplicitTagComponent", Exception, [],
  "invalid component in implicit tag"
);

makeMsgException(
  "MatchFailure", Exception, [],
  "pattern did not match"
);

makeException(
  "Primitive", Exception, ["routine", "message"]
);

// Should move the slot in the location instead of adding it at the end of
// the message.
makeFmtException(
  "Redefinition", Exception, [],
  "slot redefinition: %s", ["slot_name"]
);

class Exception.Scheduling: Exception
{
  function throwNew(msg)
  {
    throw Exception.Scheduling.new(msg)
  };
};

class Exception.Syntax: Exception
{
  // The location of the syntactical error.
  var loc = "<no location>";
  var input = "<no input>";

  function init(var loc, var message, var input, var isError = true)
  {
    this.loc = loc |
    this.input = input |
    this.isError = isError |
    '$Exception'(message)
  };

  function asString()
  {
    ({
      if (isError)
        "%s: syntax error: %s"
      else
        "%s: %s"
    }) % [loc, message]
  };
};

/*----------------------.
| Type and subobjects.  |
`----------------------*/

class Exception.Type: Exception
{
  var expectedType = nil;
  var effective = nil;

  function init(effective, expected)
  {
    this.expectedType = expected.type |
    this.effective = effective
  };

  function message()
  {
    "unexpected %s, expected a %s"
      % [getSlot("effective").asPrintable, expectedType]
  };
};

class Exception.ArgumentType: Exception.Type
{
  var index = nil;
  var routine = nil;

  function init(routine, index, effective, expected)
  {
    Exception.Type.getSlot("init").apply([this, effective, expected]) |
    this.routine = routine |
    this.index = index
  };

  function message()
  {
    "unexpected %s for argument %s, expected a %s"
      % [getSlot("effective").asPrintable, index, expectedType]
  };
};

/*---------.
| Lookup.  |
`---------*/

class Exception.Lookup: Exception
{
  var msg;
  var obj;
  var suggested = nil;

  var fixSpelling = true;

  // \param m     the invalid slot name
  // \param o     the object into which the lookup is performed
  // \param deep  whether to report inherited slot names too.
  function init(var m, var o, var deep = true)
  {
    msg = m |
    obj = o |
    if (fixSpelling)
      suggested = m.closest({ if (deep) o.slotNames else o.localSlotNames })|
  };

  function message()
  {
    var res = "lookup failed: %s" % msg;
    if (suggested)
      res += " (possible misspelling of %s)" % suggested |
    res
  };
};

makeMsgException(
  "UnexpectedVoid", Exception, [],
  "unexpected void"
);


// Close the scope of make*Exception functions.
};
