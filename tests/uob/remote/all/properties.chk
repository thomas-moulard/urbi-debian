//#remote urbi/all

// This test could use "var a.val", but then a problem is that this "a"
// must be available to both ends.  This can be done by putting "a" in
// Global for k2, but that makes the test more dependend on the version
// of the kernel.
//
// It seems easier then to use an object which is already shared by both
// ends: remall itself.

UVar.new(remall, "mySlot") | {};

remall.mySlot = 2303;
[00000001] 2303

remall.mySlot->rangemin = 1;
[00000002] 1
remall.mySlot->rangemin;
[00000003] 1

remall.mySlot->rangemax = 2;
[00000004] 2
remall.mySlot->rangemax;
[00000005] 2

remall.mySlot->speedmin = 3;
[00000006] 3
remall.mySlot->speedmin;
[00000007] 3

remall.mySlot->speedmax = 4;
[00000008] 4
remall.mySlot->speedmax;
[00000009] 4

remall.mySlot->delta = 5;
[00000010] 5
remall.mySlot->delta;
[00000011] 5

remall.mySlot->blend = "mix";
[00000012] "mix"
remall.mySlot->blend;
[00000013] "mix"

remall.mySlot->constant = true|;

remall.readProps("remall.mySlot");
[00000014] [1, 2, 3, 4, 5, "mix", 1]

// Change all these properties to 0.
remall.writeProps("remall.mySlot", 0);
[00000015] 0

remall.mySlot->rangemin;
[00000016] 0

remall.mySlot->constant;
[00000016] 0

// Blend mode 0 = mix.
remall.readProps("remall.mySlot");
[00000017] [0, 0, 0, 0, 0, 0, 0]
