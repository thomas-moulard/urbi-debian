/*
This is a FSM like that:

+-SameLevelDiffParent------------------------------------------------------+
|+-A----------------------+ 	   	     +-B--------------------------+|
||+-AA-------------------+| 	   	     |+-BA-----------------------+||
|||+-AAA----------------+|| 	   	     ||+-BAA--------------------+|||
||||                    +--------------------->|                        ||||
||||                    ||| 	   	     ||+-----------+------------+|||
||||                    ||| 	   	     ||            v             |||
||||                    ||| 	   	     ||+-BAB-------+------------+|||
||||                    |<---------------------+                        ||||
|||+--------------------+|| 	   	     ||+------------------------+|||
||+----------------------+|        	     |+--------------------------+||
|+------------------------+                  +----------------------------+|
+--------------------------------------------------------------------------+

All generated files are inlined.

*/



/*!
 * SameLevelDiffParent.u: Main graph implementation.
 *
 * Load this file in your server to run the graph.
 *
 * Created:
 *      by: xml2urbi 2.0
 *
 * WARNING! All changes made in this file will be lost!
 */


// Load urbi-support files.
/*
 * node.u: This file is part of urbidev.
 * Copyright (C) Gostai S.A.S., 2007.
 *
 * This software is provided "as is" without warranty of any kind,
 * either expressed or implied, including but not limited to the
 * implied warranties of fitness for a particular purpose.
 *
 * See the LICENSE file for more information.
 * For comments, bug reports and feedback: http://www.urbiforge.com
 */

/*
 * array.u: This file is part of urbidev.
 * Copyright (C) Gostai S.A.S., 2007.
 *
 * This software is provided "as is" without warranty of any kind,
 * either expressed or implied, including but not limited to the
 * implied warranties of fitness for a particular purpose.
 *
 * See the LICENSE file for more information.
 * For comments, bug reports and feedback: http://www.urbiforge.com
 */

// Array functions tool box.
class Array; // List is a reserved identifier.

/*!
 * Return the index of the first inequality between two list.
 *
 * \param a1 array one.
 * \param a2 array two.
 */
function Array.diff_index(a1, a2)
{
  // FIXME: while instead of for because for is buggy with an empty body.
  // FIXME: Uggly code because of ticket #143.
  // Should be written this way:
  // for (i = 0; i < size(a1) && i < size(a2) && a1[i] == a2[i]; i++)
  //   ;
  var i = 0;
  for| (i = 0; i < size(a1) && i < size(a2); i++)
    if (a1[i] != a2[i])
      return i;
  return i;
};

// Base class of the nodes of a behavior graph.
class Node
{
  var name;	// The node name.
};

/*
 * node-start_code.u.template: This file is part of urbidev.
 * Copyright (C) Gostai S.A.S., 2007.
 *
 * This software is provided "as is" without warranty of any kind,
 * either expressed or implied, including but not limited to the
 * implied warranties of fitness for a particular purpose.
 *
 * See the LICENSE file for more information.
 * For comments, bug reports and feedback: http://www.urbiforge.com
 */

// This template is preprocessed with sed. All " + name + " will be replaced.

/*!
 * Compute the code of the start function using the name attribute.
 */
function Node.start_code ()
{
  var ret = "
function " + name + ".start (dst)
{
  // Initialize variables.
  var " + name + ".workEnded = 0;
  var " + name + ".startTime = time();
  // Setup transitions.
  var ret_transtion;
  ret_transitions = transitions () |
    {
      stop " + name + ".work;
      return ret_transitions
    },
  // Dispatch and work.
  " + name + ".start+begin+end:
    {
      if (dst != \"\" || start_node != \"\")
        {
          var ret = dispatch (name, dst);
          stop " + name + ".work;
          return ret;
        } &
        {
          " + name + ".work+begin+end: work() |
          " + name + ".workEnded = 1 |
          if (isdef(" + name + ".on_leave))
            __wrap_on_leave__ ();
        };
      waituntil(false)
    }
};";
  return ret;
};

at (Node.execute (code))
  exec (code);

/*!
 * Node class Constructor. Dynamically define the start function.
 *
 * \param name_  The name of the node.
 */
function Node.init (name_)
{
  name = name_;
  var code = start_code ();
  // FIXME: no nested function def allowed, workaround
  emit Node.execute (code);
};

/*!
 * Dispatch events. Start and stop nodes on the path from src to dst.
 *
 * \param src Name of the source node of the transition.
 * \param dst Name of the destination node of the transition.
 */
function Node.dispatch (src, dst)
{
  var src_node;                     // The node to start.
  var dst_node;                     // The argument to start.
  var ret;                          // src_node.start return value.
  var src_path = $(src + ".path");  // The path to the source node.
  var dst_path;                     // The path to the destination node.
  if (dst == "")
    dst_path = src_path
  else
    dst_path = $(dst + ".path");
  var index = Array.diff_index (src_path, dst_path);
  var size_dst_path;
  while (size(src_path) == index)
    {
      size_dst_path = size(dst_path);
      if (size_dst_path < index)
        "BehaviorGraph.dispatch:error: non sense"
      else
        {
          dst_node = "";
          // Choose the node to start.
          if (size_dst_path > index)
            {
              if (size_dst_path == index + 1)
                src_node = dst_path[size(dst_path) - 1]
              else
                {
                  src_node = dst_path[index];
                  dst_node = dst_path[size(dst_path) - 1]
                }
            }
          else
            src_node = $(src + ".start_node");
          ret = $(src_node + ".start") (dst_node);
        };
      dst_path = $(ret + ".path");
      index = Array.diff_index (src_path, dst_path);
    };
  return ret
};


// Load nodes code.
/*!
 * SameLevelDiffParent.u: SameLevelDiffParent state implementation.
 *
 * User friendly part of SameLevelDiffParent state implementation.
 *
 * Created:
 *      by: xml2urbi 2.0
 *
 * WARNING! All changes made in this file will be lost!
 */

// Beginning of SameLevelDiffParent state.

// Load SameLevelDiffParent core state definition.
# line 1 "SameLevelDiffParent/SameLevelDiffParent-core.u"
/*!
 * SameLevelDiffParent-core.u: SameLevelDiffParent state implementation.
 *
 * Core part of SameLevelDiffParent state implementation.
 *
 * Created:
 *      by: xml2urbi 2.0
 *
 * WARNING! All changes made in this file will be lost!
 */

/*
The SameLevelDiffParent node.
 */
if (isdef(SameLevelDiffParent))
  delete SameLevelDiffParent;
var SameLevelDiffParent = Node.new("SameLevelDiffParent");

// Initialize SameLevelDiffParent attributes.
var SameLevelDiffParent.start_node = "B";
var SameLevelDiffParent.path = [ "SameLevelDiffParent" ];
var SameLevelDiffParent.nodes = [ "A", "B" ];
var SameLevelDiffParent.parent = "";
var SameLevelDiffParent.workEnded = 0;
var SameLevelDiffParent.startTime = -1;

// Setup SameLevelDiffParent transitions.
function SameLevelDiffParent.transitions ()
{
  waituntil(false)
};

// FIXME: With $() for tags, we could avoid this function.
function SameLevelDiffParent.__wrap_on_leave__ ()
{
  SameLevelDiffParent.on_leave+begin+end: { SameLevelDiffParent.on_leave () }
};

// End of SameLevelDiffParent state.
# line 16 "SameLevelDiffParent/SameLevelDiffParent.u"

// SameLevelDiffParent functions.


function SameLevelDiffParent.begin ()
{
  var local.counter = 2;
  SameLevelDiffParent.counter << local.counter
};

function SameLevelDiffParent.work ()
{
   at (counter == 9)
      shutdown;
   loop { wait(1s) }
};

function SameLevelDiffParent.on_leave ()
{

};


// End of SameLevelDiffParent state.
/*!
 * A.u: A state implementation.
 *
 * User friendly part of A state implementation.
 *
 * Created:
 *      by: xml2urbi 2.0
 *
 * WARNING! All changes made in this file will be lost!
 */

// Beginning of A state.

// Load A core state definition.
# line 1 "SameLevelDiffParent/A-core.u"
/*!
 * A-core.u: A state implementation.
 *
 * Core part of A state implementation.
 *
 * Created:
 *      by: xml2urbi 2.0
 *
 * WARNING! All changes made in this file will be lost!
 */

/*
The A node.
 */
if (isdef(A))
  delete A;
var A = Node.new("A");

// Initialize A attributes.
var A.start_node = "AA";
var A.path = [ "SameLevelDiffParent", "A" ];
var A.nodes = [ "AA" ];
var A.parent = "SameLevelDiffParent";
var A.workEnded = 0;
var A.startTime = -1;

// Setup A transitions.
function A.transitions ()
{
  waituntil(false)
};

// FIXME: With $() for tags, we could avoid this function.
function A.__wrap_on_leave__ ()
{
  A.on_leave+begin+end: { A.on_leave () }
};

// End of A state.
# line 16 "SameLevelDiffParent/A.u"

// A functions.


// Called when the node get the focus.
function A.work ()
{
  loop { wait(1s) };
};

// Called when the node lose the focus.
function A.on_leave ()
{

};


// End of A state.
/*!
 * AA.u: AA state implementation.
 *
 * User friendly part of AA state implementation.
 *
 * Created:
 *      by: xml2urbi 2.0
 *
 * WARNING! All changes made in this file will be lost!
 */

// Beginning of AA state.

// Load AA core state definition.
# line 1 "SameLevelDiffParent/AA-core.u"
/*!
 * AA-core.u: AA state implementation.
 *
 * Core part of AA state implementation.
 *
 * Created:
 *      by: xml2urbi 2.0
 *
 * WARNING! All changes made in this file will be lost!
 */

/*
The AA node.
 */
if (isdef(AA))
  delete AA;
var AA = Node.new("AA");

// Initialize AA attributes.
var AA.start_node = "AAA";
var AA.path = [ "SameLevelDiffParent", "A", "AA" ];
var AA.nodes = [ "AAA" ];
var AA.parent = "A";
var AA.workEnded = 0;
var AA.startTime = -1;

// Setup AA transitions.
function AA.transitions ()
{
  waituntil(false)
};

// FIXME: With $() for tags, we could avoid this function.
function AA.__wrap_on_leave__ ()
{
  AA.on_leave+begin+end: { AA.on_leave () }
};

// End of AA state.
# line 16 "SameLevelDiffParent/AA.u"

// AA functions.


// Called when the node get the focus.
function AA.work ()
{
  loop { wait(1s) };
};

// Called when the node lose the focus.
function AA.on_leave ()
{

};


// End of AA state.
/*!
 * AAA.u: AAA state implementation.
 *
 * User friendly part of AAA state implementation.
 *
 * Created:
 *      by: xml2urbi 2.0
 *
 * WARNING! All changes made in this file will be lost!
 */

// Beginning of AAA state.

// Load AAA core state definition.
# line 1 "SameLevelDiffParent/AAA-core.u"
/*!
 * AAA-core.u: AAA state implementation.
 *
 * Core part of AAA state implementation.
 *
 * Created:
 *      by: xml2urbi 2.0
 *
 * WARNING! All changes made in this file will be lost!
 */

/*
The AAA node.
 */
if (isdef(AAA))
  delete AAA;
var AAA = Node.new("AAA");

// Initialize AAA attributes.
var AAA.start_node = "";
var AAA.path = [ "SameLevelDiffParent", "A", "AA", "AAA" ];
var AAA.nodes = [  ];
var AAA.parent = "AA";
var AAA.workEnded = 0;
var AAA.startTime = -1;

// Setup AAA transitions.
function AAA.transitions ()
{
  // to BAA (to BAA)
  at (counter % 3 == 2)
    {
      stop AAA.work;
      return "BAA"
    };
  waituntil(false)
};

// FIXME: With $() for tags, we could avoid this function.
function AAA.__wrap_on_leave__ ()
{
  AAA.on_leave+begin+end: { AAA.on_leave () }
};

// End of AAA state.
# line 16 "SameLevelDiffParent/AAA.u"

// AAA functions.


// Called when the node get the focus.
function AAA.work ()
{
  AAA.workEnded << workEnded;
  AAA.BAA.workEnded << BAA.workEnded;
  AAA.BAB.workEnded << BAB.workEnded;
  wait(10) |
  if (startTime < time())
    AAA.startTime: echo ("good")
  else
    AAA.startTime: echo ("bad");
  AAA.counter << counter;
  counter++
};

// Called when the node lose the focus.
function AAA.on_leave ()
{

};


// End of AAA state.
/*!
 * B.u: B state implementation.
 *
 * User friendly part of B state implementation.
 *
 * Created:
 *      by: xml2urbi 2.0
 *
 * WARNING! All changes made in this file will be lost!
 */

// Beginning of B state.

// Load B core state definition.
# line 1 "SameLevelDiffParent/B-core.u"
/*!
 * B-core.u: B state implementation.
 *
 * Core part of B state implementation.
 *
 * Created:
 *      by: xml2urbi 2.0
 *
 * WARNING! All changes made in this file will be lost!
 */

/*
The B node.
 */
if (isdef(B))
  delete B;
var B = Node.new("B");

// Initialize B attributes.
var B.start_node = "BA";
var B.path = [ "SameLevelDiffParent", "B" ];
var B.nodes = [ "BA" ];
var B.parent = "SameLevelDiffParent";
var B.workEnded = 0;
var B.startTime = -1;

// Setup B transitions.
function B.transitions ()
{
  waituntil(false)
};

// FIXME: With $() for tags, we could avoid this function.
function B.__wrap_on_leave__ ()
{
  B.on_leave+begin+end: { B.on_leave () }
};

// End of B state.
# line 16 "SameLevelDiffParent/B.u"

// B functions.


// Called when the node get the focus.
function B.work ()
{
  loop { wait(1s) };
};

// Called when the node lose the focus.
function B.on_leave ()
{

};


// End of B state.
/*!
 * BA.u: BA state implementation.
 *
 * User friendly part of BA state implementation.
 *
 * Created:
 *      by: xml2urbi 2.0
 *
 * WARNING! All changes made in this file will be lost!
 */

// Beginning of BA state.

// Load BA core state definition.
# line 1 "SameLevelDiffParent/BA-core.u"
/*!
 * BA-core.u: BA state implementation.
 *
 * Core part of BA state implementation.
 *
 * Created:
 *      by: xml2urbi 2.0
 *
 * WARNING! All changes made in this file will be lost!
 */

/*
The BA node.
 */
if (isdef(BA))
  delete BA;
var BA = Node.new("BA");

// Initialize BA attributes.
var BA.start_node = "BAA";
var BA.path = [ "SameLevelDiffParent", "B", "BA" ];
var BA.nodes = [ "BAA", "BAB" ];
var BA.parent = "B";
var BA.workEnded = 0;
var BA.startTime = -1;

// Setup BA transitions.
function BA.transitions ()
{
  waituntil(false)
};

// FIXME: With $() for tags, we could avoid this function.
function BA.__wrap_on_leave__ ()
{
  BA.on_leave+begin+end: { BA.on_leave () }
};

// End of BA state.
# line 16 "SameLevelDiffParent/BA.u"

// BA functions.


// Called when the node get the focus.
function BA.work ()
{
  loop { wait(1s) };
};

// Called when the node lose the focus.
function BA.on_leave ()
{

};


// End of BA state.
/*!
 * BAA.u: BAA state implementation.
 *
 * User friendly part of BAA state implementation.
 *
 * Created:
 *      by: xml2urbi 2.0
 *
 * WARNING! All changes made in this file will be lost!
 */

// Beginning of BAA state.

// Load BAA core state definition.
# line 1 "SameLevelDiffParent/BAA-core.u"
/*!
 * BAA-core.u: BAA state implementation.
 *
 * Core part of BAA state implementation.
 *
 * Created:
 *      by: xml2urbi 2.0
 *
 * WARNING! All changes made in this file will be lost!
 */

/*
The BAA node.
 */
if (isdef(BAA))
  delete BAA;
var BAA = Node.new("BAA");

// Initialize BAA attributes.
var BAA.start_node = "";
var BAA.path = [ "SameLevelDiffParent", "B", "BA", "BAA" ];
var BAA.nodes = [  ];
var BAA.parent = "BA";
var BAA.workEnded = 0;
var BAA.startTime = -1;

// Setup BAA transitions.
function BAA.transitions ()
{
  // to BAB (to BAB)
  at (counter % 3 == 0)
    {
      stop BAA.work;
      return "BAB"
    };
  waituntil(false)
};

// FIXME: With $() for tags, we could avoid this function.
function BAA.__wrap_on_leave__ ()
{
  BAA.on_leave+begin+end: { BAA.on_leave () }
};

// End of BAA state.
# line 16 "SameLevelDiffParent/BAA.u"

// BAA functions.


// Called when the node get the focus.
function BAA.work ()
{
  BAA.workEnded << workEnded;
  BAA.AAA.workEnded << AAA.workEnded;
  BAA.BAB.workEnded << BAB.workEnded;
  wait(10) |
  if (startTime < time())
    BAA.startTime: echo ("good")
  else
    BAA.startTime: echo ("bad");
  BAA.counter << counter;
  counter++
};

// Called when the node lose the focus.
function BAA.on_leave ()
{

};


// End of BAA state.
/*!
 * BAB.u: BAB state implementation.
 *
 * User friendly part of BAB state implementation.
 *
 * Created:
 *      by: xml2urbi 2.0
 *
 * WARNING! All changes made in this file will be lost!
 */

// Beginning of BAB state.

// Load BAB core state definition.
# line 1 "SameLevelDiffParent/BAB-core.u"
/*!
 * BAB-core.u: BAB state implementation.
 *
 * Core part of BAB state implementation.
 *
 * Created:
 *      by: xml2urbi 2.0
 *
 * WARNING! All changes made in this file will be lost!
 */

/*
The BAB node.
 */
if (isdef(BAB))
  delete BAB;
var BAB = Node.new("BAB");

// Initialize BAB attributes.
var BAB.start_node = "";
var BAB.path = [ "SameLevelDiffParent", "B", "BA", "BAB" ];
var BAB.nodes = [  ];
var BAB.parent = "BA";
var BAB.workEnded = 0;
var BAB.startTime = -1;

// Setup BAB transitions.
function BAB.transitions ()
{
  // to AAA (to AAA)
  at (counter % 3 == 1)
    {
      stop BAB.work;
      return "AAA"
    };
  waituntil(false)
};

// FIXME: With $() for tags, we could avoid this function.
function BAB.__wrap_on_leave__ ()
{
  BAB.on_leave+begin+end: { BAB.on_leave () }
};

// End of BAB state.
# line 16 "SameLevelDiffParent/BAB.u"

// BAB functions.


// Called when the node get the focus.
function BAB.work ()
{
  BAB.workEnded << workEnded;
  BAB.AAA.workEnded << AAA.workEnded;
  BAB.BAA.workEnded << BAA.workEnded;
  wait(10) |
  if (startTime < time())
    BAB.startTime: echo ("good")
  else
    BAB.startTime: echo ("bad");
  BAB.counter << counter;
  counter++
};

// Called when the node lose the focus.
function BAB.on_leave ()
{

};


// End of BAB state.

// Stop old code.
stop SameLevelDiffParent;
// Start code.
SameLevelDiffParent+begin+end:
  {
    // Start begin graph function.
    // FIXME: This command is not in BehaviorGraph.start() because we cannot use
    //        $() in tags.
    SameLevelDiffParent.begin+begin+end:
      {
        if (isdef(SameLevelDiffParent.begin))
          SameLevelDiffParent.begin ()
      };
    // Start the graph.
    SameLevelDiffParent.start ("");
  },

// End of file `SameLevelDiffParent.u'.
[00000001:SameLevelDiffParent] *** begin
[00000001:SameLevelDiffParent.begin] *** begin
[00000002:SameLevelDiffParent.counter] 2
[00000003:SameLevelDiffParent.begin] *** end
[00000004:SameLevelDiffParent.start] *** begin
[00000005:B.start] *** begin
[00000006:BA.start] *** begin
[00000007:BAA.start] *** begin
[00000008:BAA.work] *** begin
[00000009:BAA.workEnded] 0
[00000010:BAA.AAA.workEnded] 0
[00000011:BAA.BAB.workEnded] 0
[00000012:BA.work] *** begin
[00000013:B.work] *** begin
[00000014:SameLevelDiffParent.work] *** begin
[00000002] *** good
[00000016:BAA.counter] 2
[00000017:BAA.work] *** end
[00000018:BAA.on_leave] *** begin
[00000019:BAA.on_leave] *** end
[00000020:BAA.start] *** end
[00000021:BAB.start] *** begin
[00000022:BAB.work] *** begin
[00000023:BAB.workEnded] 0
[00000024:BAB.AAA.workEnded] 0
[00000025:BAB.BAA.workEnded] 1
[00000003] *** good
[00000027:BAB.counter] 3
[00000028:BAB.work] *** end
[00000029:BAB.on_leave] *** begin
[00000030:BAB.on_leave] *** end
[00000031:BAB.start] *** end
[00000032:BA.work] *** end
[00000033:BA.start] *** end
[00000034:B.work] *** end
[00000035:B.start] *** end
[00000036:A.start] *** begin
[00000037:AA.start] *** begin
[00000038:AAA.start] *** begin
[00000039:AAA.work] *** begin
[00000040:AAA.workEnded] 0
[00000041:AAA.BAA.workEnded] 1
[00000042:AAA.BAB.workEnded] 1
[00000043:AA.work] *** begin
[00000044:A.work] *** begin
[00000004] *** good
[00000046:AAA.counter] 4
[00000047:AAA.work] *** end
[00000048:AAA.on_leave] *** begin
[00000049:AAA.on_leave] *** end
[00000050:AAA.start] *** end
[00000051:AA.work] *** end
[00000052:AA.start] *** end
[00000053:A.work] *** end
[00000054:A.start] *** end
[00000055:B.start] *** begin
[00000056:BA.start] *** begin
[00000057:BAA.start] *** begin
[00000058:BAA.work] *** begin
[00000059:BAA.workEnded] 0
[00000060:BAA.AAA.workEnded] 1
[00000061:BAA.BAB.workEnded] 1
[00000062:BA.work] *** begin
[00000063:B.work] *** begin
[00000005] *** good
[00000065:BAA.counter] 5
[00000066:BAA.work] *** end
[00000067:BAA.on_leave] *** begin
[00000068:BAA.on_leave] *** end
[00000069:BAA.start] *** end
[00000070:BAB.start] *** begin
[00000071:BAB.work] *** begin
[00000072:BAB.workEnded] 0
[00000073:BAB.AAA.workEnded] 1
[00000074:BAB.BAA.workEnded] 1
[00000006] *** good
[00000076:BAB.counter] 6
[00000077:BAB.work] *** end
[00000078:BAB.on_leave] *** begin
[00000079:BAB.on_leave] *** end
[00000080:BAB.start] *** end
[00000081:BA.work] *** end
[00000082:BA.start] *** end
[00000083:B.work] *** end
[00000084:B.start] *** end
[00000085:A.start] *** begin
[00000086:AA.start] *** begin
[00000087:AAA.start] *** begin
[00000088:AAA.work] *** begin
[00000089:AAA.workEnded] 0
[00000090:AAA.BAA.workEnded] 1
[00000091:AAA.BAB.workEnded] 1
[00000092:AA.work] *** begin
[00000093:A.work] *** begin
[00000007] *** good
[00000095:AAA.counter] 7
[00000096:AAA.work] *** end
[00000097:AAA.on_leave] *** begin
[00000098:AAA.on_leave] *** end
[00000099:AAA.start] *** end
[00000100:AA.work] *** end
[00000101:AA.start] *** end
[00000102:A.work] *** end
[00000103:A.start] *** end
[00000104:B.start] *** begin
[00000105:BA.start] *** begin
[00000106:BAA.start] *** begin
[00000107:BAA.work] *** begin
[00000108:BAA.workEnded] 0
[00000109:BAA.AAA.workEnded] 1
[00000110:BAA.BAB.workEnded] 1
[00000111:BA.work] *** begin
[00000112:B.work] *** begin
[00000008] *** good
[00000114:BAA.counter] 8
[00000115:BAA.work] *** end
[00000116:BAA.on_leave] *** begin
[00000117:BAA.on_leave] *** end
