/*
This is a FSM like that:

   +--SameLevel----------------------------------------------------------+
   |                                 	       	       	              	 |
   |   +--Foo----------------+       	       	+--Bar----------------+  |
   |   |                     |       	       	|                     |  |
   |   |                     +----------------->|                     |  |
   |   |                     |                  |                     |  |
   |   |                     |       	       	|                     |  |
   |   |                     |       	       	|                     |  |
   |   |                     |       	       	|                     |  |
   |   |                     |<-----------------+                     |  |
   |   |                     |                 	|                     |  |
   |   |                     |                  |                     |  |
   |   +---------------------+                  +---------------------+  |
   |                                                                     |
   +---------------------------------------------------------------------+


All generated files are inlined.

*/

/*!
 * SameLevel.u: Main graph implementation.
 *
 * Load this file in your server to run the graph.
 *
 * Created:
 *      by: xml2urbi 2.0
 *
 * WARNING! All changes made in this file will be lost!
 */


// Load urbi-support files.
/*
 * node.u: This file is part of urbidev.
 * Copyright (C) Gostai S.A.S., 2007.
 *
 * This software is provided "as is" without warranty of any kind,
 * either expressed or implied, including but not limited to the
 * implied warranties of fitness for a particular purpose.
 *
 * See the LICENSE file for more information.
 * For comments, bug reports and feedback: http://www.urbiforge.com
 */

/*
 * array.u: This file is part of urbidev.
 * Copyright (C) Gostai S.A.S., 2007.
 *
 * This software is provided "as is" without warranty of any kind,
 * either expressed or implied, including but not limited to the
 * implied warranties of fitness for a particular purpose.
 *
 * See the LICENSE file for more information.
 * For comments, bug reports and feedback: http://www.urbiforge.com
 */

// Array functions tool box.
class Array; // List is a reserved identifier.

/*!
 * Return the index of the first inequality between two list.
 *
 * \param a1 array one.
 * \param a2 array two.
 */
function Array.diff_index(a1, a2)
{
  // FIXME: while instead of for because for is buggy with an empty body.
  // FIXME: Uggly code because of ticket #143.
  // Should be written this way:
  // for (i = 0; i < size(a1) && i < size(a2) && a1[i] == a2[i]; i++)
  //   ;
  var i = 0;
  for| (i = 0; i < size(a1) && i < size(a2); i++)
    if (a1[i] != a2[i])
      return i;
  return i;
};

// Base class of the nodes of a behavior graph.
class Node
{
  var name;	// The node name.
};

/*
 * node-start_code.u.template: This file is part of urbidev.
 * Copyright (C) Gostai S.A.S., 2007.
 *
 * This software is provided "as is" without warranty of any kind,
 * either expressed or implied, including but not limited to the
 * implied warranties of fitness for a particular purpose.
 *
 * See the LICENSE file for more information.
 * For comments, bug reports and feedback: http://www.urbiforge.com
 */

// This template is preprocessed with sed. All " + name + " will be replaced.

/*!
 * Compute the code of the start function using the name attribute.
 */
function Node.start_code ()
{
  var ret = "
function " + name + ".start (dst)
{
  // Initialize variables.
  var " + name + ".workEnded = 0;
  var " + name + ".startTime = time();
  // Setup transitions.
  var ret_transtion;
  ret_transitions = transitions () |
    {
      stop " + name + ".work;
      return ret_transitions
    },
  // Dispatch and work.
  " + name + ".start+begin+end:
    {
      if (dst != \"\" || start_node != \"\")
        {
          var ret = dispatch (name, dst);
          stop " + name + ".work;
          return ret;
        } &
        {
          " + name + ".work+begin+end: work() |
          " + name + ".workEnded = 1 |
          if (isdef(" + name + ".on_leave))
            __wrap_on_leave__ ();
        };
      waituntil(false)
    }
};";
  return ret;
};

at (Node.execute (code))
  exec (code);

/*!
 * Node class Constructor. Dynamically define the start function.
 *
 * \param name_  The name of the node.
 */
function Node.init (name_)
{
  name = name_;
  var code = start_code ();
  // FIXME: no nested function def allowed, workaround
  emit Node.execute (code);
};

/*!
 * Dispatch events. Start and stop nodes on the path from src to dst.
 *
 * \param src Name of the source node of the transition.
 * \param dst Name of the destination node of the transition.
 */
function Node.dispatch (src, dst)
{
  var src_node;                     // The node to start.
  var dst_node;                     // The argument to start.
  var ret;                          // src_node.start return value.
  var src_path = $(src + ".path");  // The path to the source node.
  var dst_path;                     // The path to the destination node.
  if (dst == "")
    dst_path = src_path
  else
    dst_path = $(dst + ".path");
  var index = Array.diff_index (src_path, dst_path);
  var size_dst_path;
  while (size(src_path) == index)
    {
      size_dst_path = size(dst_path);
      if (size_dst_path < index)
        "BehaviorGraph.dispatch:error: non sense"
      else
        {
          dst_node = "";
          // Choose the node to start.
          if (size_dst_path > index)
            {
              if (size_dst_path == index + 1)
                src_node = dst_path[size(dst_path) - 1]
              else
                {
                  src_node = dst_path[index];
                  dst_node = dst_path[size(dst_path) - 1]
                }
            }
          else
            src_node = $(src + ".start_node");
          ret = $(src_node + ".start") (dst_node);
        };
      dst_path = $(ret + ".path");
      index = Array.diff_index (src_path, dst_path);
    };
  return ret
};


// Load nodes code.
/*!
 * SameLevel.u: SameLevel state implementation.
 *
 * User friendly part of SameLevel state implementation.
 *
 * Created:
 *      by: xml2urbi 2.0
 *
 * WARNING! All changes made in this file will be lost!
 */

// Beginning of SameLevel state.

// Load SameLevel core state definition.
# line 1 "SameLevel/SameLevel-core.u"
/*!
 * SameLevel-core.u: SameLevel state implementation.
 *
 * Core part of SameLevel state implementation.
 *
 * Created:
 *      by: xml2urbi 2.0
 *
 * WARNING! All changes made in this file will be lost!
 */

/*
The SameLevel node.
 */
if (isdef(SameLevel))
  delete SameLevel;
var SameLevel = Node.new("SameLevel");

// Initialize SameLevel attributes.
var SameLevel.start_node = "Foo";
var SameLevel.path = [ "SameLevel" ];
var SameLevel.nodes = [ "Bar", "Foo" ];
var SameLevel.parent = "";
var SameLevel.workEnded = 0;
var SameLevel.startTime = -1;

// Setup SameLevel transitions.
function SameLevel.transitions ()
{
  waituntil(false)
};

// FIXME: With $() for tags, we could avoid this function.
function SameLevel.__wrap_on_leave__ ()
{
  SameLevel.on_leave+begin+end: { SameLevel.on_leave () }
};

// End of SameLevel state.
# line 16 "SameLevel/SameLevel.u"

// SameLevel functions.


function SameLevel.begin ()
{
  var local.counter = 1;
  SameLevel.counter << local.counter
};

function SameLevel.work ()
{
   at (counter == 5)
      shutdown;
   loop { wait(1s) }
};

function SameLevel.on_leave ()
{

};


// End of SameLevel state.
/*!
 * Bar.u: Bar state implementation.
 *
 * User friendly part of Bar state implementation.
 *
 * Created:
 *      by: xml2urbi 2.0
 *
 * WARNING! All changes made in this file will be lost!
 */

// Beginning of Bar state.

// Load Bar core state definition.
# line 1 "SameLevel/Bar-core.u"
/*!
 * Bar-core.u: Bar state implementation.
 *
 * Core part of Bar state implementation.
 *
 * Created:
 *      by: xml2urbi 2.0
 *
 * WARNING! All changes made in this file will be lost!
 */

/*
The Bar node.
 */
if (isdef(Bar))
  delete Bar;
var Bar = Node.new("Bar");

// Initialize Bar attributes.
var Bar.start_node = "";
var Bar.path = [ "SameLevel", "Bar" ];
var Bar.nodes = [  ];
var Bar.parent = "SameLevel";
var Bar.workEnded = 0;
var Bar.startTime = -1;

// Setup Bar transitions.
function Bar.transitions ()
{
  // to Foo (to Foo)
  at (counter % 2 == 1)
    {
      stop Bar.work;
      return "Foo"
    };
  waituntil(false)
};

// FIXME: With $() for tags, we could avoid this function.
function Bar.__wrap_on_leave__ ()
{
  Bar.on_leave+begin+end: { Bar.on_leave () }
};

// End of Bar state.
# line 16 "SameLevel/Bar.u"

// Bar functions.


// Called when the node get the focus.
function Bar.work ()
{
  Bar.workEnded << workEnded;
  Bar.Foo.workEnded << Foo.workEnded;
  wait(10) |
  if (startTime < time())
    Bar.startTime << echo ("good")
  else
    Bar.startTime << echo ("bad");
  Bar.counter << counter;
  counter++
};

// Called when the node lose the focus.
function Bar.on_leave ()
{

};


// End of Bar state.
/*!
 * Foo.u: Foo state implementation.
 *
 * User friendly part of Foo state implementation.
 *
 * Created:
 *      by: xml2urbi 2.0
 *
 * WARNING! All changes made in this file will be lost!
 */

// Beginning of Foo state.

// Load Foo core state definition.
# line 1 "SameLevel/Foo-core.u"
/*!
 * Foo-core.u: Foo state implementation.
 *
 * Core part of Foo state implementation.
 *
 * Created:
 *      by: xml2urbi 2.0
 *
 * WARNING! All changes made in this file will be lost!
 */

/*
The Foo node.
 */
if (isdef(Foo))
  delete Foo;
var Foo = Node.new("Foo");

// Initialize Foo attributes.
var Foo.start_node = "";
var Foo.path = [ "SameLevel", "Foo" ];
var Foo.nodes = [  ];
var Foo.parent = "SameLevel";
var Foo.workEnded = 0;
var Foo.startTime = -1;

// Setup Foo transitions.
function Foo.transitions ()
{
  // to Bar (to Bar)
  at (counter % 2 == 0)
    {
      stop Foo.work;
      return "Bar"
    };
  waituntil(false)
};

// FIXME: With $() for tags, we could avoid this function.
function Foo.__wrap_on_leave__ ()
{
  Foo.on_leave+begin+end: { Foo.on_leave () }
};

// End of Foo state.
# line 16 "SameLevel/Foo.u"

// Foo functions.


// Called when the node get the focus.
function Foo.work ()
{
  Foo.workEnded << workEnded;
  Foo.Bar.workEnded << Bar.workEnded;
  wait(10) |
  if (startTime < time())
    Foo.startTime << echo ("good")
  else
    Foo.startTime << echo ("bad");
  Foo.counter << counter;
  counter++
};

// Called when the node lose the focus.
function Foo.on_leave ()
{

};


// End of Foo state.

// Stop old code.
stop SameLevel;
// Start code.
SameLevel+begin+end:
  {
    // Start begin graph function.
    // FIXME: This command is not in BehaviorGraph.start() because we cannot use
    //        $() in tags.
    SameLevel.begin+begin+end:
      {
        if (isdef(SameLevel.begin))
          SameLevel.begin ()
      };
    // Start the graph.
    SameLevel.start ("");
  },

// End of file `SameLevel.u'.
[00000001:SameLevel] *** begin
[00000002:SameLevel.begin] *** begin
[00000003:SameLevel.counter] 1
[00000004:SameLevel.begin] *** end
[00000005:SameLevel.start] *** begin
[00000006:Foo.start] *** begin
[00000007:Foo.work] *** begin
[00000008:Foo.workEnded] 0
[00000009:Foo.Bar.workEnded] 0
[00000010:SameLevel.work] *** begin
[00000011:Foo.startTime] *** good
[00000012:Foo.counter] 1
[00000013:Foo.work] *** end
[00000014:Foo.on_leave] *** begin
[00000015:Foo.on_leave] *** end
[00000016:Foo.start] *** end
[00000017:Bar.start] *** begin
[00000018:Bar.work] *** begin
[00000019:Bar.workEnded] 0
[00000020:Bar.Foo.workEnded] 1
[00000021:Bar.startTime] *** good
[00000022:Bar.counter] 2
[00000023:Bar.work] *** end
[00000024:Bar.on_leave] *** begin
[00000025:Bar.on_leave] *** end
[00000026:Bar.start] *** end
[00000027:Foo.start] *** begin
[00000028:Foo.work] *** begin
[00000029:Foo.workEnded] 0
[00000030:Foo.Bar.workEnded] 1
[00000031:Foo.startTime] *** good
[00000032:Foo.counter] 3
[00000033:Foo.work] *** end
[00000034:Foo.on_leave] *** begin
[00000035:Foo.on_leave] *** end
[00000036:Foo.start] *** end
[00000037:Bar.start] *** begin
[00000038:Bar.work] *** begin
[00000039:Bar.workEnded] 0
[00000040:Bar.Foo.workEnded] 1
[00000041:Bar.startTime] *** good
[00000042:Bar.counter] 4
[00000043:Bar.work] *** end
[00000044:Bar.on_leave] *** begin
[00000045:Bar.on_leave] *** end
