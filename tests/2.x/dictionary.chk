// Dictionary.new.
var d = Dictionary.new;
[00000001] [ => ]

Dictionary.new("0", 0);
[00000002] ["0" => 0]

// Dictionary.set.
d.set("1", 42);
[00000003] ["1" => 42]

// Check on can redefine an element
d.set("1", 1);
[00000004] ["1" => 1]

d.set("2", 2).set("3", 3);
[00000005] ["1" => 1, "2" => 2, "3" => 3]

// Dictionary.[]=.
d["4"] = 4;
[00000006] 4

// Dictionary.keys.
d.keys.sort;
[00000007] ["1", "2", "3", "4"]

// Dictionary.asList.
d.asList.sort;
[00000008] [("1", 1), ("2", 2), ("3", 3), ("4", 4)]

// Dictionary.get.
d.get("1");
[00000009] 1

d.get("nada");
[00000010:error] !!! input.u:35.1-13: missing key: nada

// Dictionary.[].
d["2"];
[00000011] 2

d["nada"].isVoid;
[00000012:error] !!! input.u:42.1-9: missing key: nada

// Dictionary.erase.
d.erase("2");
[00000013] ["1" => 1, "3" => 3, "4" => 4]

Dictionary.new("1", 2, "3");
[00000014:error] !!! input.u:49.1-27: new: Dictionary constructor must be given an even number of arguments

// Dictionary syntax.
["a" => 1, "b" => 2].asList.sort;
[00000015] [("a", 1), ("b", 2)]

["==" => "!="];
[00000016] ["==" => "!="]

["1" => 1];
[00000017] ["1" => 1]

// Dictionary extension.
d = ["a" => 42]|;
d.extend(["b" => "coin"]);
[00000018] ["a" => 42, "b" => "coin"]

d.extend(["a" => 51, "c" => [1, 2, 3]]);
[00000019] ["a" => 51, "b" => "coin", "c" => [1, 2, 3]]
