* See also
  https://core.gostai.com/projects/common/wiki/TestSuites

* Writing tests
** One feature at a time
Do not test too many different things at the same time.  This does not
mean that "one test = one file", as this can also be a bit annoying:
you may check one feature several times in a single file, or several
aspects of it, but things that are really different should be in
different files.

** Don't waste cycles
Conversely, don't make zillions of small files for several aspects of
a single feature: one full test suite cycle is very expensive.

** Think reusability
Write tests that will long, and put them in the appropriate
directories.  Typically, don't write a single file that tests both the
old and the new syntax for a single feature: this test cannot be used
in future versions of Urbi that will no longer provide the backward
compatibility code.

Rather, write a backward compatibility test and put it into 1.5 for
instance, and write a present-day test in 1.x.

** Be gentle
To the others: indent your code, put comments and debugging data.  Use
the channel debug to output debugging information.  Use unique IDs to
ease tracking incorrect values: don't use foo several times, rather
foo, bar, etc.  Don't use 1, 2 and then again 1, 2, but 1, 2, 3, 4 etc.

** Be resilient
Tests should be as deterministic as possible.  Use large timer values,
try to be independent of the machine load.

** Document
Use comments liberally to document the test.  For instance if it's a
failure, document it (including the branch and revision of the
culprits, most typically the kernel).  If relevant, include
architecture infos (OS, compiler etc.).

** Leave debugging figures
Use the standard channels: cout and cerr.  The standard channel clog
is ignored: this is very useful to leave debugging information.  For
instance in 1.x/sinus.chk:

  function testVal (x, val, precision)
  {
    clog << "val delta: " + abs (x - val) + "  x: " + x + "  expect: " + val;
    cout << abs (x - val) <= precision;
  };

The real output (on cout) should be deterministic, but setting the
threshold can be hard, so we output on clog addition (test) debugging
information that is ignored when compared to the expected value.

* Test directories

** 0.x
Very elementary tests.  Should be run first: failing them is most
probably a problem in the test suite.

** 1.x
"Modern" tests for k1 that k2 should pass.

** uob
This historical directory should not exist, rather its tests should be
distributed in the x.y directories.

** 2.x
Tests for k2 that k1 is not expected to pass.

** reg
Regressions of 2.x.  There is no point in running them too early, as
they are typically composite.

** uli
Finite state machines generated by urbiLive.

* Name conventions.
Use dash to separate words in file names.

Classify: create directories for related tests.

Use singular names only.

Local Variables:
mode: outline
End:

