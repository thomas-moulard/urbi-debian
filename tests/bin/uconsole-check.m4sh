m4_pattern_allow([^URBI_PATH$])		         -*- shell-script -*-
URBI_INIT()
m4_include([bin/kernel-check.m4sh])
[

# Avoid zombies and preserve debugging information.
cleanup ()
{
  local exit_status="$?"

  # Let a second C-c really kill us: restore default traps.
  trap - 0 1 2 13 15

  # In case we were caught by set -e, kill the children.
  children_kill
  children_harvest

  rst_subsection "Debug outputs"
  rst_pre "debug" debug

  # The results of running uconsole itself (our sole child).
  children_report
  # Debugging data often explains failures, so it should be first.
  cat uconsole.debug.rst

  # The numbered clients.
  clients_rst_report

  local children_sta=$(children_status)

  # If the user is running us VERBOSE, do not remove evidences of the
  # crime.  Of course, do not remove the test dir before we finished
  # reading its contents (children_status).
  if test x"$VERBOSE" = x && $exit; then
    cd ..
    rm -rf $me.dir
  fi

  case $exit_status:$children_sta in
    (0:0) ;;
    (0:*) # Maybe a children exited for SKIP etc.
	  exit $children_sta;;
    (*:*) # If uconsole-check failed, there is a big problem.
	  error $exit_status "uconsole-check itself failed with $exit_status";;
  esac
  $exit
}
trap cleanup 0


## ----------- ##
## Functions.  ##
## ----------- ##

stderr ()
{
  local i
  for i
  do
    echo >&2 "$(basename $0): $me: $i"
    echo >&2
  done
}


usage ()
{
  cat <<EOF
usage: $0 [OPTIONS] FILE.chk

This script is expected to be run from the build hierarchy, e.g.,

  ../../../tests/uconsole-check ../../../tests/1.x/0-empty.chk
or
  uconsole-check 1.x/0-empty.chk  if builddir = srcdir

Options:
  -c, --clients NUM       number of concurrent clients [$clients]
  -h, --help              display this message and exit
		          see also the README file
      --no-locations      remove locations from the actual output,
                          in order to mock an interactive session
      --no-error-verbose  the kernel was not compiled with error-verbose

Expected variables:
  srcdir             the location of the tests/ directory in src tree
		     [$srcdir]
  UCONSOLE           the urbi-server wrapper to use
		     [$UCONSOLE]
  VERBOSE            if set, do not remove the working directory
		     if set to x, run set -x
  INSTRUMENTATION    whether instrumenting the binaries [$INSTRUMENTATION]
                     (true, false, or probability between 0 and 1).
  BENCH		     benchmark memory and CPU usage if set to true/yes/1.
  ENABLE_LOCKSYSTEM  set to true/yes/1 if activated
EOF
  exit 0
}


path_port ()
{
  case $(uname -s) in
    (CYGWIN*)  cygpath --windows "$1";;
    (*)	       echo "$1";;
  esac
}


## ---------------------- ##
## Processing chk files.  ##
## ---------------------- ##

# filter_input FILE.CHK
# ---------------------
# Extract input lines from FILE.CHK.
filter_input ()
{
  perl -wpe '
    # Instead of removing answer lines, leave empty lines so that
    # line numbers between input.u and *.chk match.
    s/^\[(\d{6,15}(:.*)?|:.*)\].*//;

    # Remove removal-protection from trailing spaces.
    s/#trailingws$//gm;
   ' \
   "$1"
}


# neutralize
# ----------
# Neutralize variations between several outputs.  Used to normalize
# both expected and effective outputs.
#
# Works as a filter: stdin -> stdout.
neutralize ()
{
  perl -0777 -wp  \
    -e '
    # Random answers to ping.
    s/(pong time=).*/$1XXXXXX/g;

    # Pointers (Object_0x12345678, uid: "0x12345678", with or without
    # quotes when printed, Tag<U0x1004043a0>).  On Windows, the
    # hexadecimal numbers use upper-case digits.
    #
    # Some chk use already neutralized addresses, i.e. "0xADDR".
    # Beware that it looks like something that starts like an
    # hexadecimal number, so we might change "0xADDR" into "0xADDRR".
    # Handle this case especially.
    s/(?<=[U\"_\s])0x(ADDR|[0-9a-fA-F]+)/0xADDR/g;

    # Anonymous jobs.
    s/shell_\d+/shell_NUM/g;

    # Anonymous tags.
    s/Tag<(\w+)_\d+>/Tag<$1_NUM>/g;

    # FIXME: for some reason, sometimes, on Windows, "%x" does not
    # print the "0x" prefix.  So the 0xADDR normalization fails.
    s/Tag<U(0xADDR|[0-9a-fA-F]+)>/Tag<U0xADDR>/g;
    s/uob_(0xADDR|[0-9a-fA-F]+)/uob_0xADDR/g;

    # Copyright/revision information.
    s/(\*{3} (?:Libport|Urbi).*version) .*/$1 <VERSION>/g;

    # Bison error messages are too sensitive to the grammar at hand, so
    # drop the verbose part.
    s/(unexpected .*), expecting.*/$1/g;

    # Some architectures (Windows) use three-digit exponents.  Most use 2.
    s/(\d\.*\d*[Ee][-+]*)0([0-9][0-9])/$1$2/g;

    # We do not track locations in urbi/*.u files since they evolve
    # constantly.  Actually, we do not even check the name of the
    # library file: they are all mapped to "urbi/urbi.u".  Beware
    # not to catch any path with "urbi/" in it (for instance all my
    # sources are in an urbi/ directory), only the last directory.
    #
    # Beware that Perl, contrary to all the tools I know, does
    # include \n in the negated char classes.  Which does matter
    # with -0777.
    s{^(\[.{8,}\]\ !!!\s+(?:called from: )?)
       (?:/.*/)?                    # path prefix
        (?:
            urbi/[^/\n]+\.u         # urbi library file
          | src/[^\n]+\.(?:cc|hxx)  # C++ sources
        )
       (?::[-.0-9]*)?               # line and column
       :}
     {$1urbi/urbi.u:}gmx;
'
}


# retimestamp
# -----------
# Neutralize the timetamps.
retimestamp ()
{
  perl -0777 -wp -e '
    my $counter = 1;
    s{^\[\d{8,}(:*[^@:>@]*)\]}
     {
       sprintf ("[%08d%s]", $counter++, $1);
     }gme;'
}


# filter_expected_output FILE.CHK
# -------------------------------
# Select the lines corresponding to output, normalizing the channel names.
# Strip the banner.  Neutralize ping/pong performances.
filter_expected_output ()
 {
  # Neutralize first to normalize the [12345678:channel] bits.  Lines like
  # "[:] foo" represent non-channel prefixed output.
  neutralize <"$1" |
    perl -wn \
     -e "my \$error_verbose = \"$error_verbose\";" \
     -e '
      s/^\[:\]// && print && next;
      /^\[\d{8,}(:\w*)?\]/ || next;
      next if /^\[\d{8,}:(clog)\]/;

      s/(syntax error): unexpected .*/\$1/
        if $error_verbose eq "false";
      print;
    ' |
    retimestamp
}


# run_shell SYMBOL FILE.CHK
# -------------------------
# Run the shell commands introduced by "//SYMBOL"
run_shell ()
{
  local cmd
  cmd=$(neutralize < "$2" | perl -wn -e 's/^\/\/'"$1"'\s+// && print')
  if test -n "$cmd"; then
    stderr "Running: $cmd"
    sh -c "$cmd"
  fi
}


# filter_effective_output FILE.OUT
# --------------------------------
# Neutralize the insignificant differences inplace.
filter_effective_output ()
{
   if test ! -s "$1"; then
     stderr "$1: no output at all"
   else
     perl <"$1" \
       -wn \
       -e "my \$abs_chk_dir = '$abs_chk_dir';" \
       -e "my \$abs_chk_dir_can = '$abs_chk_dir_can';" \
       -e "my \$host = '$host';" \
       -e "my \$locations = '$locations';" \
       -e "my \$pwd = '$(pwd -P)';" \
       -e "my \$rel_top_srcdir = '$rel_top_srcdir';" \
       -e '
         next if /^\[\d{8,}:clog\]/;

         # Portability to Windows.
         s/\r$//mg;

         # Convert paths from Windows to Unix style.  Use a cache,
         # as spawning a subprocess can be really costly.
         my %repath;
         sub repath ($)
         {
            local ($_) = @_;
            if (!defined $repath{$_})
            {
              # Our buildins on cygwin define host as mingw32, so
              # first try to see the OS we run on.  Then check for
              # $host, as any way the build machine is then Unix.
              if ($^O eq "cygwin")
              {
                $_ = `cygpath -u '"'"'$_'"'"'`;
                chomp $_;
              }
              elsif ($host =~ /mingw32/)
              {
                # Do not use winepath here, as we are actually using
                # Unix paths everywhere.  So simply convert
                # backslashes to forward slashes, and remove the
                # drive.  Winepath changes the path to use the
                # ".wine/dosdevices" directory.  For instance:
                #
                # pwd => /home/build
                #
                # winepath -u $HOME
                # =>/home/build/.wine/dosdevices/z:/home/build
                s/^[CZ]://;
                s{\\}{/}g;
              }
              $repath{$_} = $_;
            }
            $repath{$_};
         }

         # Convert Windows paths to Unix paths.  Do not be too brutal:
         # do not do it for a whole line, as, for instance, you might
         # "fix" escapes from "\n" to "/n".  The Path and Directory
         # are places to cure.
         s{(Directory|Path)\("(.*?)"\)}
          {
             "$1(\"" . repath($2) . "\")";
          }ge;
         # Error messages.  Cannot use variable-length look-behind.
         s{
            (
              (?:
               !!!
              |No\ such\ file\ or\ directory:
              |Permission\ denied:
              |Rhs\ of\ concatenation\ is\ absolute:
              |called\ from:
              |error\ loading\ file:
              |syntax\ error:
              )
              \s
            )
            ((?:[CZ]:)?[\\\-\.\w~]+)
          }
          {
            $1 . repath($2);
          }gxe;

         # We remove the path to test from the output since they depend
         # on the environment of the person who runs the test.  We
         # remove it in two different ways: $abs_chk_dir and
         # $abs_chk_dir_can because the first one is used for the input
         # file (since that is the path with which the server is fed)
         # and the second one in case of a "load", since in that case
         # the server uses a straight path (URBI_PATH).
         s,$abs_chk_dir/,,g;
         s,$abs_chk_dir_can/,,g;

         # We may also point to the top_srcdir tree, for instance in error
         # messages in desugared sources.
         s,\Q$rel_top_srcdir/\E,,g;

         s,$pwd,%CWD%,g;

         s/(!!!(?:\s+called from:)? )[\-\w\/\.]+:[\d\-.]+: /$1/
           if $locations eq "false";

         # The UObject project is enhanced to issue the timestamp.
         # Which, of course, is nondeterministic.  Beware of
         # unbalanced square brackets in M4 code.
         s{^\[(\d+:__ExternalMessage__\] \[1, .*), [\d.]+\]$}
          {[$1, <TIMESTAMP>]};

         print;
       ' |
     neutralize |
     retimestamp
   fi
}



## --------------------- ##
## Auxiliary functions.  ##
## --------------------- ##

# Parse command line options
]URBI_GET_OPTIONS([
  (-c|--clients) shift; clients=$1;;
  (-h|--help) usage ;;
  (--no-locations)     locations=false ;;
  (--no-error-verbose) error_verbose=false ;;

  (*) test "x$file" = x ||
	error USAGE "too many arguments"
      # check.mk adds a leading "./" (so that, if it is an executable,
      # the program be runnable without "." in $PATH) which annoys us.
      chk=$(echo "$1" | sed -e 's,^\./,,')
      ;;
])[

# uconsole_run CMD
# ----------------
# Launch uconsole.
uconsole_run ()
{
  local cmdname="uconsole"
  instrument -o "$cmdname.val" -- \
      $1 --silent --clients=$clients
  echo "$instrument_result" >$cmdname.cmd
  stderr "Launching $cmdname"
  $instrument_result >$cmdname.out.raw 2>$cmdname.err 3>$cmdname.debug.rst &
  children_register "$cmdname"
}


# client_rst_report NUM
# ---------------------
# Report the status of the client number NUM.
client_rst_report ()
{
  local pfx="client.$1"

  # Display input.
  rst_subsection "$me: $pfx"

  rst_pre "$pfx Input" $pfx.in

  if test -f $pfx.out.raw; then
    filter_effective_output $pfx.out.raw
  fi >$pfx.out.eff
  rst_expect output $pfx.out -F '^\[[0-9]*:syncline\]'

  rst_pre "$pfx Error output" $pfx.err
  rst_pre "$pfx Status"       $pfx.sta

  # Display Valgrind report.
  rst_pre "$pfx Valgrind" $pfx.val
}


# clients_rst_report
# ------------------
# Report the status of all the (regular) clients.
clients_rst_report ()
{
  local i="0"
  while test $i -lt $clients;
  do
    client_rst_report $i
    i=$(($i + 1))
  done
}


## ------ ##
## Main.  ##
## ------ ##

check_dir abs_top_builddir tests/bin/uconsole
: ${UCONSOLE=$abs_top_builddir/tests/bin/uconsole}
require_file $UCONSOLE

: ${CLIENTS=1}
clients=$CLIENTS
# Whether the syntax errors are verbose.
error_verbose=true
# Whether we pass or fail.
exit=true
# Whether we keep and check the locations in the output.
locations=true

# check_dir srcdir bin/uconsole-check.as
# check_dir abs_srcdir bin/uconsole-check.as

get_options "$@"

# Make it absolute.
abs_chk=$(absolute "$chk")
require_file "$abs_chk"

# ../../../tests/2.x/modifier/accel.chk -> 2.x/modifier
chk_dir=$(dirname "$chk" | sed -e "s,^$srcdir/,,")

# /Users/akim/src/urbi/1.5/kernel/_build/i386-apple-darwin9.2.2/../..
# Used to neutralize absolute paths in error messages.  Do not use
# $top_srcdir_can (/Users/akim/src/urbi/1.5/kernel) here, since that's
# not what the output message will use.
abs_chk_dir=$abs_srcdir/$chk_dir

# We also want the canonicalize path.
abs_chk_dir_can=$(canonicalize "$abs_chk_dir")

# ../../../tests/2.x/modifier/accel.chk -> 2.x/modifier/accel.
me=$chk_dir/$(basename "$chk" ".chk")

# Coding style: Do not accept underscores.
case $me in
 ( *_* )  # It's not a smiley: there is nothing cute about underscores.
	  fatal "do not use underscores in file names, but dashes";;
esac

# URBI_PATH: Let uconsole find the files to load.
urbi_path=$(absolute "$srcdir/$chk_dir")
urbi_path=$(path_port "$urbi_path")

save_IFS=$IFS
IFS=:
# Pass $chk_dir so that we can load files in 1.x, 2.x etc.
for i in : . $chk_dir $URBI_PATH; do
  IFS=$save_IFS
  case $i in
    (:) continue;;
    (*)
      if test -d "$i"; then
        urbi_path=$urbi_path:$(path_port $(absolute "$i"))
      fi
      ;;
  esac
done

# If URBI_PATH was empty, then it was defaulting to looking at
# URBI_ROOT.  Because of the semantics of the envvars, if we just
# prepend our stuff, URBI_ROOT is no longer honored.  Be sure to let
# URBI_ROOT do its job by leaving a trailing colon.
test -n "$URBI_PATH" ||
  urbi_path=$urbi_path:
export URBI_PATH=$urbi_path
stderr "URBI_PATH=$URBI_PATH"

normalize_boolean BENCH

timeout_adjust $abs_chk

# Move to a private test directory.
rel_top_srcdir=$top_srcdir
export top_builddir=$abs_top_builddir
export top_srcdir=$abs_top_srcdir
export chkdir=$abs_chk_dir_can
export test_name=$(basename "$chk")
mkcd $me.dir

# If there is a license file, copy it in the current test directory.
urbi_key=$abs_top_srcdir/urbi-key/urbi.key
normalize_boolean ENABLE_LOCKSYSTEM
if $ENABLE_LOCKSYSTEM && test ! -e "$urbi_key"; then
  fatal "cannot find urbi.key: $urbi_key"
fi
if test -e "$urbi_key"; then
  cp "$urbi_key" .
fi

stderr "git describe: $(cd $abs_top_srcdir && git describe --always)"

# ------- #
# Input.  #
# ------- #

# Compute input.
input=input.u
filter_input $abs_chk >$input

# Gather all the test.u files from srcdir to the directory of the
# current test.
dir=$chk_dir/
while true
do
  test ! -f $abs_srcdir/${dir}test.u ||
    input="$abs_srcdir/${dir}test.u $input"
  case $dir in
    (*/) dir=$(echo "$dir" | sed -e 's,[^/]*/$,,');;
    ('') break;;
  esac
done


# ---------------- #
# Prepare output.  #
# ---------------- #

# Compute expected output.
filter_expected_output $abs_chk >output.exp


# -------------- #
# Run uconsole.  #
# -------------- #

# Run shell setup commands.
run_shell '!' $abs_chk
# Feed the input to the console.
uconsole_run "$UCONSOLE $UCONSOLEFLAGS --quit $input"
# Wait for uconsole to finish.  uconsole also has a built-in timeout,
# so this time out should not fire.  If it does, it means that
# something is wrong bw uconsole and uconsole-check.  So be sure to
# use a longer basic timeout than in uconsole (it has 50).
children_wait 70

# Run shell cleanup commands.
run_shell '\$' $abs_chk

# It is trap on exit that builds the logs.
$exit
]
